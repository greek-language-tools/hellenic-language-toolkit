#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import time

τύπωσε = print
κείμενο = str
μήκος = len
εύρος = range

class Επίθετα():
	def __init__(self, sql, τονιστής):
		self.sql = sql
		self.τ = τονιστής
		
	def νέα(self, αναγνώριση, ανώμαλα, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί, καταλήξεις, ετονισμοί, διάλεκτοι):
		διάλεκτος = αναγνώριση["διάλεκτος"]
		ΑΑ = αναγνώριση.get("ΑΑ")
		cur = self.sql.conn.cursor()
		σετ = {}
		
		if ΑΑ!=None:
			for σύνολο in cur.execute(
				'select Κλειδί, Ἐτικέτες from Επίθετα where ΑΑ=? and Διάλεκτος=?;', 
					(ΑΑ, διάλεκτος)):
				if σύνολο:
						σετ[σύνολο[0]] = σύνολο[1]
			for k,v in σετ.items():
				if "τρέχον" in v:
					cur.execute('update Επίθετα set Ἐτικέτες=? where Κλειδί=?;', (v.replace("τρέχον", "ανενεργό"), k))
		else:
			αναγνώριση["ΑΑ"] = 1
			cur.execute('select max(ΑΑ) from Επίθετα where Διάλεκτος=?;', 
						(διάλεκτος, ))
			for c in cur:
				if c and c[0]:
					αναγνώριση["ΑΑ"] = c[0]+1
			
		self.__αποθήκευση(αναγνώριση)
		self.sql.conn.commit()
		self.φόρτωση(ανώμαλα, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί, καταλήξεις, ετονισμοί, διάλεκτοι)
		
	def __αποθήκευση(self, σύνολο):
		# Προαιρετικά
		Ἡμερομηνία = σύνολο.get("Ἡμερομηνία")
		if not Ἡμερομηνία:
			Ἡμερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Ἐτικέτες = σύνολο.get("ἐτικέτες")
		if not Ἐτικέτες:
			Ἐτικέτες = "τρέχον, "
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		if not Παρατηρήσεις:
			Παρατηρήσεις = ""
			
		# Υποχρεωτικά
		ΑΑ = σύνολο["ΑΑ"]
		Διάλεκτος = σύνολο["διάλεκτος"]
		Μεταδεδομένα = str(σύνολο["Μεταδεδομένα"])
		Κλίμακες = str(σύνολο["Κλίμακες"])
		συνθετικό = σύνολο["συνθετικό"]
		λήμμα = σύνολο["λήμμα"]
		κατηγορία = str(σύνολο["κατηγορίες"])
		τονισμός = str(σύνολο["τονισμοί"])
		συχνότητα = σύνολο["συχνότητα"]
		cur = self.sql.conn.cursor()
		cur.execute('insert into Επίθετα (ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, '+
				'τονισμοί, συχνότητα, Παρατηρήσεις) '+
			'values (?, ?, ?, ?, ?, ?,	?, ?, ?,	?, ?, ?, ?)', 
			(ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, 
			συνθετικό, λήμμα, κατηγορία, τονισμός, συχνότητα, Παρατηρήσεις))
	
	def τρέχον(self, αναγνώριση, καταλήξεις, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί):	
		ΑΑ = αναγνώριση["ΑΑ"]
		Κλειδί = αναγνώριση["Κλειδί"]
		διάλεκτος = αναγνώριση["διάλεκτος"]
		
		σετ = []
		τρέχον = None
		cur = self.sql.conn.cursor()
		for σύνολο in cur.execute(
			'select Κλειδί, Ἐτικέτες from Επίθετα where ΑΑ=? and Διάλεκτος=?;', 
			(ΑΑ, διάλεκτος)):
			if σύνολο and σύνολο[0]!=Κλειδί:
				σετ.append([σύνολο[0], σύνολο[1]])
			elif σύνολο[0]==Κλειδί:
				τρέχον = σύνολο[1]
		for σ in σετ:
			if "τρέχον" in σ[1]:
				cur.execute('update Επίθετα set Ἐτικέτες=? where Κλειδί=?;', (σ[1].replace("τρέχον", "ανενεργό"), σ[0]))
		if τρέχον:
			if "ανενεργό" in τρέχον:
				τρέχον = τρέχον.replace("ανενεργό", "")
			if "διαγραμμένο" in τρέχον:
				τρέχον = τρέχον.replace("διαγραμμένο", "")
			νέο_τρέχον = []
			for σ in τρέχον.split(","):
				σσ = σ.strip()
				if σσ:
					νέο_τρέχον.append(σσ)
			νέο_τρέχον.append("τρέχον")
			cur.execute('update Επίθετα set Ἐτικέτες=? where Κλειδί=?;', 
							(", ".join(νέο_τρέχον), Κλειδί))
		self.φόρτωση(καταλήξεις, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί)
		self.sql.conn.commit()
		
	def διαγραφή(self, αναγνώριση, τονισμοί, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί):
		cur = self.sql.conn.cursor()
		Κλειδί = αναγνώριση["Κλειδί"]
		σετ = []
		for σύνολο in cur.execute('select Ἐτικέτες from Επίθετα where Κλειδί=?;', (Κλειδί, )):
			if σύνολο:
				σετ.append(σύνολο[0])
		for σ in σετ:
			up = False
			if "διαγραμμένο" in σ:
				up = False
			elif "τρέχον" in σ:
				σ=σ.replace("τρέχον", "διαγραμμένο")
				up = True
			elif "ανενεργό" in σ:
				σ=σ.replace("ανενεργό", "διαγραμμένο")
				up = True
			if up:
				cur.execute('update Επίθετα set Ἐτικέτες=? where Κλειδί=?;', (σ, Κλειδί))
		self.φόρτωση(τονισμοί, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί)
		
		self.sql.conn.commit()
		
	def αποθήκευση_λέξης(self, σύνολο, ΑΑ, Ημερομηνία = None):
		cur = self.conn.cursor()
		μτλ = σύνολο["μέρος του λόγου"]
		if not Ημερομηνία:
			Ημερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Flags = σύνολο.get("Flags")
		if not Flags:
			Flags = "default, "
		Μεταδεδομένα = σύνολο.get("μεταδεδομένα")
		Κλίμακες = σύνολο.get("κλίμακες")
		Διάλεκτος = σύνολο["διάλεκτος"]
		συνθετικό = σύνολο.get("συνθετικό")
		συχνότητα = σύνολο["συχνότητα"]
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		αα_μέτα = 0
		if Μεταδεδομένα:
			αα_μέτα = self._προσθήκη_μεταδεδομένων(Μεταδεδομένα, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, Παρατηρήσεις)
		αα_κλίμακας = 0
		if Κλίμακες:
			αα_κλίμακας = self._προσθήκη_Κλίμακας(Κλίμακες, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, Παρατηρήσεις)
		if μτλ == "ρήμα":
			αα_ρήμα = 0
			if "ρήμα" in σύνολο:
				χρόνοι = [0,0,0,0,0,0,0]
				for χρόνος, τιμές in σύνολο["ρήμα"].items():
					if χρόνος not in ["ενεστώτας", "παρατατικός", "αόριστος", 
										"παρακείμενος", "υπερσυντέλικος", "μέλλοντας", "συντελεσμένος μέλλοντας"]:
						continue
					καταλήξεις = str(τιμές["καταλήξεις"]) # κατηγορία_φωνής_έγκλισης
					τονισμοί = str(τιμές["τονισμοί"]) # κατηγορία_φωνής_έγκλισης
					υπάρχει = cur.execute("SELECT ΑΑ, max(Ημερομηνία) from χρόνοι where Διάλεκτος=? and χρόνος=? and καταλήξεις=? and τονισμοί=?;",
								(Διάλεκτος, χρόνος, καταλήξεις, τονισμοί))
					αα_χρόνων = 0
					for υπα in υπάρχει:
						if υπα[0]:
							αα_χρόνων = υπα[0]
							χρόνοι[self.χρόνοι_offset[χρόνος]] = αα_χρόνων
						else:
							cur.execute('SELECT MAX(ΑΑ) FROM χρόνοι where Διάλεκτος=? and χρόνος=?;', (Διάλεκτος, χρόνος))
							αα_χρόνων = 1
							for c in cur:
								if c[0]:
									αα_χρόνων = c[0]+1
							Παρατηρήσεις3 = τιμές.get("Παρατηρήσεις")
							χρόνοι[self.χρόνοι_offset[χρόνος]] = αα_χρόνων
							cur.execute('insert into "χρόνοι" values (?, ?, ?, ?, ?, ?, ?, ?, ?)', 
										(αα_χρόνων, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags,
										χρόνος, καταλήξεις, τονισμοί, Παρατηρήσεις3))
				υπάρχει2 = cur.execute('SELECT ΑΑ, max(Ημερομηνία), ενεστώτας, παρατατικός from Ρήματα where '+
					'Διάλεκτος=? and ενεστώτας=? and παρατατικός=? and αόριστος =? and '+
					'παρακείμενος=? and υπερσυντέλικος=? and μέλλοντας=? and '+
					'"συντελεσμένος μέλλοντας"=?;',
						(Διάλεκτος, χρόνοι[self.χρόνοι_offset["ενεστώτας"]], 
						χρόνοι[self.χρόνοι_offset["παρατατικός"]], χρόνοι[self.χρόνοι_offset["αόριστος"]], 
						χρόνοι[self.χρόνοι_offset["παρακείμενος"]], χρόνοι[self.χρόνοι_offset["υπερσυντέλικος"]], 
						χρόνοι[self.χρόνοι_offset["μέλλοντας"]], χρόνοι[self.χρόνοι_offset["συντελεσμένος μέλλοντας"]]))
				αα_ρήμα = 0
				for υπα2 in υπάρχει2:
					if υπα2[0]:
						αα_ρήμα = υπα2[0]
					else:
						cur.execute('SELECT MAX(ΑΑ) FROM Ρήματα where Διάλεκτος=?;', (Διάλεκτος,))
						αα_ρήμα = 1
						for c in cur:
							if c[0]:
								αα_ρήμα = c[0]+1
						Παρατηρήσεις2 = σύνολο["ρήμα"].get("Παρατηρήσεις")
						cur.execute('insert into "Ρήματα" (Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, ΑΑ, ενεστώτας, '+
							'παρατατικός, αόριστος, παρακείμενος, υπερσυντέλικος, μέλλοντας, "συντελεσμένος μέλλοντας", '+
							'Παρατηρήσεις) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
							(Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, αα_ρήμα,
							χρόνοι[self.χρόνοι_offset["ενεστώτας"]], χρόνοι[self.χρόνοι_offset["παρατατικός"]], 
							χρόνοι[self.χρόνοι_offset["αόριστος"]], χρόνοι[self.χρόνοι_offset["παρακείμενος"]], 
							χρόνοι[self.χρόνοι_offset["υπερσυντέλικος"]], χρόνοι[self.χρόνοι_offset["μέλλοντας"]], 
							χρόνοι[self.χρόνοι_offset["συντελεσμένος μέλλοντας"]], Παρατηρήσεις2))
			αα_μετοχή = 0
			if "μετοχή" in σύνολο:
				μετοχές = [0,0,0,0,0,0,0]
				for χρόνος, τιμές in σύνολο["μετοχή"].items():
					if χρόνος not in ["ενεστώτας", "παρατατικός", "αόριστος", 
										"παρακείμενος", "υπερσυντέλικος", "μέλλοντας", "συντελεσμένος μέλλοντας"]:
						continue
					καταλήξεις = str(τιμές["καταλήξεις"]) # κατηγορία_φωνής_έγκλισης
					τονισμοί = str(τιμές["τονισμοί"]) # κατηγορία_φωνής_έγκλισης
					υπάρχει = cur.execute('SELECT ΑΑ, max(Ημερομηνία) from μετοχῶν where '+
						'Διάλεκτος=? and χρόνος=? and καταλήξεις=? and τονισμοί=?;',
								(Διάλεκτος, χρόνος, καταλήξεις, τονισμοί))
					αα_μετοχών = 0
					for υπα in υπάρχει:
						if υπα[0]:
							αα_μετοχών = υπα[0]
							μετοχές[self.χρόνοι_offset[χρόνος]] = αα_μετοχών
						else:
							cur.execute('SELECT MAX(ΑΑ) FROM μετοχῶν where Διάλεκτος=? and χρόνος=?;', 
										(Διάλεκτος, χρόνος))
							αα_μετοχών = 1
							for c in cur:
								if c[0]:
									αα_μετοχών = c[0]+1
							Παρατηρήσεις3 = τιμές.get("Παρατηρήσεις")
							μετοχές[self.χρόνοι_offset[χρόνος]] = αα_μετοχών
							cur.execute('insert into "μετοχῶν" (ΑΑ, Διάλεκτος, Ημερομηνία, '+
								'Συγγραφέας, Flags, χρόνος, καταλήξεις, τονισμοί, Παρατηρήσεις) '+
								'values (?, ?, ?, ?, ?, ?, ?, ?, ?)', 
										(αα_μετοχών, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags,
										χρόνος, καταλήξεις, τονισμοί, Παρατηρήσεις3))
				υπάρχει2 = cur.execute('SELECT ΑΑ, max(Ημερομηνία) from Μετοχές where '+
					'Διάλεκτος=? and ενεστώτας=? and αόριστος =? and '+
					'παρακείμενος=? and μέλλοντας=? and '+
					'"συντελεσμένος μέλλοντας"=?;',
						(Διάλεκτος, χρόνοι[self.χρόνοι_offset["ενεστώτας"]], 
						χρόνοι[self.χρόνοι_offset["αόριστος"]], χρόνοι[self.χρόνοι_offset["παρακείμενος"]], 
						χρόνοι[self.χρόνοι_offset["μέλλοντας"]], 
						χρόνοι[self.χρόνοι_offset["συντελεσμένος μέλλοντας"]]))
				
				for υπα2 in υπάρχει2:
					if υπα2[0]:
						αα_μετοχή = υπα[0]
					else:		
						cur.execute('SELECT MAX(ΑΑ) FROM Μετοχές where Διάλεκτος=?;', (Διάλεκτος,))
						αα_μετοχή = 1
						for c in cur:
							if c[0]:
								αα_μετοχή = c[0]+1
						Παρατηρήσεις2 = σύνολο["ρήμα"].get("Παρατηρήσεις")
						cur.execute('insert into "Μετοχές" (Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, '+
									'ΑΑ, ενεστώτας, αόριστος, παρακείμενος, μέλλοντας, "συντελεσμένος μέλλοντας", '
									'Παρατηρήσεις) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
							(Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, αα_μετοχή,
							μετοχές[self.χρόνοι_offset["ενεστώτας"]], μετοχές[self.χρόνοι_offset["αόριστος"]], 
							μετοχές[self.χρόνοι_offset["παρακείμενος"]], μετοχές[self.χρόνοι_offset["μέλλοντας"]], 
							μετοχές[self.χρόνοι_offset["συντελεσμένος μέλλοντας"]], Παρατηρήσεις2))
			ενεστωτική_αύξηση = σύνολο.get("ενεστωτική αύξηση")
			αύξηση = σύνολο.get("αύξηση")
			αύξηση_παρακείμενου = σύνολο.get("αύξηση παρακείμενου")
			Λήμμα = σύνολο["θέμα"]
			cur.execute('insert into "Λήμματα" (ΑΑ, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, Μεταδεδομένα, '+
						'Κλίμακες, συνθετικό, "ενεστωτική αύξηση", αύξηση, "αύξηση παρακείμενου", Λήμμα, '+
						'Ρήμα, Μετοχή, συχνότητα, Παρατηρήσεις) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
						(ΑΑ, Διάλεκτος, Ημερομηνία, Συγγραφέας, Flags, 
						αα_μέτα, αα_κλίμακας, συνθετικό, ενεστωτική_αύξηση, αύξηση, 
						αύξηση_παρακείμενου, Λήμμα, αα_ρήμα, αα_μετοχή,
						συχνότητα, Παρατηρήσεις))
			
	def φόρτωση(self, θέματα, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί, 
				καταλήξεις, ετονισμοί, διάλεκτοι, όλα=False):
		κατηγοριοτονισμoί.clear()
		cur = self.sql.conn.cursor()
		forupdate = {}
		if όλα:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, '+
				'τονισμοί, συχνότητα, Παρατηρήσεις from Επίθετα as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM ' + 
				'Επίθετα WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος);')
		else:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, '+
				'τονισμοί, συχνότητα, Παρατηρήσεις from Επίθετα as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM ' + 
				'Επίθετα WHERE Ἐτικέτες LIKE "%τρέχον%" AND ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος);')
		self.sql.conn.commit()
		for σύνολο in σύνολα:
			Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, τονισμοί, συχνότητα, Παρατηρήσεις = σύνολο
			
			Διάλεκτος0 = Διάλεκτος
			if διάλεκτοι[Διάλεκτος]['εικονική']:
				Διάλεκτος0 = διάλεκτοι[Διάλεκτος]['εικονική']
			for κατηγορία in eval(κατηγορίες):
				if κατηγορία>0 and not καταλήξεις[Διάλεκτος0][κατηγορία]["καταλήξεις"]:
					print("Επίθετα: λείπει η κατηγορία", κατηγορία, "στην διάλεκτο",Διάλεκτος, Διάλεκτος0)
			for τονισμός in eval(τονισμοί):
				if τονισμός>0 and not ετονισμοί[Διάλεκτος0][τονισμός]:
					print("Επίθετα: λείπει ο τονισμός", τονισμός, "στην διάλεκτο",Διάλεκτος, Διάλεκτος0)
			επίθετο = {}
			επίθετο["Κλειδί"] = Κλειδί
			επίθετο["ΑΑ"] = ΑΑ
			επίθετο["διάλεκτος"] = Διάλεκτος
			επίθετο["Ἡμερομηνία"] = Ἡμερομηνία
			επίθετο["Συγγραφέας"] = Συγγραφέας
			επίθετο["ἐτικέτες"] = Ἐτικέτες
			επίθετο["μέρος του λόγου"] = "επίθετο"
			επίθετο["Μεταδεδομένα"] = {}
			for απόκλιση in eval(Μεταδεδομένα):
				μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
				if μ:
					επίθετο["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
			επίθετο["Κλίμακες"] = {}
			
			for απόκλιση in eval(Κλίμακες):
				κ = κλίμακες[Διάλεκτος][απόκλιση]
				if κ:
					επίθετο["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
			επίθετο["συνθετικό"] = συνθετικό
			επίθετο["λήμμα"] = λήμμα
			
			if όλα:
				if Διάλεκτος not in κατηγοριοτονισμoί:
					κατηγοριοτονισμoί[Διάλεκτος] = {}
				if κατηγορίες not in κατηγοριοτονισμoί[Διάλεκτος]:
					κατηγοριοτονισμoί[Διάλεκτος][κατηγορίες] = []
				if τονισμοί not in κατηγοριοτονισμoί[Διάλεκτος][κατηγορίες]:
					κατηγοριοτονισμoί[Διάλεκτος][κατηγορίες].append(τονισμοί)
					κατηγοριοτονισμoί[Διάλεκτος][κατηγορίες].sort()
			else:
				επίθετο["κΛέξη"] = self.τ.κωδικοποιητής(λήμμα)
				if συνθετικό:
					επίθετο["κΣυνθετικό"] = self.τ.κωδικοποιητής(συνθετικό)	
			επίθετο["κατηγορίες"] = eval(κατηγορίες)
			επίθετο["τονισμοί"] = eval(τονισμοί)
			επίθετο["συχνότητα"] = συχνότητα
			επίθετο["Παρατηρήσεις"] = Παρατηρήσεις
			
			θέματα.append(επίθετο)
		
	def ιστορικό(self, αναγνώριση, μεταδεδομένα, κλίμακες):
		αποτέλεσμα = []
		ΑΑ = αναγνώριση["ΑΑ"]
		if ΑΑ!=None:
			cur = self.sql.conn.cursor()
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, '+
				'τονισμοί, συχνότητα, Παρατηρήσεις from Επίθετα as p ' +
				'WHERE ΑΑ=? and Διάλεκτος=?;', 
				(ΑΑ, αναγνώριση["διάλεκτος"]))
			for σύνολο in σύνολα:
				Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, κατηγορίες, τονισμοί, συχνότητα, Παρατηρήσεις = σύνολο
			
				επίθετο = {}
				επίθετο["Κλειδί"] = Κλειδί
				επίθετο["ΑΑ"] = ΑΑ
				επίθετο["διάλεκτος"] = Διάλεκτος
				επίθετο["Ἡμερομηνία"] = Ἡμερομηνία
				επίθετο["Συγγραφέας"] = Συγγραφέας
				επίθετο["ἐτικέτες"] = Ἐτικέτες
				επίθετο["μέρος του λόγου"] = "επίθετο"
				επίθετο["Μεταδεδομένα"] = {}
				for απόκλιση in eval(Μεταδεδομένα):
					μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
					if μ:
						επίθετο["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
				επίθετο["Κλίμακες"] = {}
				
				for απόκλιση in eval(Κλίμακες):
					κ = κλίμακες[Διάλεκτος][απόκλιση]
					if κ:
						επίθετο["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
				επίθετο["συνθετικό"] = συνθετικό
				επίθετο["λήμμα"] = λήμμα
				επίθετο["κατηγορίες"] = eval(κατηγορίες)
				επίθετο["τονισμοί"] = eval(τονισμοί)
				επίθετο["συχνότητα"] = συχνότητα
				επίθετο["Παρατηρήσεις"] = Παρατηρήσεις
				
				αποτέλεσμα.append(επίθετο)
			self.sql.conn.commit()
		return αποτέλεσμα
	