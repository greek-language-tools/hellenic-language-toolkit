#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import time

τύπωσε = print
κείμενο = str
μήκος = len
εύρος = range

class Καταλήξεις():
	def __init__(self, sql, τονιστής):
		self.τ = τονιστής
		self.sql = sql

	def νέα(self, αναγνώριση, κατηγορίες):
		διάλεκτος = αναγνώριση["διάλεκτος"]
		μτλ = αναγνώριση["μέρος του λόγου"]
		ΑΑ = αναγνώριση.get("ΑΑ")
		χρόνος = αναγνώριση.get("χρόνος")
		cur = self.sql.conn.cursor()
		σετ = {}
		if ΑΑ:
			for σύνολο in cur.execute(
				'select Κλειδί, Ἐτικέτες from Καταλήξεις where ΑΑ=? and Διάλεκτος=? and μέρος_του_λόγου=? and (Χρόνος=? or Χρόνος is null);', 
					(ΑΑ, διάλεκτος, μτλ, χρόνος)):
				if σύνολο:
						σετ[σύνολο[0]] = σύνολο[1]
			for k,v in σετ.items():
				if "τρέχον" in v:
					cur.execute('update Καταλήξεις set Ἐτικέτες=? where Κλειδί=?;', (v.replace("τρέχον", "ανενεργό"), k))
		else:
			αναγνώριση["ΑΑ"] = 1
			cur.execute('select max(ΑΑ) from Καταλήξεις where Διάλεκτος=? and μέρος_του_λόγου=? and (Χρόνος=? or Χρόνος is null);', 
						(διάλεκτος, μτλ, χρόνος))
			for c in cur:
				if c and c[0]:
					αναγνώριση["ΑΑ"] = c[0]+1
			
		self.__αποθήκευση(αναγνώριση)
		self.sql.conn.commit()
		self.φόρτωση(κατηγορίες)
		
		return αναγνώριση["ΑΑ"]
	
	def __αποθήκευση(self, σύνολο):
		# Προαιρετικά
		Ἡμερομηνία = σύνολο.get("Ἡμερομηνία")
		if not Ἡμερομηνία:
			Ἡμερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Ἐτικέτες = σύνολο.get("ἐτικέτες")
		if not Ἐτικέτες:
			Ἐτικέτες = "τρέχον, "
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		if not Παρατηρήσεις:
			Παρατηρήσεις = ""
		# Υποχρεωτικά
		ΑΑ = σύνολο["ΑΑ"]
		Διάλεκτος = σύνολο["διάλεκτος"]
		μέρος_του_λόγου = σύνολο["μέρος του λόγου"]
		χρόνος = σύνολο.get("χρόνος")
		καταλήξεις = σύνολο["καταλήξεις"]
		συχνότητες = σύνολο.get("συχνότητες")
		if not συχνότητες:
			συχνότητες = [0]*len(καταλήξεις)
		cur = self.sql.conn.cursor()
		cur.execute('insert into Καταλήξεις (ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, '+
				'Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις) '+
			'values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
			(ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, μέρος_του_λόγου, χρόνος, 
			str(καταλήξεις), str(συχνότητες), Παρατηρήσεις))
			
	def τρέχον(self, αναγνώριση, καταλήξεις):
		#self.sql.open()
		
		ΑΑ = αναγνώριση["ΑΑ"]
		Κλειδί = αναγνώριση["Κλειδί"]
		μτλ = αναγνώριση["μέρος του λόγου"]
		διάλεκτος = αναγνώριση["διάλεκτος"]
		χρόνος = αναγνώριση.get("χρόνος")
		σετ = []
		τρέχον = None
		cur = self.sql.conn.cursor()
		for σύνολο in cur.execute(
			'select Κλειδί, Ἐτικέτες from Καταλήξεις where ΑΑ=? and μέρος_του_λόγου=? and Διάλεκτος=? and (Χρόνος=? or Χρόνος is null);', 
			(ΑΑ, μτλ, διάλεκτος, χρόνος)):
			if σύνολο and σύνολο[0]!=Κλειδί:
				σετ.append([σύνολο[0], σύνολο[1]])
			elif σύνολο[0]==Κλειδί:
				τρέχον = σύνολο[1]
		for σ in σετ:
			if "τρέχον" in σ[1]:
				cur.execute('update Καταλήξεις set Ἐτικέτες=? where Κλειδί=?;', (σ[1].replace("τρέχον", "ανενεργό"), σ[0]))
		if τρέχον:
			if "ανενεργό" in τρέχον:
				τρέχον = τρέχον.replace("ανενεργό", "")
			if "διαγραμμένο" in τρέχον:
				τρέχον = τρέχον.replace("διαγραμμένο", "")
			νέο_τρέχον = []
			for σ in τρέχον.split(","):
				σσ = σ.strip()
				if σσ:
					νέο_τρέχον.append(σσ)
			νέο_τρέχον.append("τρέχον")
			cur.execute('update Καταλήξεις set Ἐτικέτες=? where Κλειδί=?;', 
							(", ".join(νέο_τρέχον), Κλειδί))
		self.φόρτωση(καταλήξεις)
		self.sql.conn.commit()
	
	def διαγραφή(self, αναγνώριση, τονισμοί):
		cur = self.sql.conn.cursor()
		Κλειδί = αναγνώριση["Κλειδί"]
		σετ = []
		for σύνολο in cur.execute('select Ἐτικέτες from Καταλήξεις where Κλειδί=?;', (Κλειδί, )):
			if σύνολο:
				σετ.append(σύνολο[0])
		for σ in σετ:
			up = False
			if "διαγραμμένο" in σ:
				up = False
			elif "τρέχον" in σ:
				σ=σ.replace("τρέχον", "διαγραμμένο")
				up = True
			elif "ανενεργό" in σ:
				σ=σ.replace("ανενεργό", "διαγραμμένο")
				up = True
			if up:
				cur.execute('update Καταλήξεις set Ἐτικέτες=? where Κλειδί=?;', (σ, Κλειδί))
		self.φόρτωση(τονισμοί)
		
		self.sql.conn.commit()
			
	def αποθήκευση_κατηγορίας(self, σύνολο, ΑΑ, Ημερομηνία = None):
		cur = self.sql.conn.cursor()
		
		Ημερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Flags = σύνολο.get("Flags")
		if not Flags:
			Flags = ""
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		if not Παρατηρήσεις:
			Παρατηρήσεις = ""
		Διάλεκτος = σύνολο.get("διάλεκτος")
		
		if σύνολο["μέρος του λόγου"]=="μετοχή":
			καταλήξεις = σύνολο["καταλήξεις"]
			συχνότητες = σύνολο["συχνότητες"]
			Χρόνος = σύνολο["χρόνος"]
			
			cur.execute('insert into "Καταλήξεις_Μετοχῶν" (ΑΑ, Διάλεκτος, Χρόνος, Ημερομηνία, Συγγραφέας, '+
							'Flags, καταλήξεις, συχνότητες, Παρατηρήσεις) values (?, ?, ?, ?, ?, ?, ?, ?, ?)', 
								(ΑΑ, Διάλεκτος, Χρόνος, Ημερομηνία, Συγγραφέας, Flags, 
								str(καταλήξεις), str(συχνότητες), Παρατηρήσεις))
		self.sql.conn.commit()
	
	def __έλεγχος_κατηγοριών(self, κατηγορίες):
		for μτλ in ["ρήμα", "μετοχή"]:#, "επίθετο", "ουσιαστικό"]:
			for διάλεκτος, χρόνοι in κατηγορίες[μτλ].items():
				for χρόνο, ακατηγορίες in χρόνοι.items():
					αριθμό = 0
					for σύνολο in ακατηγορίες:
						if σύνολο.get('καταλήξεις'):
							κατηγορίες[μτλ][διάλεκτος][χρόνο][αριθμό]["κΚαταλήξεις"] = self.__κΚαταλήξεις(σύνολο['καταλήξεις'])
						αριθμό += 1
		
		for μτλ in ["επίθετο", "ουσιαστικό"]:
			for διάλεκτος, ακατηγορίες in κατηγορίες[μτλ].items():
				αριθμό = 0
				for σύνολο in ακατηγορίες:
					if σύνολο.get('καταλήξεις'):
						κατηγορίες[μτλ][διάλεκτος][αριθμό]["κΚαταλήξεις"] = self.__κΚαταλήξεις(σύνολο['καταλήξεις'])
					αριθμό += 1
	
	def φόρτωση(self, οικαταλήξεις, όλα=False):
		οικαταλήξεις.clear()
		cur = self.sql.conn.cursor()
		if όλα:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, '+
				'Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις '+
				'from Καταλήξεις as p '+
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM '+
				'Καταλήξεις WHERE ΑΑ=p.ΑΑ and (p.Χρόνος=Χρόνος or Χρόνος is null) and Διάλεκτος=p.Διάλεκτος and '+
				'μέρος_του_λόγου=p.μέρος_του_λόγου);')
		else:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, '+
				'Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις '+
				'from Καταλήξεις as p '+
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM '+
				'Καταλήξεις WHERE Ἐτικέτες LIKE "%τρέχον%" AND ΑΑ=p.ΑΑ and (p.Χρόνος=Χρόνος or Χρόνος is null) and Διάλεκτος=p.Διάλεκτος and '+
				'μέρος_του_λόγου=p.μέρος_του_λόγου);')
		self.sql.conn.commit()
		for σύνολο in σύνολα:
			Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις = σύνολο
			
			κατάληξη = {}
			κατάληξη["Κλειδί"] = Κλειδί
			κατάληξη["ΑΑ"] = ΑΑ
			κατάληξη["διάλεκτος"] = Διάλεκτος
			κατάληξη["Ἡμερομηνία"] = Ἡμερομηνία
			κατάληξη["Συγγραφέας"] = Συγγραφέας
			κατάληξη["ἐτικέτες"] = Ἐτικέτες
			κατάληξη["μέρος του λόγου"] = μέρος_του_λόγου
			κατάληξη["καταλήξεις"] = eval(καταλήξεις)
			κατάληξη["συχνότητες"] = eval(συχνότητες)
			κατάληξη["Παρατηρήσεις"] = Παρατηρήσεις
			#if :
			#	print(κατάληξη)
			if μέρος_του_λόγου=="ουσιαστικό" and ΑΑ==64:
				print(κατάληξη)
			if not όλα:
				κατάληξη["κΚαταλήξεις"] = self.__κΚαταλήξεις(κατάληξη["καταλήξεις"])
				
			if μέρος_του_λόγου not in οικαταλήξεις:
				οικαταλήξεις[μέρος_του_λόγου] = {}
			if Χρόνος:
				κατάληξη["χρόνος"] = Χρόνος
				if Διάλεκτος not in οικαταλήξεις[μέρος_του_λόγου]:
					οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος] = {}
				if Χρόνος not in οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος]:
					οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος][Χρόνος] = []
				while ΑΑ>=len(οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος][Χρόνος]):
					οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος][Χρόνος].append({"καταλήξεις":[]})
				οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος][Χρόνος][ΑΑ] = κατάληξη
			else:
				if Διάλεκτος not in οικαταλήξεις[μέρος_του_λόγου]:
					οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος] = []
				while ΑΑ>=len(οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος]):
					οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος].append({"καταλήξεις":[]})
				οικαταλήξεις[μέρος_του_λόγου][Διάλεκτος][ΑΑ] = κατάληξη
	
	def ιστορικό(self, αναγνώριση):
		#self.sql.open()
		αποτέλεσμα = []
		ΑΑ = αναγνώριση["ΑΑ"]
		if ΑΑ:
			cur = self.sql.conn.cursor()
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, '+
				'Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις from Καταλήξεις as p '+
				'WHERE ΑΑ=? and Διάλεκτος=? and μέρος_του_λόγου=? and (Χρόνος=? or Χρόνος is null);', 
				(ΑΑ, αναγνώριση["διάλεκτος"], αναγνώριση["μέρος του λόγου"], αναγνώριση.get("χρόνος")))
			for σύνολο in σύνολα:
				Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, μέρος_του_λόγου, Χρόνος, καταλήξεις, συχνότητες, Παρατηρήσεις = σύνολο
			
				κατάληξη = {}
				κατάληξη["Κλειδί"] = Κλειδί
				κατάληξη["ΑΑ"] = ΑΑ
				κατάληξη["διάλεκτος"] = Διάλεκτος
				κατάληξη["Ἡμερομηνία"] = Ἡμερομηνία
				κατάληξη["Συγγραφέας"] = Συγγραφέας
				κατάληξη["ἐτικέτες"] = Ἐτικέτες
				κατάληξη["μέρος του λόγου"] = μέρος_του_λόγου
				κατάληξη["καταλήξεις"] = eval(καταλήξεις)
				κατάληξη["συχνότητες"] = eval(συχνότητες)
				κατάληξη["Παρατηρήσεις"] = Παρατηρήσεις
				
				if Χρόνος:
					κατάληξη["χρόνος"] = Χρόνος
				αποτέλεσμα.append(κατάληξη)
			self.sql.conn.commit()
		#self.sql.close()
		return αποτέλεσμα
	
	def αποθήκευση(self, πίνακας, δεδομένα):
		cur = self.sql.conn.cursor()
		cur.execute('select * from "'+πίνακας+'";')
		cur.execute('delete from "'+πίνακας+'";')
		self.conn.commit()
		Ημερομηνία = time.strftime("%Y%m%d%H%M%S")
		μτλ = None
		if "Καταλήξεις" in πίνακας:
			if πίνακας=="Καταλήξεις_Ρημάτων":
				μτλ =  "ρήμα"
			elif πίνακας=="Καταλήξεις_Μετοχῶν":
				μτλ =  "μετοχή"
			if μτλ in ["ρήμα", "μετοχή"]:
				for Διάλεκτος, χρόνοι in δεδομένα.items():
					for Χρόνος, σύνολα in χρόνοι.items():
						ΑΑ = -1
						for σύνολο in σύνολα:
							ΑΑ += 1
							if not σύνολο:
								continue
							Συγγραφέας = σύνολο.get("Συγγραφέας")
							if not Συγγραφέας:
								Συγγραφέας = "admin"
							Flags = σύνολο.get("Flags")
							if not Flags:
								Flags = ""
							καταλήξεις = σύνολο["καταλήξεις"]
							συχνότητες = σύνολο["συχνότητες"]
							
							Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
							if not Παρατηρήσεις:
								Παρατηρήσεις = ""
							cur.execute('insert into "'+πίνακας+'" (ΑΑ, Διάλεκτος, Χρόνος, Ημερομηνία, Συγγραφέας, '+
										'Flags, καταλήξεις, συχνότητες, Παρατηρήσεις) values (?, ?, ?, ?, ?, ?, ?, ?, ?)', 
								(ΑΑ, Διάλεκτος, Χρόνος, Ημερομηνία, Συγγραφέας, Flags, 
								str(καταλήξεις), str(συχνότητες), Παρατηρήσεις))
				self.sql.conn.commit()
	
	def __κΚαταλήξεις(self, καταλήξεις):
		κΚαταλήξεις = []
		cac = {}
		for κατάληξη in καταλήξεις:
			υπο = []
			for υποκατάληξη in κατάληξη:
				if υποκατάληξη in cac:
					υπο.append(cac[υποκατάληξη])
				else:
					κωδ = self.τ.κωδικοποιητής(υποκατάληξη)
					υπο.append(κωδ)
					cac[υποκατάληξη] = κωδ
			κΚαταλήξεις.append(υπο)
		return κΚαταλήξεις
		