#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import time

τύπωσε = print
κείμενο = str
μήκος = len
εύρος = range

class Ανώμαλα():
	def __init__(self, sql, τονιστής):
		self.τ = τονιστής
		self.sql = sql
		
	def φόρτωση(self, τανώμαλα, μεταδεδομένα, κλίμακες, όλα=False):
		τανώμαλα.clear()
		cur = self.sql.conn.cursor()
		forupdate = {}
		if όλα:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις ' + 
				'from Ανώμαλα as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM ' + 
				'Ανώμαλα WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος and ' + 
				'μέρος_του_λόγου=p.μέρος_του_λόγου);')
		else:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις ' + 
				'from Ανώμαλα as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM ' + 
				'Ανώμαλα WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος and ' + 
				'μέρος_του_λόγου=p.μέρος_του_λόγου and Ἐτικέτες LIKE "%τρέχον%");')
		self.sql.conn.commit()
		for σύνολο in σύνολα:
			Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις = σύνολο
			
			if Διάλεκτος not in forupdate:
				forupdate[Διάλεκτος] = []
			καταλήξεις = eval(καταλήξεις)
			ανώμαλο = {}
			ανώμαλο["Κλειδί"] = Κλειδί
			ανώμαλο["ΑΑ"] = ΑΑ
			ανώμαλο["διάλεκτος"] = Διάλεκτος
			ανώμαλο["Ἡμερομηνία"] = Ἡμερομηνία
			ανώμαλο["Συγγραφέας"] = Συγγραφέας
			ανώμαλο["ἐτικέτες"] = Ἐτικέτες
			ανώμαλο["ανώμαλο"] = True
			ανώμαλο["μέρος του λόγου"] = μέρος_του_λόγου
			ανώμαλο["Παρατηρήσεις"] = Παρατηρήσεις
			
			ανώμαλο["Μεταδεδομένα"] = {}
			for απόκλιση in eval(Μεταδεδομένα):
				μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
				if μ:
					ανώμαλο["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
			ανώμαλο["Κλίμακες"] = {}
			for απόκλιση in eval(Κλίμακες):
				κ = κλίμακες[Διάλεκτος][απόκλιση]
				if κ:
					ανώμαλο["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
			
			if μέρος_του_λόγου=="αντωνυμία" and "κατάληξη" in καταλήξεις:
				ανώμαλο.update(καταλήξεις)
				if not όλα:
					ανώμαλο["κΚατάληξη"] = self.τ.κωδικοποιητής(ανώμαλο["κατάληξη"])
			elif μέρος_του_λόγου in ["επίθετο", "άρθρο"] or\
				(μέρος_του_λόγου=="αντωνυμία" and\
				("αρσενικό" in καταλήξεις or\
				"ουδέτερο" in καταλήξεις or\
				"θηλυκό" in καταλήξεις)):
				ανώμαλο["καταλήξεις"] = καταλήξεις
				for γένος in [ "αρσενικό", "θηλυκό", "ουδέτερο" ]:
					if γένος in ανώμαλο["καταλήξεις"] and not όλα:
						if ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"].__class__==str:
							ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"])
						if ανώμαλο["καταλήξεις"][γένος]["συχνότητες"].__class__==str:
							ανώμαλο["καταλήξεις"][γένος]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"][γένος]["συχνότητες"])
						ανώμαλο["καταλήξεις"][γένος]["κΚαταλήξεις"] = self.__κΚαταλήξεις(ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"])
			elif μέρος_του_λόγου in ["ουσιαστικό"]:
				if καταλήξεις.get("λήμμα"):
					ανώμαλο.update(καταλήξεις)
					if not όλα:
						ανώμαλο["κΛέξη"] = self.τ.κωδικοποιητής(ανώμαλο["λήμμα"])
				else:
					ανώμαλο["καταλήξεις"] = list(καταλήξεις.values())[0]
					if ανώμαλο["καταλήξεις"]["καταλήξεις"].__class__==str:
						ανώμαλο["καταλήξεις"]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"]["καταλήξεις"])
					if ανώμαλο["καταλήξεις"]["συχνότητες"].__class__==str:
						ανώμαλο["καταλήξεις"]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"]["συχνότητες"])
					ανώμαλο["γένος"] = list(καταλήξεις.keys())[0]
					if not όλα:
						ανώμαλο["καταλήξεις"]["κΚαταλήξεις"] = self.__κΚαταλήξεις(ανώμαλο["καταλήξεις"]["καταλήξεις"])
			elif μέρος_του_λόγου=="αντωνυμία" and\
				("α" in καταλήξεις or "β" in καταλήξεις or "γ" in καταλήξεις):
				ανώμαλο["καταλήξεις"] = καταλήξεις
				πρόσωπα = ανώμαλο["καταλήξεις"].keys()
				for πρόσωπο in πρόσωπα:
					γένη = ανώμαλο["καταλήξεις"][πρόσωπο].keys()
					for γένος in γένη:
						if ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"].__class__==str:
							ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"])
							ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["συχνότητες"]) 
						if not όλα:
							ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["κΚαταλήξεις"] = self.__κΚαταλήξεις(ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"])
			elif μέρος_του_λόγου=="ρήμα":
				ανώμαλο["καταλήξεις"] = καταλήξεις
				χρόνοι = ανώμαλο["καταλήξεις"]["ρήμα"].keys()
				for χρόνος in χρόνοι:
					φωνές = ανώμαλο["καταλήξεις"]["ρήμα"][χρόνος].keys()
					for φωνή in φωνές:
						if not όλα:
							εγκλίσεις = ανώμαλο["καταλήξεις"]["ρήμα"][χρόνος][φωνή].keys()
							for έγκλιση in εγκλίσεις:
								ανώμαλο["καταλήξεις"]["ρήμα"][χρόνος][φωνή][έγκλιση]["κΚαταλήξεις"] = self.__κΚαταλήξεις(ανώμαλο["καταλήξεις"]["ρήμα"][χρόνος][φωνή][έγκλιση]["καταλήξεις"])
				if "μετοχή" in ανώμαλο["καταλήξεις"] and not όλα:
					χρόνοι = ανώμαλο["καταλήξεις"]["μετοχή"].keys()
					for χρόνος in χρόνοι:
						φωνές = ανώμαλο["καταλήξεις"]["μετοχή"][χρόνος].keys()
						for φωνή in φωνές:
							γένη = ανώμαλο["καταλήξεις"]["μετοχή"][χρόνος][φωνή].keys()
							for γένος in γένη:
								ανώμαλο["καταλήξεις"]["μετοχή"][χρόνος][φωνή][γένος]["κΚαταλήξεις"] = self.__κΚαταλήξεις(ανώμαλο["καταλήξεις"]["μετοχή"][χρόνος][φωνή][γένος]["καταλήξεις"])
			elif μέρος_του_λόγου in ["μόριο", "σύνδεσμος", "πρόθεση", "επίρρημα", "επιφώνημα"]:
				ανώμαλο.update(καταλήξεις)
				if not όλα:
					ανώμαλο["κΛέξη"] = self.τ.κωδικοποιητής(ανώμαλο["λήμμα"])
			if μέρος_του_λόγου not in τανώμαλα:
				τανώμαλα[μέρος_του_λόγου] = {}
			if Διάλεκτος not in τανώμαλα[μέρος_του_λόγου]:
				τανώμαλα[μέρος_του_λόγου][Διάλεκτος] = []
			while ΑΑ >= len(τανώμαλα[μέρος_του_λόγου][Διάλεκτος]):
				τανώμαλα[μέρος_του_λόγου][Διάλεκτος].append({})
			τανώμαλα[μέρος_του_λόγου][Διάλεκτος][ΑΑ] = ανώμαλο
		
#		μέρη_του_λόγου = τανώμαλα.keys()
#		for μέρος_του_λόγου in μέρη_του_λόγου:
#			διάλεκτοι = τανώμαλα[μέρος_του_λόγου].keys()
#			for διάλεκτος in διάλεκτοι:
#				μέγεθος = len(τανώμαλα[μέρος_του_λόγου][Διάλεκτος])
#				for ν in range(μέγεθος):
#					σύνολα = cur.execute('select κλειδί, ΑΑ, Διάλεκτος, Ημερομηνία, Συγγραφέας, ' + 
#										'Flags, όνομα, τιμές, Παρατηρήσεις from Μεταδεδομένα as p ' + 
#										'WHERE Ημερομηνία=(SELECT MAX(Ημερομηνία) FROM ' + 
#										'Μεταδεδομένα WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος);')
		
	def ιστορικό(self, αναγνώριση, μεταδεδομένα, κλίμακες):
		#self.sql.open()
		αποτέλεσμα = []
		ΑΑ = αναγνώριση["ΑΑ"]
		if ΑΑ!=None:
			cur = self.sql.conn.cursor()
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις from Ανώμαλα as p '+
				'WHERE ΑΑ=? and Διάλεκτος=? and μέρος_του_λόγου=?;', 
				(ΑΑ, αναγνώριση["διάλεκτος"], αναγνώριση["μέρος του λόγου"]))
			for σύνολο in σύνολα:
				Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις = σύνολο
			
				καταλήξεις = eval(καταλήξεις)
				ανώμαλο = {}
				ανώμαλο["Κλειδί"] = Κλειδί
				ανώμαλο["ΑΑ"] = ΑΑ
				ανώμαλο["διάλεκτος"] = Διάλεκτος
				ανώμαλο["Ἡμερομηνία"] = Ἡμερομηνία
				ανώμαλο["Συγγραφέας"] = Συγγραφέας
				ανώμαλο["ἐτικέτες"] = Ἐτικέτες
				ανώμαλο["μέρος του λόγου"] = μέρος_του_λόγου
				ανώμαλο["Παρατηρήσεις"] = Παρατηρήσεις
				ανώμαλο["Μεταδεδομένα"] = {}
				for απόκλιση in eval(Μεταδεδομένα):
					μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
					if μ:
						ανώμαλο["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
				ανώμαλο["Κλίμακες"] = {}
				
				for απόκλιση in eval(Κλίμακες):
					κ = κλίμακες[Διάλεκτος][απόκλιση]
					if κ:
						ανώμαλο["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
				
				if μέρος_του_λόγου=="αντωνυμία" and "κατάληξη" in καταλήξεις:
					ανώμαλο.update(καταλήξεις)
				elif μέρος_του_λόγου in ["επίθετο", "άρθρο"] or\
					(μέρος_του_λόγου=="αντωνυμία" and\
					("αρσενικό" in καταλήξεις or\
					"ουδέτερο" in καταλήξεις or\
					"θηλυκό" in καταλήξεις)):
					ανώμαλο["καταλήξεις"] = καταλήξεις
					for γένος in [ "αρσενικό", "θηλυκό", "ουδέτερο" ]:
						if γένος in ανώμαλο["καταλήξεις"]:
							if ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"].__class__==str:
								ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"][γένος]["καταλήξεις"])
							if ανώμαλο["καταλήξεις"][γένος]["συχνότητες"].__class__==str:
								ανώμαλο["καταλήξεις"][γένος]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"][γένος]["συχνότητες"])
				elif μέρος_του_λόγου in ["ουσιαστικό"]:
					if καταλήξεις.get("λήμμα"):
						ανώμαλο.update(καταλήξεις)
					else:
						ανώμαλο["καταλήξεις"] = list(καταλήξεις.values())[0]
						if ανώμαλο["καταλήξεις"]["καταλήξεις"].__class__==str:
							ανώμαλο["καταλήξεις"]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"]["καταλήξεις"])
						if ανώμαλο["καταλήξεις"]["συχνότητες"].__class__==str:
							ανώμαλο["καταλήξεις"]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"]["συχνότητες"])
						ανώμαλο["γένος"] = list(καταλήξεις.keys())[0]
				elif μέρος_του_λόγου=="αντωνυμία" and\
					("α" in καταλήξεις or "β" in καταλήξεις or "γ" in καταλήξεις):
					ανώμαλο["καταλήξεις"] = καταλήξεις
					πρόσωπα = ανώμαλο["καταλήξεις"].keys()
					for πρόσωπο in πρόσωπα:
						γένη = ανώμαλο["καταλήξεις"][πρόσωπο].keys()
						for γένος in γένη:
							if ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"].__class__==str:
								ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"] = eval(ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"])
								ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["συχνότητες"] = eval(ανώμαλο["καταλήξεις"][πρόσωπο][γένος]["συχνότητες"]) 
				elif μέρος_του_λόγου=="ρήμα":
					ανώμαλο["καταλήξεις"] = καταλήξεις
				elif μέρος_του_λόγου in ["μόριο", "σύνδεσμος", "πρόθεση", "επίρρημα", "επιφώνημα"]:
					ανώμαλο.update(καταλήξεις)
				
				αποτέλεσμα.append(ανώμαλο)
			self.sql.conn.commit()
		#self.sql.close()
		return αποτέλεσμα
	
	def τρέχον(self, αναγνώριση, καταλήξεις, μεταδεδομένα, κλίμακες):	
		ΑΑ = αναγνώριση["ΑΑ"]
		Κλειδί = αναγνώριση["Κλειδί"]
		μτλ = αναγνώριση["μέρος του λόγου"]
		διάλεκτος = αναγνώριση["διάλεκτος"]
		
		σετ = []
		τρέχον = None
		cur = self.sql.conn.cursor()
		for σύνολο in cur.execute(
			'select Κλειδί, Ἐτικέτες from Ανώμαλα where ΑΑ=? and μέρος_του_λόγου=? and Διάλεκτος=?;', 
			(ΑΑ, μτλ, διάλεκτος)):
			if σύνολο and σύνολο[0]!=Κλειδί:
				σετ.append([σύνολο[0], σύνολο[1]])
			elif σύνολο[0]==Κλειδί:
				τρέχον = σύνολο[1]
		for σ in σετ:
			if "τρέχον" in σ[1]:
				cur.execute('update Ανώμαλα set Ἐτικέτες=? where Κλειδί=?;', (σ[1].replace("τρέχον", "ανενεργό"), σ[0]))
		if τρέχον:
			if "ανενεργό" in τρέχον:
				τρέχον = τρέχον.replace("ανενεργό", "")
			if "διαγραμμένο" in τρέχον:
				τρέχον = τρέχον.replace("διαγραμμένο", "")
			νέο_τρέχον = []
			for σ in τρέχον.split(","):
				σσ = σ.strip()
				if σσ:
					νέο_τρέχον.append(σσ)
			νέο_τρέχον.append("τρέχον")
			cur.execute('update Ανώμαλα set Ἐτικέτες=? where Κλειδί=?;', 
							(", ".join(νέο_τρέχον), Κλειδί))
		self.φόρτωση(καταλήξεις, μεταδεδομένα, κλίμακες)
		self.sql.conn.commit()
		
	def διαγραφή(self, αναγνώριση, τονισμοί, μεταδεδομένα, κλίμακες):
		cur = self.sql.conn.cursor()
		Κλειδί = αναγνώριση["Κλειδί"]
		σετ = []
		for σύνολο in cur.execute('select Ἐτικέτες from Ανώμαλα where Κλειδί=?;', (Κλειδί, )):
			if σύνολο:
				σετ.append(σύνολο[0])
		for σ in σετ:
			up = False
			if "διαγραμμένο" in σ:
				up = False
			elif "τρέχον" in σ:
				σ=σ.replace("τρέχον", "διαγραμμένο")
				up = True
			elif "ανενεργό" in σ:
				σ=σ.replace("ανενεργό", "διαγραμμένο")
				up = True
			if up:
				cur.execute('update Ανώμαλα set Ἐτικέτες=? where Κλειδί=?;', (σ, Κλειδί))
		self.φόρτωση(τονισμοί, μεταδεδομένα, κλίμακες)
		
		self.sql.conn.commit()
		
	def νέα(self, αναγνώριση, ανώμαλα, μεταδεδομένα, κλίμακες):
		διάλεκτος = αναγνώριση["διάλεκτος"]
		μτλ = αναγνώριση["μέρος του λόγου"]
		ΑΑ = αναγνώριση.get("ΑΑ")
		cur = self.sql.conn.cursor()
		σετ = {}
		
		if ΑΑ!=None:
			for σύνολο in cur.execute(
				'select Κλειδί, Ἐτικέτες from Ανώμαλα where ΑΑ=? and Διάλεκτος=? and μέρος_του_λόγου=?;', 
					(ΑΑ, διάλεκτος, μτλ)):
				if σύνολο:
						σετ[σύνολο[0]] = σύνολο[1]
			for k,v in σετ.items():
				if "τρέχον" in v:
					cur.execute('update Ανώμαλα set Ἐτικέτες=? where Κλειδί=?;', (v.replace("τρέχον", "ανενεργό"), k))
		else:
			αναγνώριση["ΑΑ"] = 1
			cur.execute('select max(ΑΑ) from Ανώμαλα where Διάλεκτος=? and μέρος_του_λόγου=?;', 
						(διάλεκτος, μτλ))
			for c in cur:
				if c and c[0]:
					αναγνώριση["ΑΑ"] = c[0]+1
			
		self.__αποθήκευση(αναγνώριση)
		self.sql.conn.commit()
		self.φόρτωση(ανώμαλα, μεταδεδομένα, κλίμακες)
	
	def __αποθήκευση(self, σύνολο):
		# Προαιρετικά
		Ἡμερομηνία = σύνολο.get("Ἡμερομηνία")
		if not Ἡμερομηνία:
			Ἡμερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Ἐτικέτες = σύνολο.get("ἐτικέτες")
		if not Ἐτικέτες:
			Ἐτικέτες = "τρέχον, "
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		if not Παρατηρήσεις:
			Παρατηρήσεις = ""
			
		# Υποχρεωτικά
		ΑΑ = σύνολο["ΑΑ"]
		Διάλεκτος = σύνολο["διάλεκτος"]
		μέρος_του_λόγου = σύνολο["μέρος του λόγου"]
		if μέρος_του_λόγου=="ουσιαστικό":
			σύνολο["καταλήξεις"] = {
				"λήμμα":σύνολο["λήμμα"], 
				"συχνότητα":σύνολο["συχνότητα"],
				"γένος":σύνολο["γένος"]}
		καταλήξεις = str(σύνολο["καταλήξεις"])
		Μεταδεδομένα = str(σύνολο["Μεταδεδομένα"])
		Κλίμακες = str(σύνολο["Κλίμακες"])
		cur = self.sql.conn.cursor()
		cur.execute('insert into Ανώμαλα (ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις) '+
			'values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
			(ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας,  
				Ἐτικέτες, μέρος_του_λόγου, καταλήξεις, Μεταδεδομένα, Κλίμακες, Παρατηρήσεις))
		
	def __κΚαταλήξεις(self, καταλήξεις):
		κΚαταλήξεις = []
		cac = {}
		for κατάληξη in καταλήξεις:
			υπο = []
			for υποκατάληξη in κατάληξη:
				if υποκατάληξη in cac:
					υπο.append(cac[υποκατάληξη])
				else:
					κωδ = self.τ.κωδικοποιητής(υποκατάληξη)
					υπο.append(κωδ)
					cac[υποκατάληξη] = κωδ
			κΚαταλήξεις.append(υπο)
		return κΚαταλήξεις
		