#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import time

τύπωσε = print
κείμενο = str
μήκος = len
εύρος = range

class Ουσιαστικά():
	def __init__(self, sql, τονιστής):
		self.sql = sql
		self.τ = τονιστής
		
	def νέα(self, αναγνώριση, ανώμαλα, μεταδεδομένα, κλίμακες, 
			κατηγοριοτονισμoί, καταλήξεις, τονισμοί, διάλεκτοι):
		διάλεκτος = αναγνώριση["διάλεκτος"]
		ΑΑ = αναγνώριση.get("ΑΑ")
		cur = self.sql.conn.cursor()
		σετ = {}
		
		if ΑΑ!=None:
			for σύνολο in cur.execute(
				'select Κλειδί, Ἐτικέτες from Ουσιαστικά where ΑΑ=? and Διάλεκτος=?;', 
					(ΑΑ, διάλεκτος)):
				if σύνολο:
						σετ[σύνολο[0]] = σύνολο[1]
			for k,v in σετ.items():
				if "τρέχον" in v:
					cur.execute('update Ουσιαστικά set Ἐτικέτες=? where Κλειδί=?;', (v.replace("τρέχον", "ανενεργό"), k))
		else:
			αναγνώριση["ΑΑ"] = 1
			cur.execute('select max(ΑΑ) from Ουσιαστικά where Διάλεκτος=?;', 
						(διάλεκτος, ))
			for c in cur:
				if c and c[0]:
					αναγνώριση["ΑΑ"] = c[0]+1
			
		self.__αποθήκευση(αναγνώριση)
		self.sql.conn.commit()
		self.φόρτωση(ανώμαλα, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί, 
						καταλήξεις, τονισμοί, διάλεκτοι)
		
	def __αποθήκευση(self, σύνολο):
		# Προαιρετικά
		Ἡμερομηνία = σύνολο.get("Ἡμερομηνία")
		if not Ἡμερομηνία:
			Ἡμερομηνία = time.strftime("%Y%m%d%H%M%S")
		Συγγραφέας = σύνολο.get("Συγγραφέας")
		if not Συγγραφέας:
			Συγγραφέας = "admin"
		Ἐτικέτες = σύνολο.get("ἐτικέτες")
		if not Ἐτικέτες:
			Ἐτικέτες = "τρέχον, "
		Παρατηρήσεις = σύνολο.get("Παρατηρήσεις")
		if not Παρατηρήσεις:
			Παρατηρήσεις = ""
			
		# Υποχρεωτικά
		ΑΑ = σύνολο["ΑΑ"]
		Διάλεκτος = σύνολο["διάλεκτος"]
		Μεταδεδομένα = str(σύνολο["Μεταδεδομένα"])
		Κλίμακες = str(σύνολο["Κλίμακες"])
		συνθετικό = σύνολο["συνθετικό"]
		λήμμα = σύνολο["λήμμα"]
		γένος = σύνολο["γένος"]
		κατηγορία = σύνολο["κατηγορία"]
		τονισμός = σύνολο["τονισμός"]
		συχνότητα = σύνολο["συχνότητα"]
		cur = self.sql.conn.cursor()
		cur.execute('insert into Ουσιαστικά (ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, '+
				'τονισμός, συχνότητα, Παρατηρήσεις) '+
			'values (?, ?, ?, ?, ?, ?,	?, ?, ?, ?,	?, ?, ?, ?)', 
			(ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, 
			συνθετικό, λήμμα, γένος, κατηγορία, τονισμός, συχνότητα, Παρατηρήσεις))
	
	def τρέχον(self, αναγνώριση, καταλήξεις, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί):	
		ΑΑ = αναγνώριση["ΑΑ"]
		Κλειδί = αναγνώριση["Κλειδί"]
		διάλεκτος = αναγνώριση["διάλεκτος"]
		
		σετ = []
		τρέχον = None
		cur = self.sql.conn.cursor()
		for σύνολο in cur.execute(
			'select Κλειδί, Ἐτικέτες from Ουσιαστικά where ΑΑ=? and Διάλεκτος=?;', 
			(ΑΑ, διάλεκτος)):
			if σύνολο and σύνολο[0]!=Κλειδί:
				σετ.append([σύνολο[0], σύνολο[1]])
			elif σύνολο[0]==Κλειδί:
				τρέχον = σύνολο[1]
		for σ in σετ:
			if "τρέχον" in σ[1]:
				cur.execute('update Ουσιαστικά set Ἐτικέτες=? where Κλειδί=?;', (σ[1].replace("τρέχον", "ανενεργό"), σ[0]))
		if τρέχον:
			if "ανενεργό" in τρέχον:
				τρέχον = τρέχον.replace("ανενεργό", "")
			if "διαγραμμένο" in τρέχον:
				τρέχον = τρέχον.replace("διαγραμμένο", "")
			νέο_τρέχον = []
			for σ in τρέχον.split(","):
				σσ = σ.strip()
				if σσ:
					νέο_τρέχον.append(σσ)
			νέο_τρέχον.append("τρέχον")
			cur.execute('update Ουσιαστικά set Ἐτικέτες=? where Κλειδί=?;', 
							(", ".join(νέο_τρέχον), Κλειδί))
		self.φόρτωση(καταλήξεις, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί)
		self.sql.conn.commit()
		
	def διαγραφή(self, αναγνώριση, τονισμοί, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί):
		cur = self.sql.conn.cursor()
		Κλειδί = αναγνώριση["Κλειδί"]
		σετ = []
		for σύνολο in cur.execute('select Ἐτικέτες from Ουσιαστικά where Κλειδί=?;', (Κλειδί, )):
			if σύνολο:
				σετ.append(σύνολο[0])
		for σ in σετ:
			up = False
			if "διαγραμμένο" in σ:
				up = False
			elif "τρέχον" in σ:
				σ=σ.replace("τρέχον", "διαγραμμένο")
				up = True
			elif "ανενεργό" in σ:
				σ=σ.replace("ανενεργό", "διαγραμμένο")
				up = True
			if up:
				cur.execute('update Ουσιαστικά set Ἐτικέτες=? where Κλειδί=?;', (σ, Κλειδί))
		self.φόρτωση(τονισμοί, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί)
		
		self.sql.conn.commit()
			
	def φόρτωση(self, θέματα, μεταδεδομένα, κλίμακες, κατηγοριοτονισμoί, 
				καταλήξεις, τονισμοί, διάλεκτοι, όλα=False):
		κατηγοριοτονισμoί.clear()
		cur = self.sql.conn.cursor()
		forupdate = {}
		if όλα:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, '+
				'τονισμός, συχνότητα, Παρατηρήσεις from Ουσιαστικά as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM ' + 
				'Ουσιαστικά WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος);')
		else:
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, '+
				'τονισμός, συχνότητα, Παρατηρήσεις from Ουσιαστικά as p ' + 
				'WHERE Ἡμερομηνία=(SELECT MAX(Ἡμερομηνία) FROM Ουσιαστικά ' + 
				'WHERE ΑΑ=p.ΑΑ and Διάλεκτος=p.Διάλεκτος AND Ἐτικέτες LIKE "%τρέχον%");')
		self.sql.conn.commit()
		for σύνολο in σύνολα:
			Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, τονισμός, συχνότητα, Παρατηρήσεις = σύνολο
			Διάλεκτος0 = Διάλεκτος
			if διάλεκτοι[Διάλεκτος]['εικονική']:
				Διάλεκτος0 = διάλεκτοι[Διάλεκτος]['εικονική']
			if κατηγορία>0 and not καταλήξεις[Διάλεκτος0][κατηγορία]["καταλήξεις"]:
				print("Ουσιαστικό:"+λήμμα+" λείπει η κατηγορία", κατηγορία, "στην διάλεκτο",Διάλεκτος, Διάλεκτος0)
				print(καταλήξεις[Διάλεκτος][κατηγορία])
			if τονισμός>0 and not τονισμοί[Διάλεκτος0][τονισμός]:
				print("Ουσιαστικά: λείπει ο τονισμός", τονισμός, "στην διάλεκτο",Διάλεκτος, Διάλεκτος0)
			ουσιαστικό = {}
			ουσιαστικό["Κλειδί"] = Κλειδί
			ουσιαστικό["ΑΑ"] = ΑΑ
			ουσιαστικό["διάλεκτος"] = Διάλεκτος
			ουσιαστικό["Ἡμερομηνία"] = Ἡμερομηνία
			ουσιαστικό["Συγγραφέας"] = Συγγραφέας
			ουσιαστικό["ἐτικέτες"] = Ἐτικέτες
			ουσιαστικό["μέρος του λόγου"] = "ουσιαστικό"
			ουσιαστικό["Μεταδεδομένα"] = {}
			for απόκλιση in eval(Μεταδεδομένα):
				μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
				if μ:
					ουσιαστικό["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
			ουσιαστικό["Κλίμακες"] = {}
			
			for απόκλιση in eval(Κλίμακες):
				κ = κλίμακες[Διάλεκτος][απόκλιση]
				if κ:
					ουσιαστικό["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
			ουσιαστικό["συνθετικό"] = συνθετικό
			ουσιαστικό["λήμμα"] = λήμμα
			if όλα:
				if Διάλεκτος0 not in κατηγοριοτονισμoί:
					κατηγοριοτονισμoί[Διάλεκτος0] = {}
				if κατηγορία not in κατηγοριοτονισμoί[Διάλεκτος0]:
					κατηγοριοτονισμoί[Διάλεκτος0][κατηγορία] = []
				if τονισμός not in κατηγοριοτονισμoί[Διάλεκτος0][κατηγορία]:
					κατηγοριοτονισμoί[Διάλεκτος0][κατηγορία].append(τονισμός)
					κατηγοριοτονισμoί[Διάλεκτος0][κατηγορία].sort()
			else:
				ουσιαστικό["κΛέξη"] = self.τ.κωδικοποιητής(λήμμα)
				if συνθετικό:
					ουσιαστικό["κΣυνθετικό"] = self.τ.κωδικοποιητής(συνθετικό)	
			ουσιαστικό["γένος"] = γένος
			ουσιαστικό["κατηγορία"] = κατηγορία
			ουσιαστικό["τονισμός"] = τονισμός
			ουσιαστικό["συχνότητα"] = συχνότητα
			ουσιαστικό["Παρατηρήσεις"] = Παρατηρήσεις
			
			θέματα.append(ουσιαστικό)
		
	def ιστορικό(self, αναγνώριση, μεταδεδομένα, κλίμακες):
		αποτέλεσμα = []
		ΑΑ = αναγνώριση["ΑΑ"]
		if ΑΑ!=None:
			cur = self.sql.conn.cursor()
			σύνολα = cur.execute('select Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, ' + 
				'Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, '+
				'τονισμός, συχνότητα, Παρατηρήσεις from Ουσιαστικά as p ' +
				'WHERE ΑΑ=? and Διάλεκτος=?;', 
				(ΑΑ, αναγνώριση["διάλεκτος"]))
			for σύνολο in σύνολα:
				Κλειδί, ΑΑ, Διάλεκτος, Ἡμερομηνία, Συγγραφέας, Ἐτικέτες, Μεταδεδομένα, Κλίμακες, συνθετικό, λήμμα, γένος, κατηγορία, τονισμός, συχνότητα, Παρατηρήσεις = σύνολο
			
				ουσιαστικό = {}
				ουσιαστικό["Κλειδί"] = Κλειδί
				ουσιαστικό["ΑΑ"] = ΑΑ
				ουσιαστικό["διάλεκτος"] = Διάλεκτος
				ουσιαστικό["Ἡμερομηνία"] = Ἡμερομηνία
				ουσιαστικό["Συγγραφέας"] = Συγγραφέας
				ουσιαστικό["ἐτικέτες"] = Ἐτικέτες
				ουσιαστικό["μέρος του λόγου"] = "ουσιαστικό"
				ουσιαστικό["Μεταδεδομένα"] = {}
				for απόκλιση in eval(Μεταδεδομένα):
					μ = μεταδεδομένα[Διάλεκτος][απόκλιση]
					if μ:
						ουσιαστικό["Μεταδεδομένα"][μ["ὄνομα"]] = μ["τιμές"]
				ουσιαστικό["Κλίμακες"] = {}
				
				for απόκλιση in eval(Κλίμακες):
					κ = κλίμακες[Διάλεκτος][απόκλιση]
					if κ:
						ουσιαστικό["Κλίμακες"][κ["ὄνομα"]] = κ["τιμή"]
				ουσιαστικό["συνθετικό"] = συνθετικό
				ουσιαστικό["λήμμα"] = λήμμα
				ουσιαστικό["γένος"] = γένος
				ουσιαστικό["κατηγορία"] = κατηγορία
				ουσιαστικό["τονισμός"] = τονισμός
				ουσιαστικό["συχνότητα"] = συχνότητα
				ουσιαστικό["Παρατηρήσεις"] = Παρατηρήσεις
				
				αποτέλεσμα.append(ουσιαστικό)
			self.sql.conn.commit()
		return αποτέλεσμα
	