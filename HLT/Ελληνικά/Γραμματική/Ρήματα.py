#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the dimitriadis dimitris nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import numpy as np

κείμενο = str
λίστα = list
μήκος = len
εύρος = range
τίποτα = None

class Ρήματα():
	"""Κλίνει και αναγνωρίζει τα ρήματα με τις ιδιότητες τους"""
	def __init__(self, τονιστής, δεδομένα, αναγνώριση):
		self.τονιστής = τονιστής
		self.τ = self.τονιστής
		self.δεδομένα = δεδομένα
		self.δ = self.δεδομένα
		self.α = αναγνώριση
		self._αναγνώριση = αναγνώριση
		self.__μεταβλητές()

	def __μεταβλητές(self):
		self.dump_ρήματα = {}
		self.διαθέσεις = {"ενεργητική":0, "μέση":1, "παθητική":2, "ουδέτερη":3}
		self.φωνές = {"ενεργητική":0, "παθητική":10, "μέση":5}

		self.εγκλίσεις = {
			"οριστική":0, "υποτακτική":1, "ευκτική":2,
			"προστακτική":3, "απαρέμφατο":4}

		self.αριθμοί = {   "ενικός":0, "δυϊκός":3, "πληθυντικός":6 }
		self.αριθμό_σε_αριθμό = { 0:"ενικός", 1:"δυϊκός", 2:"πληθυντικός"    }

		self.πρόσωπα = {  "α":0, "β":1, "γ":2}

		self.γένος_σε_αριθμό = { "αρσενικό":0, "θηλυκό":1, "ουδέτερο":2 }

		self.αριθμό_σε_φωνή = { 0:"ενεργητική", 1:"μέση", 2:"παθητική"}
		self.αριθμό_σε_έγκλιση = {0:"οριστική", 1:"υποτακτική", 2:"ευκτική", 3:"προστακτική", 4:"απαρέμφατο"}
		
	def dump(self, διάλεκτος=None, λέξη=None, develop=None):
		αποτέλεσμα = []
		if λέξη:
			if not διάλεκτος in self.dump_ρήματα:
				self.dump()
			if λέξη in self.dump_ρήματα[διάλεκτος]:
				offset = self.dump_ρήματα[διάλεκτος][λέξη]
				if offset>=0:
					γκΛέξη = self.δ.δ["θέματα"][offset]["κΛέξη"]
					κατηγορία = 0
					σύνολο = self.δ.δ["θέματα"][offset]
					κΣυνθετικό = σύνολο.get("κΣυνθετικό")
					κΑύξηση = σύνολο.get("κΑύξηση")
					κΑύξηση_παρακείμενου = σύνολο.get("κΑύξηση_παρακείμενου")
					κΕνεστωτική_αύξηση = σύνολο.get("κΕνεστωτική_αύξηση")
					κλίσεις = {}
					for χρόνος in self.δ.δ["θέματα"][offset]["ρήμα"]:
						if χρόνος not in ["ενεστώτας", "παρατατικός", "αόριστος",	"παρακείμενος",
											"υπερσυντέλικος",	"μέλλοντας", "συντελεσμένος μέλλοντας"]:
							continue
						if not self.δ.δ["θέματα"][offset]["ρήμα"][χρόνος]:
							continue
						κλίσεις[χρόνος] = {}
						for φωνή in ["ενεργητική", "μέση", "παθητική"]:
							φε = self.δ.δ["θέματα"][offset]["ρήμα"][χρόνος]["καταλήξεις"]
							αθρ = 0
							for ν in range(5):
								αθρ += φε[self.φωνές[φωνή]+ν]
							if not αθρ:
								continue
							κλίσεις[χρόνος][φωνή] = {}
							for έγκλιση in ["οριστική", "υποτακτική", "ευκτική", "προστακτική", "απαρέμφατο"]:
								if φε[self.φωνές[φωνή]+self.εγκλίσεις[έγκλιση]]==0:
									continue
								κλίσεις[χρόνος][φωνή][έγκλιση] = []
								for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
									for πρόσωπο in ["α", "β", "γ"]:
										κΛέξεις = self.__κλίνε(γκΛέξη, κατηγορία, σύνολο["ρήμα"], αριθμός, πρόσωπο,
				 											έγκλιση, χρόνος, φωνή, διάλεκτος, 
				 				 							κΣυνθετικό, κΑύξηση, κΑύξηση_παρακείμενου, κΕνεστωτική_αύξηση)
										λέξεις = []
										for κΛέξη in κΛέξεις:
											λέξεις.append(self.τ.απο(κΛέξη, True))
										κλίσεις[χρόνος][φωνή][έγκλιση].append(λέξεις)
					if develop:
						νέο_αποτέλεσμα = {}
						νέο_αποτέλεσμα["θέμα"] = self.δ.δ["θέματα"][offset]["θέμα"]
						νέο_αποτέλεσμα["διάλεκτος"] = διάλεκτος
						νέο_αποτέλεσμα["συνθετικό"] = σύνολο.get("συνθετικό")
						νέο_αποτέλεσμα["αύξηση"] = σύνολο.get("αύξηση")
						νέο_αποτέλεσμα["αύξηση παρακείμενου"] = σύνολο.get("αύξηση παρακείμενου")
						νέο_αποτέλεσμα["ενεστωτική αύξηση"] = σύνολο.get("ενεστωτική αύξηση")
						νέο_αποτέλεσμα["ρήμα_μετοχή"] = σύνολο.get("ρήμα_μετοχή")
						νέο_αποτέλεσμα["κλίσεις ρήμα"] = κλίσεις
						αποτέλεσμα = νέο_αποτέλεσμα
					else:
						αποτέλεσμα = κλίσεις
				else:
					κατηγορία = abs(offset+1)
					αποτέλεσμα = self.δ.δ["ανώμαλα"]["ρήμα"][διάλεκτος][κατηγορία]["ρήμα"]
		else:
			self.dump_ρήματα.clear()
			# προσθήκη ανώμαλων
			for διάλεκτος, σύνολα in self.δ.δ["ανώμαλα"]["ρήμα"].items():
				ακατηγορία = -1
				self.dump_ρήματα[διάλεκτος] = {}
				for σύνολο in σύνολα:
					ακατηγορία += 1
					if σύνολο and "ρήμα" in σύνολο:
						for χρόνο in σύνολο["ρήμα"]:
							for φωνή in σύνολο["ρήμα"][χρόνο]:
								for έγκλιση in σύνολο["ρήμα"][χρόνο][φωνή]:
									σλέξεις = σύνολο["ρήμα"][χρόνο][φωνή][έγκλιση]["καταλήξεις"][0]
									for σλέξη in σλέξεις:
										if σλέξη in self.dump_ρήματα[διάλεκτος]:
											σλέξη = σλέξη+str(ακατηγορία)
										self.dump_ρήματα[διάλεκτος][σλέξη] = -1-ακατηγορία
								break
							break
						break
			γκατηγορία = -1
			for σύνολο in self.δ.δ["θέματα"]:
				γκατηγορία += 1
				if σύνολο and σύνολο["μέρος του λόγου"]=="ρήμα" and σύνολο["μετοχή"]:
					if "ρήμα" not in σύνολο:
						continue
					διάλεκτος = σύνολο["διάλεκτος"]
					if not διάλεκτος in self.dump_ρήματα:
						self.dump_ρήματα[διάλεκτος] = {}
					γκΛέξη = σύνολο["κΛέξη"]
					κατηγορία = 0
					κΣυνθετικό = σύνολο.get("κΣυνθετικό")
					κΑύξηση = σύνολο.get("κΑύξηση")
					κΑύξηση_παρακείμενου = σύνολο.get("κΑύξηση_παρακείμενου")
					κΕνεστωτική_αύξηση = σύνολο.get("κΕνεστωτική_αύξηση")
					χρόνος, φωνή, έγκλιση = None, None, None
					for χρόνος in ["ενεστώτας", "παρατατικός", 
										"αόριστος",	"παρακείμενος",
										"υπερσυντέλικος",	"μέλλοντας", "συντελεσμένος μέλλοντας"]:
						
						for ν in range(15):
							if σύνολο["ρήμα"][χρόνος] and\
								σύνολο["ρήμα"][χρόνος]["καταλήξεις"][ν]!=0:
								φωνή = self.αριθμό_σε_φωνή[ν//5]
								έγκλιση = self.αριθμό_σε_έγκλιση[ν%5]
								break
						if φωνή!=None:
							break
					
					if χρόνος and φωνή and έγκλιση:
						κΛέξεις = self.__κλίνε(γκΛέξη, κατηγορία, σύνολο["ρήμα"], "ενικός", "α",
					 					έγκλιση, χρόνος, φωνή, διάλεκτος, κΣυνθετικό, 
					 				 	κΑύξηση, κΑύξηση_παρακείμενου, κΕνεστωτική_αύξηση)
	
						for κΛέξη in κΛέξεις:
							σλέξη = self.τ.απο(κΛέξη, True)
							if σλέξη in self.dump_ρήματα[διάλεκτος]:
								σλέξη = σλέξη+str(γκατηγορία)
							self.dump_ρήματα[διάλεκτος][σλέξη] = γκατηγορία
				
			αποτέλεσμα = {}
			for διάλεκτος, λέξεις in self.dump_ρήματα.items():
				αποτέλεσμα[διάλεκτος] = list(λέξεις.keys())
				αποτέλεσμα[διάλεκτος].sort()
		return αποτέλεσμα
		
	def __έλεγχος_εισόδων(self, λέξη, φωνή=None, έγκλιση=None, αριθμός=None,
								πρόσωπο=None, διάλεκτος=None):
		αποτέλεσμα = False
		if αποτέλεσμα and not λέξη:
			αποτέλεσμα = True
		if αποτέλεσμα and φωνή not in self.φωνές:
			αποτέλεσμα = True
		if αποτέλεσμα and αριθμός not in self.αριθμοί:
			αποτέλεσμα = True
		if αποτέλεσμα and πρόσωπο not in self.πρόσωπα:
			αποτέλεσμα = True
		if αποτέλεσμα and διάλεκτος not in self.διάλεκτοι:
			αποτέλεσμα = True
		if αποτέλεσμα and έγκλιση not in self.εγκλίσεις:
			αποτέλεσμα = True
		return αποτέλεσμα
	
	def κλίνε(self, λέξη, χρόνος, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		αποτελέσματα = []
		if λέξη and χρόνος:
			if χρόνος=="ενεστώτας":
				αποτελέσματα = self.ενεστώτας(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="παρατατικός":
				αποτελέσματα = self.παρατατικός(λέξη, φωνή, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="αόριστος":
				αποτελέσματα = self.αόριστος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="παρακείμενος":
				αποτελέσματα = self.παρακείμενος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="υπερσυντέλικος":
				αποτελέσματα = self.υπερσυντέλικος(λέξη, φωνή, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="μέλλοντας":
				αποτελέσματα = self.μέλλοντας(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος)
			elif χρόνος=="συντελεσμένος μέλλοντας":
				αποτελέσματα = self.συντελεσμένος_μέλλοντας(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος)
			
		return αποτελέσματα
	
	def _κλίνε(self, κΛέξη, χρόνος=None, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		αποτελέσματα = []
		if κΛέξη!=None:
			if χρόνος=="ενεστώτας":
				αποτελέσματα = self.__χρόνος(κΛέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, "ενεστώτας") 
			elif χρόνος=="παρατατικός":
				αποτελέσματα = self.__χρόνος(κΛέξη, φωνή, "οριστική", αριθμός, πρόσωπο, διάλεκτος, χρόνος="παρατατικός")
			elif χρόνος=="αόριστος":
				αποτελέσματα = self.__χρόνος(κΛέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="αόριστος")
			elif χρόνος=="παρακείμενος":
				αποτελέσματα = self.__χρόνος(κΛέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, "παρακείμενος") 
			elif χρόνος=="υπερσυντέλικος":
				αποτελέσματα = self._χρόνος(λέξη, φωνή, "οριστική", αριθμός, πρόσωπο, διάλεκτος, χρόνος="υπερσυντέλικος")
			elif χρόνος=="μέλλοντας":
				αποτελέσματα = self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="μέλλοντας")
			elif χρόνος=="συντελεσμένος μέλλοντας":
				αποτελέσματα = self.__χρόνος(κΛέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="συντελεσμένος μέλλοντας")
				
		return αποτελέσματα
	
	def _πλήρη_κλίση(self, αναγνώριση):
		αποτέλεσμα = {} # {χρόνος:{φωνή:{έγκλιση:[αριθμός-πρόσωπο]
		ανώμαλο = αναγνώριση.get("ανώμαλο")
		κΕνεστωτική_αύξηση = αναγνώριση.get('κΕνεστωτική αύξηση')
		κΣυνθετικό = αναγνώριση.get('κΣυνθετικό')
		κΑύξηση = αναγνώριση.get('κΑύξηση')
		κΑύξηση_παρακείμενου = αναγνώριση.get('κΑύξηση παρακείμενου')
		κΕνεστωτική_αύξηση = αναγνώριση.get('κΕνεστωτική αύξηση')
		κΛήμμα = αναγνώριση.get('κΛέξη')
		κατηγορία = αναγνώριση.get('κατηγορία')
		ρήμα = αναγνώριση.get('ρήμα')
		διάλεκτος = αναγνώριση.get('διάλεκτος')
		if not ρήμα:
			return αποτέλεσμα
		for χρόνος, τιμές in ρήμα.items():
			if χρόνος not in ["ενεστώτας", "παρατατικός", "αόριστος",	"παρακείμενος",
									"υπερσυντέλικος",	"μέλλοντας", "συντελεσμένος μέλλοντας"]:
				continue
			if not τιμές:
				continue
			αποτέλεσμα[χρόνος] = {}
			for φωνή in ["ενεργητική", "μέση", "παθητική"]:
				αθρ = 0
				for ν in range(self.φωνές[φωνή], self.φωνές[φωνή]+5, 1):
					αθρ+=τιμές["καταλήξεις"][ν]
				if αθρ==0:
					continue
				αποτέλεσμα[χρόνος][φωνή] = {}
				for έγκλιση in self.εγκλίσεις:
					offset = self.φωνές[φωνή]+self.εγκλίσεις[έγκλιση]
					if τιμές["καταλήξεις"][offset]==0:
						continue
					
					αποτέλεσμα[χρόνος][φωνή][έγκλιση] = []
					for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
						for πρόσωπο in ["α", "β", "γ"]:
							αποτέλεσμα[χρόνος][φωνή][έγκλιση].append(self.__κλίνε(κΛήμμα, κατηγορία, ρήμα, αριθμός, πρόσωπο,
								έγκλιση, χρόνος, φωνή, διάλεκτος, κΣυνθετικό, κΑύξηση, κΑύξηση_παρακείμενου, 
								κΕνεστωτική_αύξηση, ανώμαλο))
		return αποτέλεσμα
	
	def __κλίση_ανώμαλου(self, χρόνος, φωνή, έγκλιση, κατηγορία, διάλεκτος, offset2):
		κΑποτελέσματα = []
		θέμα = self.δ.δ["ανώμαλα"]["ρήμα"][διάλεκτος][κατηγορία]
		if χρόνος in θέμα['καταλήξεις']["ρήμα"] and\
			φωνή in θέμα['καταλήξεις']["ρήμα"][χρόνος] and\
			έγκλιση in θέμα['καταλήξεις']["ρήμα"][χρόνος][φωνή]:
			κΑποτελέσματα = θέμα['καταλήξεις']["ρήμα"][χρόνος][φωνή][έγκλιση]["κΚαταλήξεις"][offset2]
		return κΑποτελέσματα
	
	def __θέμα(self, χρόνος, φωνή, έγκλιση, κΕνεστωτική_αύξηση, κΑύξηση_παρακείμενου,
				κΑύξηση, κΣυνθετικό, κΛέξη, κΚατάληξη, τόνος, διάλεκτος):
		νέο_κΘέμα = np.append(κΛέξη, κΚατάληξη, 0)
		if χρόνος=="ενεστώτας":
			if κΕνεστωτική_αύξηση!=None:
				νέο_κΘέμα = np.append(κΕνεστωτική_αύξηση, νέο_κΘέμα, 0)
			elif κΣυνθετικό!=None:
				νέο_κΘέμα = np.append(κΣυνθετικό, νέο_κΘέμα, 0)
		elif χρόνος in ["παρατατικός", "αόριστος"]:
			# αριθμός συλλαβών + θέση τόνου
			if κΕνεστωτική_αύξηση!=None:
				if χρόνος == "αόριστος" and έγκλιση=="οριστική":
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
				elif self.τ.είναι_φωνήεν(κΑύξηση) and self.τ.είναι_φωνήεν(κΕνεστωτική_αύξηση) and έγκλιση=="οριστική":
					νέο_κΘέμα = np.append(κΕνεστωτική_αύξηση, νέο_κΘέμα, 0)
				elif έγκλιση=="οριστική":
					νέο_κΘέμα = np.append(κΕνεστωτική_αύξηση, νέο_κΘέμα, 0)
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
			elif έγκλιση=="οριστική" and κΑύξηση!=None:
				αριθμός_συλλαβών = self.τ.μέτρα_συλλαβές(νέο_κΘέμα)
				if αριθμός_συλλαβών<(τόνος//4):
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
				elif self.δ.δ["διάλεκτοι"][διάλεκτος]["δοτική"]:
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
			elif κΣυνθετικό!=None:
				νέο_κΘέμα = np.append(κΣυνθετικό, νέο_κΘέμα, 0)
		elif χρόνος=="παρακείμενος":
			if κΑύξηση_παρακείμενου!=None:
				if κΛέξη.size>1 and\
					κΛέξη[0] == 10 and\
					κΛέξη[1] == 19 and\
					φωνή=="μέση" and κΑύξηση!=None:
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
				else:
					νέο_κΘέμα = np.append(κΑύξηση_παρακείμενου, νέο_κΘέμα, 0)
			elif κΑύξηση!=None:
				νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
			elif κΣυνθετικό!=None:
				νέο_κΘέμα = np.append(κΣυνθετικό, νέο_κΘέμα, 0)
		elif χρόνος == "συντελεσμένος μέλλοντας":
			if κΑύξηση_παρακείμενου!=None:
				if κΛέξη[0] in [10]:
					if φωνή=="μέση" and κΑύξηση!=None:
						αύξηση = κΑύξηση
					else:
						αύξηση = κΑύξηση_παρακείμενου
				else:
					αύξηση = κΑύξηση_παρακείμενου
				νέο_κΘέμα = np.append(αύξηση, νέο_κΘέμα, 0)
			elif κΛέξη[0] not in [3, 10, 17, 18, 21] or\
				(κΛέξη[1] in [11, 17] and κΛέξη[0]==10):
				if κΑύξηση!=None:
					αύξηση = κΛέξη[:1]
					αυξ = κΑύξηση.__deepcopy__(κΑύξηση)
					self.τ.αποτονιστής(αυξ)
					αύξηση = np.append(αύξηση, αυξ, 0)
				else:
					αύξηση = κΛέξη
				νέο_κΘέμα = np.append(αύξηση, νέο_κΘέμα, 0)
			else:
				νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
		elif χρόνος == "υπερσυντέλικος":
			if κΑύξηση_παρακείμενου!=None:
				if κΛέξη.size>1 and\
					κΛέξη[0] == 10 and\
					κΛέξη[1] == 19 and\
					φωνή=="μέση" and κΑύξηση!=None:
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
				else:
					νέο_κΘέμα = np.append(κΑύξηση_παρακείμενου, νέο_κΘέμα, 0)
					νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
			elif κΑύξηση!=None:
				νέο_κΘέμα = np.append(κΑύξηση, νέο_κΘέμα, 0)
			elif κΣυνθετικό!=None:
				νέο_κΘέμα = np.append(κΣυνθετικό, νέο_κΘέμα, 0)
		elif κΣυνθετικό!=None:
			νέο_κΘέμα = np.append(κΣυνθετικό, νέο_κΘέμα, 0)
		self.τ.τόνισε(νέο_κΘέμα, τόνος)
			
		return νέο_κΘέμα
	
	def __κλίνε(self, κΛέξη, κατηγορία, ρήμα, αριθμός, πρόσωπο,
				 έγκλιση, χρόνος, φωνή, διάλεκτος, 
				 κΣυνθετικό=None, κΑύξηση=None, κΑύξηση_παρακείμενου=None, 
				 κΕνεστωτική_αύξηση=None, ανώμαλο=False):
		κΑποτελέσματα = []
		offset2 = self.αριθμοί[αριθμός]+self.πρόσωπα[πρόσωπο]
		νκΛέξη = κΛέξη
		if ανώμαλο:
			κΑποτελέσματα = self.__κλίση_ανώμαλου(χρόνος, φωνή, έγκλιση, κατηγορία, διάλεκτος, offset2)
		elif ρήμα[χρόνος]==0:
			return κΑποτελέσματα
		else:
			offset = self.φωνές[φωνή]+self.εγκλίσεις[έγκλιση]
			
			κατηγορία_ενεστώτα = ρήμα[χρόνος]['καταλήξεις'][offset]
			κατηγορία_τόνων = ρήμα[χρόνος]['τονισμοί'][offset]
			
			if 'κΚαταλήξεις' not in self.δ.δ["καταλήξεις"]["ρήμα"][διάλεκτος][χρόνος][κατηγορία_ενεστώτα]:
				return κΑποτελέσματα
			if offset2>=len(self.δ.δ["καταλήξεις"]["ρήμα"][διάλεκτος][χρόνος][κατηγορία_ενεστώτα]['κΚαταλήξεις']):
				return κΑποτελέσματα
			if offset2>=len(self.δ.δ["τονισμοί"]["ρήμα"][διάλεκτος][κατηγορία_τόνων]["τονισμοί"]):
				return κΑποτελέσματα
			kk = self.δ.δ["καταλήξεις"]["ρήμα"][διάλεκτος][χρόνος][κατηγορία_ενεστώτα]['κΚαταλήξεις'][offset2]
			τόνοι = self.δ.δ["τονισμοί"]["ρήμα"][διάλεκτος][κατηγορία_τόνων]["τονισμοί"][offset2]
			
			υ=0
			for κατάληξη in kk:
				if not len(τόνοι)>υ:
					break
				τόνος = τόνοι[υ]
				ναλέξη = self.__θέμα(χρόνος, φωνή, έγκλιση, κΕνεστωτική_αύξηση, κΑύξηση_παρακείμενου,
					κΑύξηση, κΣυνθετικό,	κΛέξη, κατάληξη, τόνος, διάλεκτος)
				
				if self.τ.πάρε_τονισμό(ναλέξη):
					if κΛέξη==None or len(κΛέξη)==0:
						self.τ.πρόσθεσε_ψιλή(ναλέξη)		
					κΑποτελέσματα.append(ναλέξη)
				υ+=1
			
		return κΑποτελέσματα
	
	def αόριστος(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		return self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="αόριστος")
		
	def παρακείμενος(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος="κοινή"):
		return self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="παρακείμενος")
		
	def παρατατικός(self, λέξη, φωνή='ενεργητική',
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		return self._χρόνος(λέξη, φωνή, έγκλιση="οριστική", αριθμός=αριθμός, πρόσωπο=πρόσωπο, διάλεκτος=διάλεκτος, χρόνος="παρατατικός")
		
	def ενεστώτας(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		return self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, "ενεστώτας") 
		
	def μέλλοντας(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None):
		return self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="μέλλοντας")
	
	def υπερσυντέλικος(self, λέξη, φωνή='ενεργητική',
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος="κοινή"):
		return self._χρόνος(λέξη, φωνή, "οριστική", αριθμός, πρόσωπο, διάλεκτος, χρόνος="υπερσυντέλικος")
		
	def συντελεσμένος_μέλλοντας(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος="κοινή"):
		return self._χρόνος(λέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος="συντελεσμένος μέλλοντας")
	
	def _χρόνος(self, λέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None, χρόνος=None):
		"""Κλίνει ρήματα στο χρόνος.

		Κλίνει την λέξη με βάση τα φωνή, έγκλιση, αριθμός,
		πρόσωπο και μόριο.

		Μεταβλητές:
			λέξη: Ρήμα σε οποιοδήποτε χρόνο και κλίση ή λέξη με κατάληξη ρήματος.
			φωνή: Αποδεκτές τιμές "ενεργητική", "μέση", "παθητική".
			έγκλιση: Αποδεκτές τιμές "οριστική", "προστακτική",
			αριθμός: Αποδεκτές τιμές "ενικός", "πληθυντικός".
				Αγνοείτε όταν η έγκλιση είναι "μετοχή".
			πρόσωπο: Αποδεκτές τιμές "α", "β", "γ".
				Αγνοείτε όταν η έγκλιση είναι "προστακτική" ή "μετοχή".

		Επιστρέφει:
		  Μία λίστα με ένα ή περισσότερα ρήματα, εάν μπορεί να
		  αναγνωριστεί η λέξη ως ρήμα σε οποιοδήποτε χρόνο και κλίση.
		  Αν δεν αναγνωριστεί η λέξη,
		  ή δεν είναι έγκηρες οι τιμές των μεταβλητών,
		  ή δεν κλίνεται η λέξη με τις συγκεκριμές τιμές,
		  επιστρέφει άδεια λίστα.
		"""
		αποτελέσματα = []
		if διάλεκτος not in self.δ.δ["διάλεκτοι"]:
			return αποτελέσματα
		
		if self.__έλεγχος_εισόδων(λέξη, φωνή=φωνή,
						έγκλιση=έγκλιση, αριθμός=αριθμός,
						πρόσωπο=πρόσωπο, διάλεκτος=διάλεκτος):
			return αποτελέσματα
		
		κΛέξη = self.τ.κωδικοποιητής(λέξη)
		κΑποτελέσματα = self.__χρόνος(κΛέξη, φωνή, έγκλιση, αριθμός, πρόσωπο, διάλεκτος, χρόνος)
		
		for κΑποτέλεσμα in κΑποτελέσματα:
			νέα_λέξη = self.τ.απο(κΑποτέλεσμα, True)
			if νέα_λέξη not in αποτελέσματα:
				αποτελέσματα.append(νέα_λέξη)
				
		return αποτελέσματα
	
	def __χρόνος(self, κΛέξη, φωνή='ενεργητική', έγκλιση="οριστική",
					αριθμός="ενικός", πρόσωπο="α", διάλεκτος=None, χρόνος=None):
		κΑποτελέσματα = []
		if self.__έλεγχος_εισόδων(λέξη=True, φωνή=φωνή,
						έγκλιση=έγκλιση, αριθμός=αριθμός,
						πρόσωπο=πρόσωπο, διάλεκτος=διάλεκτος):
			return κΑποτελέσματα
		
		αναγνωρίσεις = self.α._αναγνώριση(κΛέξη, self.δ, διάλεκτος)
		
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="ρήμα":
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			if (διάλεκτος and διάλεκτος != αναγνώριση['διάλεκτος']) or\
				not (("ρήμα" in αναγνώριση and χρόνος in αναγνώριση["ρήμα"]) or\
					 "ανώμαλο" in αναγνώριση):
				continue
			offset2 = self.αριθμοί[αριθμός]+self.πρόσωπα[πρόσωπο]
			
			ανώμαλο = αναγνώριση.get("ανώμαλο")
			κΕνεστωτική_αύξηση = αναγνώριση.get('κΕνεστωτική αύξηση')
			κΣυνθετικό = αναγνώριση.get('κΣυνθετικό')
			κΑύξηση = αναγνώριση.get('κΑύξηση')
			κΑύξηση_παρακείμενου = αναγνώριση.get('κΑύξηση παρακείμενου')
			κΕνεστωτική_αύξηση = αναγνώριση.get('κΕνεστωτική αύξηση')
			κΛήμμα = αναγνώριση.get('κΛέξη')
			κατηγορία = αναγνώριση.get('κατηγορία')
			ρήμα = αναγνώριση.get('ρήμα')
			
			κΑποτελέσματα += self.__κλίνε(κΛήμμα, κατηγορία, ρήμα, αριθμός, πρόσωπο,
				έγκλιση, χρόνος, φωνή, διάλεκτος, 
				κΣυνθετικό, κΑύξηση, κΑύξηση_παρακείμενου, 
				κΕνεστωτική_αύξηση, ανώμαλο)
				
		return κΑποτελέσματα

# TODO: προσθήκη λέξεων δημοτική
# TODO: IME
