#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the dimitriadis dimitris nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from itertools import groupby
import numpy as np

τύπωσε = print
κείμενο = str
λίστα = list
μήκος = len
τίποτα = None
ναι = True
όχι = False

class Ουσιαστικά():
	def __init__(self, τονιστής, δεδομένα, αναγνώριση):
		self._αναγνώριση = αναγνώριση
		self.τ = τονιστής
		self.τονιστής = τονιστής
		self.δ = δεδομένα
		self.πτώση_σε_αριθμό = {"ονομαστική":0, "γενική":1, "δοτική":2, "αιτιατική":3, "κλητική":4, None:0}
		self.αριθμό_σε_πτώση = {0:"ονομαστική", 1:"γενική", 2:"δοτική", 3:"αιτιατική", 4:"κλητική"}
		self.αριθμοί = {"ενικός":0, "δυϊκός":5, "πληθυντικός":10, None:0}
		self.αριθμό_σε_αριθμό = {0:"ενικός", 1:"δυϊκός", 2:"πληθυντικός"}
		self.dump_ουσιαστικά = {}
	
	def dump(self, διάλεκτος=None, λέξη=None, develop=None):
		αποτέλεσμα = []
		if λέξη:
			if διάλεκτος not in self.dump_ουσιαστικά:
				self.dump()
			#κλίνη την λέξη
			if λέξη in self.dump_ουσιαστικά[διάλεκτος]:
				νέο_αποτέλεσμα = {}
				offset = self.dump_ουσιαστικά[διάλεκτος][λέξη]
				if offset>=0:
					γκΛέξη = self.δ.δ["θέματα"][offset]["κΛέξη"]
					κΣυνθετικό = self.δ.δ["θέματα"][offset].get("κΣυνθετικό")
					νέο_αποτέλεσμα["λήμμα"] = self.δ.δ["θέματα"][offset]["λήμμα"]
					νέο_αποτέλεσμα["διάλεκτος"] = διάλεκτος
					for στοιχείο in ["συνθετικό", "Μεταδεδομένα", "Κλίμακες"]:
						if στοιχείο in self.δ.δ["θέματα"][offset]:
							νέο_αποτέλεσμα[στοιχείο] = self.δ.δ["θέματα"][offset][στοιχείο]
					
					νέο_αποτέλεσμα["γένος"] = self.δ.δ["θέματα"][offset]["γένος"]
					κατηγορία = self.δ.δ["θέματα"][offset]["κατηγορία"]
					τονισμός = self.δ.δ["θέματα"][offset]["τονισμός"]
					νέο_αποτέλεσμα["κατηγορία"] = κατηγορία
					νέο_αποτέλεσμα["τονισμός"] = τονισμός
					νέο_αποτέλεσμα["κλίσεις"] = []
					for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
						for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
							κΛέξεις = self.__κλίνε(γκΛέξη, κατηγορία, τονισμός, διάλεκτος, αριθμός, πτώση, κΣυνθετικό)
							λέξεις = []
							for κΛέξη in κΛέξεις:
								λέξεις.append(self.τ.απο(κΛέξη, True))
							νέο_αποτέλεσμα["κλίσεις"].append(λέξεις)
					if develop:
						αποτέλεσμα = νέο_αποτέλεσμα
					else:
						αποτέλεσμα = νέο_αποτέλεσμα["κλίσεις"]
				else:
					κατηγορία = abs(offset+1)
					if "καταλήξεις" in self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]:
						νέο_αποτέλεσμα["κλίσεις"] = self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]["καταλήξεις"]["καταλήξεις"]
					else:
						νέο_αποτέλεσμα["κλίσεις"] = [self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]["λήμμα"]]*15
					νέο_αποτέλεσμα["γένος"] = self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]["γένος"]
					νέο_αποτέλεσμα["κατηγορία"] = 0
					νέο_αποτέλεσμα["ανώμαλο"] = 1
					νέο_αποτέλεσμα["διάλεκτος"] = διάλεκτος
					
					for στοιχείο in ["Μεταδεδομένα", "Κλίμακες"]:
						if στοιχείο in self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]:
							νέο_αποτέλεσμα[στοιχείο] = self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία][στοιχείο]
					
					if develop:
						αποτέλεσμα = νέο_αποτέλεσμα
					else:
						αποτέλεσμα = νέο_αποτέλεσμα["κλίσεις"]
		else:
			# Επιστρέφει όλες τις λέξεις του λεξικού στον ενικό-ονομαστική
			self.dump_ουσιαστικά.clear()
			# προσθήκη ανώμαλων
			for διάλεκτος, σύνολα in self.δ.δ["ανώμαλα"]["ουσιαστικό"].items():
				self.dump_ουσιαστικά[διάλεκτος] = {}
				ακατηγορία = -1
				for σύνολο in σύνολα:
					ακατηγορία += 1
					if not σύνολο:
						continue
					if "καταλήξεις" not in σύνολο:
						σλέξεις = [σύνολο['λήμμα']]
					else:
						σλέξεις = σύνολο["καταλήξεις"]["καταλήξεις"][0]
					for σλέξη in σλέξεις:
						if σλέξη in self.dump_ουσιαστικά[διάλεκτος]:
							σλέξη = σλέξη+str(ακατηγορία)
						self.dump_ουσιαστικά[διάλεκτος][σλέξη] = -1-ακατηγορία
					
			γκατηγορία = 0
			for σύνολο in self.δ.δ["θέματα"]:
				if σύνολο["μέρος του λόγου"]=="ουσιαστικό":
					διάλεκτος = σύνολο["διάλεκτος"]
					if διάλεκτος not in self.dump_ουσιαστικά:
						self.dump_ουσιαστικά[διάλεκτος] = {}
					κΛέξη = σύνολο["κΛέξη"]
					κατηγορία = σύνολο["κατηγορία"]
					τονισμός = σύνολο["τονισμός"]
					κΣυνθετικό = σύνολο.get("κΣυνθετικό")
					κΛέξεις = self.__κλίνε(κΛέξη, κατηγορία, τονισμός, διάλεκτος, "ενικός", "ονομαστική", κΣυνθετικό)
					for κΛέξη in κΛέξεις:
						σλέξη = self.τ.απο(κΛέξη, True)
						if σλέξη in self.dump_ουσιαστικά[διάλεκτος]:
							σλέξη = σλέξη+str(γκατηγορία)
						self.dump_ουσιαστικά[διάλεκτος][σλέξη] = γκατηγορία
				γκατηγορία += 1
			αποτέλεσμα = {}
			for διάλεκτος, λέξεις in self.dump_ουσιαστικά.items():
				αποτέλεσμα[διάλεκτος] = list(λέξεις.keys())
				αποτέλεσμα[διάλεκτος].sort()
		
		return αποτέλεσμα
			
	def _ημικλίση(self, κΛέξη, bΛέξη, κμέγεθος, bμέγεθος, αριθμός, πτώση, γένος, άθροισμα, διάλεκτος=None):
		"""Κλίνη λήμματα.

		Κλίνει μαζικά όλα τα λήμματα που αρχίζουν από κΛέξη
		και γένος, στο συγκεκριμένο αριθμό και πτώση.

		Μεταβλητές:
			κΛέξη: κωδικοποιημένα αρχικά γράμματα του λήμματος, πίνακας numpy
			bΛέξη: απλοποιημένη έκδοση της κΛέξη, πίνακας numpy
			κμέγεθος: μέγεθος της κΛέξη
			bμέγεθος: μέγεθος της bΛέξη
			αριθμός:   Αποδεκτές τιμές "ενικός", "δυϊκός", "πληθυντικός".
			πτώση: 	  Αποδεκτές τιμές "ονομαστική", "γενική",
												"δοτική", "αιτιατική", "κλητική".
			γένος:	  Αποδεκτές τιμές "αρσενικό", "θηλυκό", "ουδέτερο"
			άθροισμα: του πίνακα numpy της κΛέξη
			διάλεκτος: προαιρετικά

		Επιστρέφει:
		  Λεξικό στην μορφή: {ΔΑ:κλιμένη λέξη:[[κλιμένη λέξη, αριθμός, πτώση],]}}
		  	ΔΑ:η διαφορά του αθροίσματος των αρχικών γραμμάτων από το άθροισμα της κΛέξη,
		  		0=καμία διαφορά, ΔΑ>0: διαφορά κατά ΔΑ
		"""
		# init
		αποτελέσματα = {}
		if διάλεκτος:
			τΔιάλεκτος = διάλεκτος
		else:
			τΔιάλεκτος = self.διάλεκτος
		
		# main
		τλήμματα = {}
		λεξικά = self.τ.stepfinder(self.δ.bευρετήριο_λημμάτων[τΔιάλεκτος], bΛέξη, bμέγεθος, τλήμματα)
		
		λήμματα = []
		self.τ.rv(λεξικά, λήμματα, 0)
		
		for λήμμα in λήμματα:
			if λήμμα['γένος']==γένος:
				αθρ = (λήμμα['κΛέξη'][:κμέγεθος]&255).sum().item()
				αθρ = abs(αθρ-άθροισμα)+abs(λήμμα['κΛέξη'].size-κμέγεθος)
				
				if αθρ not in αποτελέσματα:
					αποτελέσματα[αθρ] = {}
				
				ονομασία = 'μέρος του λόγου'
				λέξη = λήμμα["λήμμα"]
				
				if λήμμα['κατηγορία']==-1:
					νλέξη = self.τ.απόκωδικοποιητής(λέξη, με_ς=True)
					αποτελέσματα[αθρ][νλέξη] = [νλέξη, "ουσιαστικό", γένος, αριθμός, [πτώση]]
				else:
					θέση = self.αριθμοί[αριθμός] + self.πτώση_σε_αριθμό[πτώση]
					κατάληξη = self.δ.καταλήξεις[τΔιάλεκτος][λήμμα['κατηγορία']]['κωδικοποίηση'][θέση]
					
					for κΤόνο in λήμμα['τονισμός']:
						τόνοι = self.δ.τονισμοί[τΔιάλεκτος][κΤόνο]["τονισμοί"][θέση]
						if κατάληξη and τόνοι:
							υ = 0
							for ypo in κατάληξη:
								νέα_λέξη = np.append(λήμμα['κΛέξη'], ypo, 0) 
								self.τ.τόνισε(νέα_λέξη, τόνοι[υ])
								νλέξη = self.τ.απόκωδικοποιητής(νέα_λέξη, με_ς=True)
								αποτελέσματα[αθρ][νλέξη] = [νλέξη, "ουσιαστικό", γένος, αριθμός, [πτώση]]
								υ += 1
		return αποτελέσματα
		
	def __κλίνε(self, κΛέξη, κατηγορία, τονισμός, διάλεκτος, αριθμός, πτώση, κΣυνθετικό=None, ανώμαλο=False):
		κΛέξεις = []
		
		if κατηγορία==-1:
			κΛέξεις = [κΛέξη.__deepcopy__(κΛέξη)]
			return κΛέξεις
		θέση_στη_λίστα = self.πτώση_σε_αριθμό[πτώση] + self.αριθμοί[αριθμός] # αριθμός πτώσης και αριθμος «αριθμού»
		if ανώμαλο:
			ενμέρη = self.δ.δ["ανώμαλα"]["ουσιαστικό"][διάλεκτος][κατηγορία]
			if "κΛέξη" in ενμέρη:
				return [ενμέρη["κΛέξη"]]
			κΛέξεις = ενμέρη["καταλήξεις"]["κΚαταλήξεις"][θέση_στη_λίστα]
			return κΛέξεις
		if κΣυνθετικό!=None:
			κΛήμμα = np.append(κΣυνθετικό, κΛέξη)
		else:
			κΛήμμα = κΛέξη
		διάλεκτος0 = διάλεκτος
		if self.δ.δ["διάλεκτοι"][διάλεκτος]['εικονική']:
			διάλεκτος0 = self.δ.δ["διάλεκτοι"][διάλεκτος]['εικονική']
		if κατηγορία>len(self.δ.δ["καταλήξεις"]["ουσιαστικό"][διάλεκτος0]) or\
			τονισμός>len(self.δ.δ["τονισμοί"]["ουσιαστικό"][διάλεκτος0]) or\
			θέση_στη_λίστα>len(self.δ.δ["τονισμοί"]["ουσιαστικό"][διάλεκτος0][τονισμός]["τονισμοί"]):
			return κΛέξεις
		
		try:
			τελικές_καταλήξεις = self.δ.δ["καταλήξεις"]["ουσιαστικό"][διάλεκτος0][κατηγορία]["κΚαταλήξεις"][θέση_στη_λίστα]
			τονισμοί = self.δ.δ["τονισμοί"]["ουσιαστικό"][διάλεκτος0][τονισμός]["τονισμοί"][θέση_στη_λίστα]
		except:
			return κΛέξεις

		υ = 0
		for κατάληξη in τελικές_καταλήξεις:
			if κατάληξη.any():
				if τονισμοί and κΛήμμα!=None and len(κΛήμμα)>0:
					νέα_λέξη = np.append(κΛήμμα, κατάληξη, 0)
					self.τ.αφαίρεσε_τόνους(νέα_λέξη)
					if len(τονισμοί)>υ: 
						self.τ.τόνισε(νέα_λέξη, τονισμοί[υ])
					else:
						pass
						
					κΛέξεις.append(νέα_λέξη)
					
			υ += 1
		return κΛέξεις

	def _πλήρη_κλίση(self, αναγνώριση):
		αποτέλεσμα = {}
		κΛέξη = αναγνώριση.get('κΛέξη')
		κατηγορία = αναγνώριση['κατηγορία']
		τονισμός = αναγνώριση.get('τονισμός')
		διάλεκτος = αναγνώριση['διάλεκτος']
		γένος = αναγνώριση['γένος']
		ανώμαλο = αναγνώριση.get("ανώμαλο")
		κΣυνθετικό = αναγνώριση.get("κΣυνθετικό")
		αποτέλεσμα[γένος] = []
		for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
			for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
				αποτέλεσμα[γένος].append(self.__κλίνε(κΛέξη, κατηγορία, τονισμός, διάλεκτος, αριθμός, πτώση, κΣυνθετικό, ανώμαλο))
		return αποτέλεσμα
	
	def _κλίνε(self, κΛέξη, αριθμός=None, πτώση=None, διάλεκτος=None):
		if πτώση not in self.πτώση_σε_αριθμό or\
			αριθμός not in self.αριθμοί or\
			διάλεκτος not in self.δ.δ["διάλεκτοι"]:
			return τίποτα
		
		# Αναγνώριση λέξης και κλίση
		αναγνωρίσεις = self._αναγνώριση._αναγνώριση(κΛέξη, self.δ, διάλεκτος)
		κΑποτελέσματα = []
		
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="ουσιαστικό":
				continue
			if (διάλεκτος and διάλεκτος != αναγνώριση['διάλεκτος']):
				continue
			if αριθμός==None:
				αριθμός = αναγνώριση["αριθμός"]
			if πτώση==None:
				πτώση = αναγνώριση["πτώση"][0]
			if 'τονισμός' not in αναγνώριση:
				αναγνώριση['τονισμός'] = 0
			
			if "συνθετικό" in αναγνώριση and αναγνώριση["συνθετικό"]:
				κΣυνθετικό = αναγνώριση["κΣυνθετικό"]
			else:
				κΣυνθετικό = None
			if "κΛέξη" in αναγνώριση:
				κΛέξη2 = αναγνώριση["κΛέξη"]
			else:
				κΛέξη2 = None
			if 'κατηγορία' in αναγνώριση:
				κατηγορία = αναγνώριση['κατηγορία']
			else:
				κατηγορία = αναγνώριση['ΑΑ']
			
			κΑποτελέσματα += self.__κλίνε(κΛέξη2,
					κατηγορία, αναγνώριση['τονισμός'], 
					αναγνώριση['διάλεκτος'], αριθμός, πτώση, 
					κΣυνθετικό, αναγνώριση.get("ανώμαλο"))
		return κΑποτελέσματα

	def κλίνε(self, λέξη, αριθμός=None, πτώση=None, διάλεκτος=None):
		"""Κλίνει ουσιαστικά.

		Κλίνει την λέξη με βάση τα αριθμός, πτώση
		και διάλεκτος.

		Μεταβλητές:
			λέξη:      Ουσιαστικά σε οποιοδήποτε αριθμό και πτώση.
			αριθμός:   Αποδεκτές τιμές "ενικός", "δυϊκός", "πληθυντικός".
			πτώση: 	  Αποδεκτές τιμές "ονομαστική", "γενική",
												"δοτική", "αιτιατική", "κλητική".
			διάλεκτος: Προαιρετικό. Αποδεκτές τιμές "κοινή", "δημοτική", None.
						None - Αν δεν δοθεί διάλεκτος επιστρέφει το
								ουσιαστικό και στα κοινή και την δημοτική,
								εφόσον υπάρχει αντίστοιχο λήμμα.

		Επιστρέφει:
		  Μία λίστα με ένα ή περισσότερα ουσιαστικά, εφόσον
		  μπορεί να αναγνωριστεί η λέξη ως ουσιαστικό σε
		  οποιοδήποτε πτώση και αριθμό.
		  Αν δεν αναγνωριστεί η λέξη,
		  ή δεν είναι έγκυρες οι τιμές των μεταβλητών,
		  ή δεν κλίνεται η λέξη με τις συγκεκριμένες μεταβλητές,
		  επιστρέφει άδεια λίστα.
		"""
		# Έλεγχος εισόδου
		if not λέξη or\
		 πτώση not in self.πτώση_σε_αριθμό or\
		 αριθμός not in self.αριθμοί or\
		 διάλεκτος not in self.δ.δ["διάλεκτοι"]:
			return τίποτα
		if not διάλεκτος:
			διάλεκτος = self.διάλεκτος
		
		κΛέξη = self.τ.κωδικοποιητής(λέξη)
		κΑποτελέσματα = self._κλίνε(κΛέξη, αριθμός, πτώση, διάλεκτος)
		
		αποτελέσματα = []
		for κΑποτέλεσμα in κΑποτελέσματα:
			αποτέλεσμα = self.τ.απόκωδικοποιητής(κΑποτέλεσμα, με_ς=True)

			if αποτέλεσμα:
				αποτελέσματα.append(αποτέλεσμα)
		
		return list(set(αποτελέσματα))
	