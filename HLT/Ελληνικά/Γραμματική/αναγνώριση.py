#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import numpy as np
import logging
μήκος = len
τύπωσε = print

class Αναγνώριση():
	def __init__(self, τονιστής, διάλεκτοι):
		#logging.basicConfig(filename='Αναγνώριση.log',level=#logging.INFO)
		self.τ = τονιστής
		self.διάλεκτοι = διάλεκτοι
		self.__μεταβλητές()

	def __μεταβλητές(self):
		self.αριθμός_πρόσωπα = {0:"α",	1:"β",	2:"γ"}
		self.αριθμό_σε_αριθμό = { 0:"ενικός", 1:"δυϊκός", 2:"πληθυντικός"}

		self.αριθμό_σε_έγκλιση = {0:"οριστική", 1:"υποτακτική", 2:"ευκτική",
			3:"προστακτική", 4:"απαρέμφατο"}
		self.αριθμό_σε_φωνή = { 0:"ενεργητική", 1:"μέση", 2:"παθητική"}
		self.αριθμό_σε_γένος  = { 0:"αρσενικό",   1:"θηλυκό",   2:"ουδέτερο"   }
		self.πτώση_σε_αριθμό  = {   "ονομαστική":0,   "γενική":1,   "δοτική":2,   "αιτιατική":3,   "κλητική":4 }
		self.πρόσωπα = {  "α":0, "β":1, "γ":2}
		self.αριθμοί = {   "ενικός":0, "δυϊκός":1, "πληθυντικός":2 }
		
		self.cache_list = []
		self.cache = {}
		self.cache_size = 50

	def αναγνώριση_κατάληξης(self, λέξη):
		if not λέξη:
			return []
		
		κΛέξη = self.τ.κωδικοποιητής(λέξη)
		return self._αναγνώριση_κατάληξης(κΛέξη)
		
	def _αναγνώριση_κατάληξης(self, κΛέξη):
		if κΛέξη==None and len(κΛέξη)==0:
			return []
		
		καταλήξεις = {}
		αλέξη = κΛέξη.__deepcopy__(κΛέξη)
		self.τονιστής.αποτονιστής(αλέξη)
		self.τ.keyfinder(self.ε.ευρετήριο_καταλήξεων, αλέξη[::-1], αλέξη.size, καταλήξεις)
		
		return καταλήξεις
	
	def __αναγνώριση_κατάληξης(self, κΛέξη, ευρετήριο):
		# Επιστρέφει {μέγεθος_κατάληξης:θέση_στην_λίστα_rκαταλήξεων}
		καταλήξεις = {}
		
		κΑντίγραφο = κΛέξη.__deepcopy__(κΛέξη)
		self.τ.keyfinder(ευρετήριο["καταλήξεις"], κΑντίγραφο[::-1], κΑντίγραφο.size, καταλήξεις)
		self.τ.αποτονιστής(κΑντίγραφο)
		self.τ.keyfinder(ευρετήριο["καταλήξεις"], κΑντίγραφο[::-1], κΑντίγραφο.size, καταλήξεις)
		
		return καταλήξεις
	
	def __αναγνώριση_ανώμαλων(self, κΛέξη, ευρετήριο):
		# Επιστρέφει {μέγεθος_κατάληξης:θέση_στην_λίστα_rκαταλήξεων}
		ανώμαλα = {}
		αλέξη = κΛέξη.__deepcopy__(κΛέξη)
		self.τ.keyfinder(ευρετήριο["ανώμαλα"], αλέξη[::-1], αλέξη.size, ανώμαλα)
		
		#if self.τ.φωνήεν&αλέξη[0]:
		#self.τονιστής.αποτονιστής(αλέξη)
		αλέξη &= self.τ.γράμμα
		self.τ.keyfinder(ευρετήριο["ανώμαλα"], αλέξη[::-1], αλέξη.size, ανώμαλα)
		return ανώμαλα
	
	def __αναγνώριση_θέματος(self, κΛέξη, ευρετήριο):
		# Επιστρέφει {μέγεθος_θέματος:θέση_στην_λίστα_self.δ.θέματα[διάλεκτος]}
		rθέμα = κΛέξη.__deepcopy__(κΛέξη)
		if rθέμα.size and rθέμα[0]&self.τ.φωνήεν:
			rθέμα &= self.τ.γράμμα

		ευρήματα = {} # μέγεθος : αποτέλεσμα
		self.τ.keyfinder(ευρετήριο["θέματα"], rθέμα[::-1], rθέμα.size, ευρήματα)
		return ευρήματα

	def αναγνώριση(self, λέξη, δεδομένα, διάλεκτος=None):
		"""Αναγνωρίζει της ιδιότητες των λέξεων.

		Αναγνωρίζει-αναλύει την λέξη.

		Μεταβλητές:
			διάλεκτος: Φιλτράρει τα αποτελέσματα με βάση την διάλεκτο.
				Αποδεκτές τιμές "κοινή", "δημοτική".

		Επιστρέφει:
		  Μία λίστα με λεξικά, με τις ιδιότητες
		  της λέξεως βάση του μέρους του λόγου.
		  Αν δεν υπάρχει η λέξη
		  επιστρέφει άδεια λίστα.
		"""
		if not λέξη:
			#logging.info('Δεν υπάρχει λέξη.')
			return []
			
		κΛέξη = self.τ.κωδικοποιητής(λέξη)
		αναγνωρίσεις = self._αναγνώριση(κΛέξη, δεδομένα, διάλεκτος)
#		if λέξη in self.cache[διάλεκτος]:
#			#logging.info('Η λέξη «'+λέξη+'» υπάρχει στην cache.')
#			return self.cache[διάλεκτος][λέξη]
#		else:
#			κΛέξη = self.τ.κωδικοποιητής(λέξη)
#			#logging.info('Αναγνώριση λέξης «'+λέξη+'» ως κΛέξη='+str(κΛέξη))
#			αναγνωρίσεις = self._αναγνώριση(κΛέξη, διάλεκτος)
#			if len(self.cache_list[διάλεκτος])>self.cache_size:
#				#logging.info('Διαγραφή λέξης «'+self.cache_list[διάλεκτος][0]+'» γιατί ξεπεράστηκε το όριο της cache:'+str(self.cache_size))
#				del self.cache[διάλεκτος][self.cache_list[διάλεκτος][0]]
#				del self.cache_list[διάλεκτος][0]
#			#logging.info('Αναγνώριση λέξης «'+λέξη+'» στην cache.')
#			self.cache_list[διάλεκτος].append(λέξη)
#			self.cache[διάλεκτος][λέξη] = αναγνωρίσεις
		
		#logging.info('Επιστροφή '+str(len(αναγνωρίσεις))+' αναγνωρίσεων.')
		return αναγνωρίσεις

	def εύρεση_συνθετικών(self, κΛέξη, θέμα, μέγεθος_αναγνώρισης):
		συνθετικά = []
		for αύξηση in ["κΣυνθετικό", "κΑύξηση", "κΑύξηση παρακείμενου", "κΕνεστωτική αύξηση"]:
			if αύξηση in θέμα and\
				κΛέξη.size>=θέμα[αύξηση].size:
				συνθετικό = [αύξηση, θέμα[αύξηση].size, 0]
				for k in range(θέμα[αύξηση].size):
					if (1+μέγεθος_αναγνώρισης+k)>κΛέξη.size:
						break
					if (κΛέξη[-1-μέγεθος_αναγνώρισης-k]&self.τ.γράμμα)==(θέμα[αύξηση][-1-k]&self.τ.γράμμα):
						συνθετικό[2]+=1
				συνθετικά.append(συνθετικό)
		μέγιστο = [None, 0, 0]
		for συνθετικό in συνθετικά:
			if συνθετικό[1]==συνθετικό[2] and μέγιστο[1]<συνθετικό[1]:
				μέγιστο = συνθετικό
		return μέγιστο

	def __αποτελέσματα_ανώμαλων(self, κΛέξη, δεδομένα, διάλεκτος0):
		αποτελέσματα = []
		μέγεθος_κατηγορία_ανώμαλων = self.__αναγνώριση_ανώμαλων(κΛέξη, δεδομένα.ε["βασικό"])
		#logging.info('μέγεθος_κατηγορία_ανώμαλων:'+str(μέγεθος_κατηγορία_ανώμαλων))
		for μέγεθος_ανώμαλων, κατηγορίες_ανώμαλων in μέγεθος_κατηγορία_ανώμαλων.items():
			for κατηγορία_ανώμαλου in κατηγορίες_ανώμαλων:
				ανώμαλο = δεδομένα.α["ανώμαλων"][κατηγορία_ανώμαλου]
				if ανώμαλο["διάλεκτος"] not in διάλεκτος0:
					continue
				elif 'κΛέξη' in ανώμαλο and\
					ανώμαλο['κΛέξη'].size==κΛέξη.size:
					#logging.info('Προσθήκη ανώμαλου «ακριβώς» γιατί υπάρχει η κΛέξη')
					αποτελέσματα.append(ανώμαλο)
					continue
				elif 'κΚατάληξη' in ανώμαλο and\
					ανώμαλο['κΚατάληξη'].size==κΛέξη.size:
					#logging.info('Προσθήκη ανώμαλου «ακριβώς» γιατί υπάρχει η κΚατάληξη')
					αποτελέσματα.append(ανώμαλο)
					continue
				elif 'κΚατάληξη' in ανώμαλο and\
					ανώμαλο['κΚατάληξη'].size==(κΛέξη.size+1) and\
					"," in ανώμαλο['κατάληξη']:
					#logging.info('Προσθήκη ανώμαλου «ακριβώς» γιατί υπάρχει η κΚατάληξη')
					αποτελέσματα.append(ανώμαλο)
					continue
		return αποτελέσματα
	
	def _αναγνώριση(self, κΛέξη, δεδομένα, διάλεκτος1=None, με_ακρίβεια=True):
		λέξη = self.τ.απο(κΛέξη, True)
		if λέξη in self.cache:
			#logging.info('Η λέξη «'+λέξη+'» υπάρχει στην cache.')
			return self.cache[λέξη]
		elif κΛέξη.size==1 and λέξη in δεδομένα.δ["στίξη"]:
			return [δεδομένα.δ["στίξη"][λέξη]]
		if δεδομένα.δ["διάλεκτοι"][διάλεκτος1]['επεκτάσεις']:
			διάλεκτος0 = δεδομένα.δ["διάλεκτοι"][διάλεκτος1]['επεκτάσεις']+[διάλεκτος1]
		elif δεδομένα.δ["διάλεκτοι"][διάλεκτος1]['εικονική']:
			διάλεκτος0 = [δεδομένα.δ["διάλεκτοι"][διάλεκτος1]['εικονική'], διάλεκτος1]
		else:
			διάλεκτος0 = [διάλεκτος1]
		
		αποτελέσματα = self.__αποτελέσματα_ανώμαλων(κΛέξη, δεδομένα, διάλεκτος0)
		
		τόνος = self.τ.πάρε_τονισμό(κΛέξη)
		#logging.info('Τονισμός λέξης:'+str(τόνος))
		
		μέγεθος_κατηγορία_καταλήξεων = self.__αναγνώριση_κατάληξης(κΛέξη, δεδομένα.ε["βασικό"])
		#logging.info('μέγεθος_κατηγορία_καταλήξεων:'+str(μέγεθος_κατηγορία_καταλήξεων))
		
		for μέγεθος_καταλήξεων, κατηγορίες_καταλήξεων in μέγεθος_κατηγορία_καταλήξεων.items():
			μέγεθος_θέματος = κΛέξη.size-μέγεθος_καταλήξεων-1
			κΆτονο = κΛέξη[:μέγεθος_θέματος].__deepcopy__(κΛέξη[:μέγεθος_θέματος])
			self.τ.αφαίρεσε_τόνους(κΆτονο)
			μέγεθος_κατηγορία_θεμάτων = self.__αναγνώριση_θέματος(κΆτονο, δεδομένα.ε["βασικό"])
			
			for κατηγορία_κατάληξης in κατηγορίες_καταλήξεων:
				κατάληξη = δεδομένα.α["καταλήξεων"][κατηγορία_κατάληξης]
				if διάλεκτος0 and κατάληξη["διάλεκτος"] not in διάλεκτος0:
					continue
				if 'κατηγορία' not in κατάληξη:
					#logging.info('Απόριψη: Δεν υπάρχει η κατηγορία στις καταλήξεις.')
					continue
				if 'χρόνος' in κατάληξη:
					χρόνος = κατάληξη['χρόνος']
					#logging.info('Ο χρόνος των καταλήξεων είναι:'+χρόνος)
				else:
					χρόνος = None
					#logging.info('Δεν υπάρχει χρόνος στις καταλήξεις.')
				κατηγορία = κατάληξη['κατηγορία']
				
				#logging.info('Η κατηγορία των καταλήξεων είναι:'+str(κατηγορία))
				for μέγεθος_θέματος, κατηγορίες_θεμάτων in μέγεθος_κατηγορία_θεμάτων.items():
					for κατηγορία_θέματος in κατηγορίες_θεμάτων:
						#logging.info('================= NEO ΑΠΟΤΕΛΕΣΜΑ =================')
						θέμα = δεδομένα.δ["θέματα"][κατηγορία_θέματος]
						
						if διάλεκτος0 and θέμα["διάλεκτος"] not in διάλεκτος0:
							continue
						if κατάληξη["διάλεκτος"]!=θέμα["διάλεκτος"] and\
							κατάληξη["διάλεκτος"] not in διάλεκτος0:
							continue
						if κατάληξη["μέρος του λόγου"]=="μετοχή" and\
							θέμα["μέρος του λόγου"]=="ρήμα":
							#logging.info('Η κατηγορία των καταλήξεων είναι:'+str(κατηγορία))
							pass
						elif κατάληξη["μέρος του λόγου"]!=θέμα["μέρος του λόγου"]:
							#logging.info('Απόριψη: Τα μέρη του λόγου σε κατάληξη('+κατάληξη["μέρος του λόγου"]+') και θέμα-λήμμα('+θέμα["μέρος του λόγου"]+') δεν ταιριάζουν')
							continue
						
						# ;;;
						αποτέλεσμα = {}
						αποτέλεσμα.update(θέμα)
						αποτέλεσμα.update(κατάληξη)
						αποτέλεσμα["τόνος"] = τόνος
						
						# Εύρεση μεγέθους αναγνώρισης
						# για φιλτράρισμα αποτελεσμάτων μέσω μεγέθους
						μέγεθος_αναγνώρισης = κατάληξη["κΚατάληξη"].size+θέμα["κΛέξη"].size
						#logging.info('μέγεθος_αναγνώρισης κΛέξη+κΚατάληξη = '+str(μέγεθος_αναγνώρισης))
						if αποτέλεσμα["μέρος του λόγου"] in ["ρήμα", "μετοχή"]:
							#logging.info('Το μέρος του λόγου είναι '+αποτέλεσμα["μέρος του λόγου"])
							if "κΣυνθετικό" in αποτέλεσμα and "κΑύξηση" in αποτέλεσμα:
								if κΛέξη.size<(μέγεθος_αναγνώρισης+αποτέλεσμα["κΣυνθετικό"].size) and\
									κΛέξη.size<(μέγεθος_αναγνώρισης+αποτέλεσμα["κΑύξηση"].size):
									#logging.info('Απόριψη: μέγεθος_αναγνώρισης+(κΣυνθετικό ή κΑύξηση) είναι μεγαλύτερο από το μέγεθος της λέξης.')
									continue
							elif "κΣυνθετικό" in αποτέλεσμα:
								if κΛέξη.size<(μέγεθος_αναγνώρισης+αποτέλεσμα["κΣυνθετικό"].size):
									#logging.info('Απόριψη: μέγεθος_αναγνώρισης+κΣυνθετικό είναι μεγαλύτερο από το μέγεθος της λέξης.')
									continue
							
							μέγιστο = self.εύρεση_συνθετικών(κΛέξη, θέμα, μέγεθος_αναγνώρισης)
							#logging.info('μέγιστο:'+str(μέγιστο))
							
							if μέγιστο[0]:
								if μέγιστο[1]==μέγιστο[2]:
									μέγεθος_αναγνώρισης += μέγιστο[1]
									if κΛέξη.size>μέγεθος_αναγνώρισης:
										if μέγιστο[0]:
											μέγιστο2 = self.εύρεση_συνθετικών(κΛέξη, θέμα, μέγεθος_αναγνώρισης)
											if μέγιστο2[0] and μέγιστο2[1]==μέγιστο2[2]:
												μέγεθος_αναγνώρισης += μέγιστο2[1]
											μέγιστο = μέγιστο2
											#logging.info('μέγιστο:'+str(μέγιστο2))
									
									if χρόνος=="ενεστώτας" and\
										μέγιστο[0]!="κΕνεστωτική αύξηση" and\
										"κΕνεστωτική αύξηση" in αποτέλεσμα:
										#logging.info('Απόριψη: αποτελέσματος γιατί η λέξη είναι στον ενεστώτα αλλά δεν έχει συνθετικό ενεστωτικής αύξησης.')
										continue
									elif χρόνος not in ["ενεστώτας", "παρατατικός"] and\
										μέγιστο[0]=="κΕνεστωτική αύξηση":
										#logging.info('Απόριψη: αποτελέσματος γιατί η λέξη έχει συνθετικό ενεστωτικής αύξησης αλλά δεν είναι στον ενεστώτα ή παρατατικό.')
										continue
									elif χρόνος=="παρατατικός" and\
										αποτέλεσμα["διάλεκτος"]=="κοινή" and\
										μέγιστο[0] not in ["κΑύξηση", "κΕνεστωτική αύξηση"]:
										#logging.info('Απόριψη: αποτελέσματος γιατί η λέξη δεν έχει συνθετικό ενεστωτικής αύξησης ή αύξησης ενώ είναι στον παρατατικό.')
										continue
									elif χρόνος=="μέλλοντας" and\
										"κΑύξηση παρακείμενου" in αποτέλεσμα and\
										μέγιστο[0]=="κΑύξηση παρακείμενου":
										χρόνος = "συντελεσμένος μέλλοντας"
										#logging.info('Αλλαγή χρόνου από Μέλλοντα σε Συντελεσμένο Μέλλοντα γιατί η λέξη έχει συνθετικό Αύξησης Παρακειμένου.')
									elif χρόνος=="συντελεσμένος μέλλοντας" and\
										"κΑύξηση παρακείμενου" in αποτέλεσμα and\
										μέγιστο[0]!="κΑύξηση παρακείμενου":
										χρόνος = "μέλλοντας"
										#logging.info('Αλλαγή χρόνου από Συντελεσμένο Μέλλοντα σε Μέλλοντα γιατί η λέξη δεν έχει συνθετικό Αύξησης Παρακειμένου.')
								if not μέγιστο and "κΣυνθετικό" in αποτέλεσμα:
									#logging.info('Απόριψη: η λέξη δεν αρχίζει από το Συνθετικό.')
									continue
							else:
								#logging.info('Δεν υπάρχει αντιστοιχεία με τα συνθετικά.')
								if χρόνος=="ενεστώτας" and\
									"κΕνεστωτική αύξηση" in αποτέλεσμα:
									#logging.info('Απόριψη: η λέξη δεν αρχίζει από Ενεστωτική Αύξηση ενώ είναι στον ενεστώτα.')
									continue
								#elif χρόνος=="παρατατικός" and\
									#"κΑύξηση" in αποτέλεσμα and\
									#αποτέλεσμα["κΑύξηση"]!=None and\
									#αποτέλεσμα["διάλεκτος"]=="κοινή":
									#logging.info('Απόριψη: η λέξη δεν αρχίζει από Αύξηση ενώ είναι στον παρατατικό(Αρχαία).')
									#continue
								elif "κΣυνθετικό" in αποτέλεσμα:
									#logging.info('Απόριψη: η λέξη δεν αρχίζει από το Συνθετικό.')
									continue
								
							αποτέλεσμα["χρόνος"] = χρόνος
						elif αποτέλεσμα["μέρος του λόγου"] in ["επίθετο", "ουσιαστικό"]:
							if "κΣυνθετικό" in αποτέλεσμα:
								if κΛέξη.size<(μέγεθος_αναγνώρισης+αποτέλεσμα["κΣυνθετικό"].size):
									continue
								breakit = False
								for k in range(αποτέλεσμα["κΣυνθετικό"].size):
									if (αποτέλεσμα["κΣυνθετικό"][-1-k]&self.τ.γράμμα)!=(κΛέξη[-1-μέγεθος_αναγνώρισης-k]&self.τ.γράμμα):
										breakit=True
										break
									
								if breakit:
									continue
								μέγεθος_αναγνώρισης += αποτέλεσμα["κΣυνθετικό"].size
#							if κΛέξη.size>μέγεθος_αναγνώρισης:
#								αποτέλεσμα["κΣυνθετικό"] = κΛέξη[:0-μέγεθος_αναγνώρισης]
#								if self.τ.είναι_φωνήεν(αποτέλεσμα["κΣυνθετικό"]) and\
#									not self.τ.έχει_πνεύματα(αποτέλεσμα["κΣυνθετικό"]):
#									self.τ.πρόσθεσε_ψιλή(αποτέλεσμα["κΣυνθετικό"])
#								αποτέλεσμα["συνθετικό"] = self.τ.απο(αποτέλεσμα["κΣυνθετικό"])
#								μέγεθος_αναγνώρισης = κΛέξη.size
						# απόριψη μεγάλων αποτελεσμάτων
						# κανονικά δεν πρέπει να χρειαστεί ποτέ
						if κΛέξη.size<μέγεθος_αναγνώρισης:
							#logging.info('Απόριψη: μέγεθος_αναγνώρισης είναι μεγαλύτερο από το μέγεθος της λέξης.')
							continue
						
						#print(αποτέλεσμα["μέρος του λόγου"],αποτέλεσμα["μέρος του λόγου"]=="ρήμα")
#						print(αποτέλεσμα["μέρος του λόγου"]=="μετοχή",
#							"μετοχή" in αποτέλεσμα,
#							χρόνος in αποτέλεσμα["μετοχή"],
#							κατηγορία in αποτέλεσμα["μετοχή"][χρόνος]['καταλήξεις'],
#							αποτέλεσμα["μετοχή"][χρόνος]['καταλήξεις'])
						# Προσθήκη αποτελεσμάτων βάση του μέρους του λόγου
						if αποτέλεσμα["μέρος του λόγου"]=="μετοχή" and\
							χρόνος in αποτέλεσμα["μετοχή"] and\
							αποτέλεσμα["μετοχή"][χρόνος]==0:
							continue
						elif αποτέλεσμα["μέρος του λόγου"]=="ρήμα" and\
							χρόνος in αποτέλεσμα["ρήμα"] and\
							αποτέλεσμα["ρήμα"][χρόνος]!=0 and\
							κατηγορία in αποτέλεσμα["ρήμα"][χρόνος]['καταλήξεις']:
							
							#logging.info('Εύρεση έγκλισης-φωνής για το ρήμα με χρόνο '+χρόνος+' και κατηγορία '+str(κατηγορία))
							διάλεκτος = αποτέλεσμα["διάλεκτος"]
							
							for θέση in self.διάλεκτοι[διάλεκτος]["ρήμα"][χρόνος]:
								if θέμα["ρήμα"][χρόνος]['καταλήξεις'][θέση]==κατηγορία:
									αποτέλεσμα2 = {}
									αποτέλεσμα2.update(αποτέλεσμα)
									αποτέλεσμα2["φωνή"] = self.αριθμό_σε_φωνή[θέση//5]
									αποτέλεσμα2["έγκλιση"] = self.αριθμό_σε_έγκλιση[θέση%5]
									τον = αποτέλεσμα[κατάληξη["μέρος του λόγου"]][χρόνος]['τονισμοί'][θέση]
									#logging.info("φωνή: "+αποτέλεσμα2["φωνή"]+" έγκλιση:"+αποτέλεσμα2["έγκλιση"])
									if 'αριθμός' in αποτέλεσμα:
										τον2 = self.αριθμοί[αποτέλεσμα['αριθμός']]*3+self.πρόσωπα[αποτέλεσμα['πρόσωπο']]
									else:
										τον2 = 0
									if len(δεδομένα.δ["τονισμοί"]["ρήμα"][διάλεκτος])<τον or\
										len(δεδομένα.δ["τονισμοί"]["ρήμα"][διάλεκτος][τον]["τονισμοί"])<=τον2:
										#logging.info("Απόριψη: Πρόβλημα στον τονισμό ρήματος "+διάλεκτος+" "+str(τον)+" "+str(τον2))
										continue
									τον3 = δεδομένα.δ["τονισμοί"]["ρήμα"][διάλεκτος][τον]["τονισμοί"][τον2]
									τον4 = [ν//4 for ν in τον3]
									if κΛέξη.size==μέγεθος_αναγνώρισης and τόνος in τον3:
										αποτελέσματα.append(αποτέλεσμα2)
										#logging.info("Προσθήκη αποτελέσματος με ακριβή μέγεθος και τονισμό.")
										break
									elif κΛέξη.size==μέγεθος_αναγνώρισης and τόνος//4 in τον4:
										αποτελέσματα.append(αποτέλεσμα2)
										#logging.info("Προσθήκη αποτελέσματος με ακριβή μέγεθος και τονισμό στην σωστή θέση.")
										break
									elif not με_ακρίβεια and τόνος//4 in τον4:
										αποτελέσματα.append(αποτέλεσμα2)
										#logging.info("Προσθήκη αποτελέσματος με τονισμό στην σωστή θέση.")
										break
									#else:
										#logging.info("Απόριψη: Δεν προστέθηκε η λέξη γιατί κΛέξη.size="+str(κΛέξη.size)+" μέγεθος_αναγνώρισης="+str(μέγεθος_αναγνώρισης))
										#logging.info("τόνοι:"+str([τόνος, τον3])+" θέση τόνων:"+str([τόνος//4, τον4]))
						elif αποτέλεσμα["μέρος του λόγου"]=="μετοχή" and\
							"μετοχή" in αποτέλεσμα and\
							χρόνος in αποτέλεσμα["μετοχή"] and\
							κατάληξη['κατηγορία'] in αποτέλεσμα["μετοχή"][χρόνος]['καταλήξεις']:
							διάλεκτος2 = αποτέλεσμα["διάλεκτος"]
							for θέση in self.διάλεκτοι[διάλεκτος2]["μετοχή"][χρόνος]:
								if θέμα["μετοχή"][χρόνος]['καταλήξεις'][θέση]==κατηγορία:
									αποτέλεσμα2 = {}
									αποτέλεσμα2.update(αποτέλεσμα)
									αποτέλεσμα2["φωνή"] = self.αριθμό_σε_φωνή[θέση//3]#"ενεργητική"
									αποτέλεσμα2["γένος"] = self.αριθμό_σε_γένος[θέση%3]
									
									τον = αποτέλεσμα[κατάληξη["μέρος του λόγου"]][χρόνος]['τονισμοί'][θέση]
									breakit = False
									if 'πτώση' not in αποτέλεσμα:
										τον2 = 0
										if τον>len(δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος2]):
											continue
										τον3 = δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος2][τον]["τονισμοί"][τον2]
										τον4 = [ν//4 for ν in τον3]
										if κΛέξη.size==μέγεθος_αναγνώρισης and τόνος in τον3:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
										elif κΛέξη.size==μέγεθος_αναγνώρισης and τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
										elif τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
										continue
									for πτώση in αποτέλεσμα['πτώση']:
										τον2 = self.αριθμοί[αποτέλεσμα['αριθμός']]*5+self.πτώση_σε_αριθμό[πτώση]
										if τον>len(δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος2]):
											continue
										τον3 = δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος2][τον]["τονισμοί"][τον2]
										τον4 = [ν//4 for ν in τον3]
										if κΛέξη.size==μέγεθος_αναγνώρισης and τόνος in τον3:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
										elif κΛέξη.size==μέγεθος_αναγνώρισης and τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
										elif τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											breakit = True
									if breakit:
										break
						elif αποτέλεσμα["μέρος του λόγου"]=="επίθετο" and\
							κατηγορία in αποτέλεσμα['κατηγορίες']:
							
							for θέση in range(3):
								if θέμα["κατηγορίες"][θέση]==κατηγορία:
									αποτέλεσμα2 = {}
									αποτέλεσμα2.update(αποτέλεσμα)
									αποτέλεσμα2["γένος"] = self.αριθμό_σε_γένος[θέση%3]
									
									τον = αποτέλεσμα['τονισμοί'][θέση]
									breakit = False
									διάλεκτος = αποτέλεσμα['διάλεκτος']
									άθροισμα = len(αποτέλεσμα["λήμμα"])+len(αποτέλεσμα["κατάληξη"])
									if αποτέλεσμα["συνθετικό"]:
										άθροισμα += len(αποτέλεσμα["συνθετικό"])
									
									if κΛέξη.size!=άθροισμα:
										continue
									for πτώση in αποτέλεσμα['πτώση']:
										τον2 = self.αριθμοί[αποτέλεσμα['αριθμός']]*5+self.πτώση_σε_αριθμό[πτώση]
										τον3 = δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος][τον]["τονισμοί"][τον2]
										τον4 = [ν//4 for ν in τον3]
										if κΛέξη.size==μέγεθος_αναγνώρισης and τόνος in τον3:
											αποτελέσματα.append(αποτέλεσμα2)
											break
										elif κΛέξη.size==μέγεθος_αναγνώρισης and τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											break
										elif τόνος//4 in τον4:
											αποτελέσματα.append(αποτέλεσμα2)
											
						elif αποτέλεσμα["μέρος του λόγου"]=="ουσιαστικό" and\
							θέμα['κατηγορία']==κατάληξη['κατηγορία']:
							τον = αποτέλεσμα['τονισμός']
							αποτέλεσμα['κατηγορία'] = θέμα['κατηγορία']
							διάλεκτος = αποτέλεσμα['διάλεκτος']
							άθροισμα = len(αποτέλεσμα["λήμμα"])+len(αποτέλεσμα["κατάληξη"])
							if αποτέλεσμα["συνθετικό"]:
								άθροισμα += len(αποτέλεσμα["συνθετικό"])
							
							if κΛέξη.size!=άθροισμα:
								continue
							for πτώση in αποτέλεσμα['πτώση']:
								τον2 = self.αριθμοί[αποτέλεσμα['αριθμός']]*5+self.πτώση_σε_αριθμό[πτώση]
								if not len(δεδομένα.δ["τονισμοί"]["ουσιαστικό"][διάλεκτος][τον]["τονισμοί"]):
									continue
								τον3 = δεδομένα.δ["τονισμοί"]["ουσιαστικό"][διάλεκτος][τον]["τονισμοί"][τον2]
								τον4 = [ν//4 for ν in τον3]
								if κΛέξη.size==μέγεθος_αναγνώρισης and τόνος in τον3:
									αποτελέσματα.append(αποτέλεσμα)
								elif κΛέξη.size==μέγεθος_αναγνώρισης and τόνος//4 in τον4:
									αποτελέσματα.append(αποτέλεσμα)
								elif τόνος//4 in τον4:
									αποτελέσματα.append(αποτέλεσμα)
		
		ν = 0
		while ν<len(αποτελέσματα):
			if αποτελέσματα[ν]["μέρος του λόγου"] in ["ουσιαστικό", "μετοχή", "ρήμα"]:
				rmv = False
				for ζ in range(ν):
					if αποτελέσματα[ζ]["μέρος του λόγου"]=="ουσιαστικό" and\
						αποτελέσματα[ν].get("κατάληξη")==αποτελέσματα[ζ].get("κατάληξη") and\
						αποτελέσματα[ν].get("λήμμα")==αποτελέσματα[ζ].get("λήμμα") and\
						αποτελέσματα[ν].get("γένος")==αποτελέσματα[ζ].get("γένος") and\
						αποτελέσματα[ν].get("κατηγορία")==αποτελέσματα[ζ].get("κατηγορία") and\
						αποτελέσματα[ν].get("πτώση")==αποτελέσματα[ζ].get("πτώση") and\
						αποτελέσματα[ν]["διάλεκτος"]==αποτελέσματα[ζ]["διάλεκτος"] and\
						αποτελέσματα[ν].get("τονισμός")==αποτελέσματα[ζ].get("τονισμός") and\
						αποτελέσματα[ν].get("αριθμός")==αποτελέσματα[ζ].get("αριθμός"):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="ρήμα" and\
						"κΣυνθετικό" in αποτελέσματα[ζ] and\
						αποτελέσματα[ζ]["κΣυνθετικό"].size == 0:
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="μετοχή" and\
						αποτελέσματα[ν].get("κατάληξη")==αποτελέσματα[ζ].get("κατάληξη") and\
						αποτελέσματα[ν].get("λήμμα")==αποτελέσματα[ζ].get("λήμμα") and\
						αποτελέσματα[ν].get("γένος")==αποτελέσματα[ζ].get("γένος") and\
						αποτελέσματα[ν]["κατηγορία"]==αποτελέσματα[ζ]["κατηγορία"] and\
						αποτελέσματα[ν].get("πτώση")==αποτελέσματα[ζ].get("πτώση") and\
						αποτελέσματα[ν].get("φωνή")==αποτελέσματα[ζ].get("φωνή") and\
						αποτελέσματα[ν].get("αύξηση")==αποτελέσματα[ζ].get("αύξηση") and\
						αποτελέσματα[ν]["διάλεκτος"]==αποτελέσματα[ζ]["διάλεκτος"] and\
						αποτελέσματα[ν]["χρόνος"]==αποτελέσματα[ζ]["χρόνος"] and\
						αποτελέσματα[ν].get("τόνος")==αποτελέσματα[ζ].get("τόνος") and\
						αποτελέσματα[ν].get("αριθμός")==αποτελέσματα[ζ].get("αριθμός"):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="ρήμα" and\
						αποτελέσματα[ν].get("κατάληξη")==αποτελέσματα[ζ].get("κατάληξη") and\
						αποτελέσματα[ν].get("λήμμα")==αποτελέσματα[ζ].get("λήμμα") and\
						αποτελέσματα[ν]["κατηγορία"]==αποτελέσματα[ζ]["κατηγορία"] and\
						αποτελέσματα[ν].get("πρόσωπο")==αποτελέσματα[ζ].get("πρόσωπο") and\
						αποτελέσματα[ν].get("έγκλιση")==αποτελέσματα[ζ].get("έγκλιση") and\
						αποτελέσματα[ν].get("ρήμα")==αποτελέσματα[ζ].get("ρήμα") and\
						αποτελέσματα[ν].get("φωνή")==αποτελέσματα[ζ].get("φωνή") and\
						αποτελέσματα[ν].get("αύξηση")==αποτελέσματα[ζ].get("αύξηση") and\
						αποτελέσματα[ν]["διάλεκτος"]==αποτελέσματα[ζ]["διάλεκτος"] and\
						αποτελέσματα[ν]["χρόνος"]==αποτελέσματα[ζ]["χρόνος"] and\
						αποτελέσματα[ν].get("τόνος")==αποτελέσματα[ζ].get("τόνος") and\
						αποτελέσματα[ν].get("αριθμός")==αποτελέσματα[ζ].get("αριθμός"):
						rmv = True
				if rmv:
					del αποτελέσματα[ν]
					ν-=1
			ν+=1
		
		if len(self.cache_list)>self.cache_size:
			del_lex = self.cache_list[0]
			if del_lex in self.cache:
				del self.cache[del_lex]
			del self.cache_list[0]
		self.cache_list.append(λέξη)
		self.cache[λέξη] = αποτελέσματα
			
		return αποτελέσματα

	def _φίλτρο_κατηγοριών(self, αποτελέσματα, μτλ=None, διάλεκτος=None):
		ν = 0
		while ν<len(αποτελέσματα):
			if αποτελέσματα[ν]["μέρος του λόγου"] in ["άρθρο", "ουσιαστικό", "επίθετο", "μετοχή", "ρήμα"]:
				rmv = False
				for ζ in range(ν):
					if αποτελέσματα[ζ]["μέρος του λόγου"]=="άρθρο" and\
						αποτελέσματα[ν]["ΑΑ"]==αποτελέσματα[ζ]["ΑΑ"] and\
						(αποτελέσματα[ν]["διάλεκτος"]==αποτελέσματα[ζ]["διάλεκτος"] or\
						αποτελέσματα[ν]["διάλεκτος"]!=διάλεκτος):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="ουσιαστικό" and\
						αποτελέσματα[ν]["Κλειδί"]==αποτελέσματα[ζ]["Κλειδί"] and\
						αποτελέσματα[ν].get("ανώμαλο")==αποτελέσματα[ζ].get("ανώμαλο"):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="επίθετο" and\
						αποτελέσματα[ν]["Κλειδί"]==αποτελέσματα[ζ]["Κλειδί"] and\
						αποτελέσματα[ν].get("ανώμαλο")==αποτελέσματα[ζ].get("ανώμαλο"):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="μετοχή" and\
						αποτελέσματα[ν]["Κλειδί"]==αποτελέσματα[ζ]["Κλειδί"] and\
						αποτελέσματα[ν].get("ανώμαλο")==αποτελέσματα[ζ].get("ανώμαλο"):
						rmv = True
					elif αποτελέσματα[ζ]["μέρος του λόγου"]=="ρήμα" and\
						αποτελέσματα[ν]["Κλειδί"]==αποτελέσματα[ζ]["Κλειδί"] and\
						αποτελέσματα[ν].get("ανώμαλο")==αποτελέσματα[ζ].get("ανώμαλο"):
						rmv = True
				if rmv:
					del αποτελέσματα[ν]
					ν-=1
			else:
				del αποτελέσματα[ν]
				ν-=1
			ν+=1