#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the dimitriadis dimitris nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

τύπωσε = print
κείμενο = str
λίστα = list
μήκος = len
εύρος = range
ακέραιος = int
τίποτα = None
ναι = True
όχι = False

class Αντωνυμίες():
	def __init__(self, τονιστής, δεδομένα, αναγνώριση):
		self._δεδομένα = δεδομένα
		self._αναγνώριση = αναγνώριση
		self.πτώση_σε_αριθμό  = {   "ονομαστική":0,   "γενική":1,   "δοτική":2,   "αιτιατική":3,   "κλητική":4 }
		self.αριθμό_σε_πτώση  = { 0:"ονομαστική",   1:"γενική",   2:"δοτική",   3:"αιτιατική",   4:"κλητική"   }
		self.αριθμοί          = {   "ενικός":0,   "δυϊκός":5,    "πληθυντικός":10 }
		self.αριθμό_σε_αριθμό = { 0:"ενικός",   1:"δυϊκός",   2:"πληθυντικός"    }
		self.γένος_σε_αριθμό  = {"αρσενικό":0,   "θηλυκό":1, "ουδέτερο":2, "κανένα":0, None:0}
		self.πρόσωπα = ["α", "β", "γ", "κανένα", None]
		
		self.τονιστής = τονιστής
		self.τ = self.τονιστής
		
		self.step_cache = {"κοινή":{}, "δημοτική":{}}
		self.step_cache_list = {"κοινή":[], "δημοτική":[]}
		self.λέξεις = []
		self.κατηγορίες = {}
			
	def _πλήρη_κλίση(self, αναγνώριση):
		αποτέλεσμα = {}
		
		λέξη = αναγνώριση.get('κατάληξη')
		πρόσωπο = αναγνώριση.get('πρόσωπο')
		
		διάλεκτος = αναγνώριση['διάλεκτος']
		αντωνυμία = αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]
		κτήτορες = αναγνώριση["μεταδεδομένα"].get("κτήτορες")
		if κτήτορες:
			κτήτορες = κτήτορες[0]
		τύπος = αναγνώριση["μεταδεδομένα"].get("τύπος")
		if τύπος:
			τύπος = τύπος[0]
		
		if πρόσωπο:
			for πρόσωπο in ["α", "β", "γ"]:
				αποτέλεσμα[πρόσωπο] = {}
				for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
					αποτέλεσμα[πρόσωπο][γένος] = []
					for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
						for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
							αποτέλεσμα[πρόσωπο][γένος].append(
								self.κλίνε(λέξη, αντωνυμία, αριθμός, πτώση, πρόσωπο, 
													διάλεκτος, γένος, τύπος, κτήτορες))
		else:
			for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
				αποτέλεσμα[γένος] = []
				for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
					for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
						αποτέλεσμα[γένος].append(
								self.κλίνε(λέξη, αντωνυμία, αριθμός, πτώση, πρόσωπο, 
													διάλεκτος, γένος, τύπος, κτήτορες))
		return αποτέλεσμα
	
	def _κλίνε(self, κΛέξη=None, αντωνυμία=None, 
					αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', 
					τύπος='δυνατός', κτήτορες=None):
		κΑποτελέσματα = []
		if not αντωνυμία:
			return κΑποτελέσματα
		elif αντωνυμία=="προσωπική":
			κΑποτελέσματα = self._προσωπικές(αριθμός, πτώση, πρόσωπο, διάλεκτος, γένος, τύπος)
		elif αντωνυμία=="δεικτική":
			κΑποτελέσματα = self._δεικτικές(αριθμός, πτώση, διάλεκτος, γένος, κΛέξη)
		elif αντωνυμία=="οριστική":
			κΑποτελέσματα = self._οριστικές(αριθμός, πτώση, διάλεκτος, γένος)
		elif αντωνυμία=="κτητική":
			κΑποτελέσματα = self._κτητικές(αριθμός, πτώση, πρόσωπο, διάλεκτος, γένος, κτήτορες)
		elif αντωνυμία=="αυτοπαθής":
			κΑποτελέσματα = self._αυτοπαθής(αριθμός, πτώση, πρόσωπο, διάλεκτος, γένος)
		elif αντωνυμία=="αλληλοπαθητική":
			κΑποτελέσματα = self._αλληλοπαθητικές(αριθμός, πτώση, διάλεκτος, γένος)
		elif αντωνυμία=="ερωτηματική":
			κΑποτελέσματα = self._ερωτηματικές(αριθμός, πτώση, διάλεκτος, γένος, κΛέξη)
		elif αντωνυμία=="αόριστη":
			κΑποτελέσματα = self._αόριστες(αριθμός, πτώση, διάλεκτος, γένος, κΛέξη)
		elif αντωνυμία=="επιμεριστική":
			κΑποτελέσματα = self._επιμεριστικές(αριθμός, πτώση, διάλεκτος, γένος, κΛέξη)
		elif αντωνυμία=="αναφορική":
			κΑποτελέσματα = self._αναφορικές(αριθμός, πτώση, διάλεκτος, γένος, κΛέξη)
		
		return κΑποτελέσματα
	
	def κλίνε(self, λέξη=None, αντωνυμία=None, 
					αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', 
					τύπος='δυνατός', κτήτορες=None):
		αποτελέσματα = []
		if not αντωνυμία:
			return αποτελέσματα
		elif αντωνυμία=="προσωπική":
			αποτελέσματα = self.προσωπικές(αριθμός, πτώση, πρόσωπο, διάλεκτος, γένος, τύπος)
		elif αντωνυμία=="δεικτική":
			αποτελέσματα = self.δεικτικές(αριθμός, πτώση, διάλεκτος, γένος, λέξη)
		elif αντωνυμία=="οριστική":
			αποτελέσματα = self.οριστικές(αριθμός, πτώση, διάλεκτος, γένος)
		elif αντωνυμία=="κτητική":
			αποτελέσματα = self.κτητικές(αριθμός, πτώση, πρόσωπο,	διάλεκτος, γένος, κτήτορες)
		elif αντωνυμία=="αυτοπαθής":
			αποτελέσματα = self.αυτοπαθής(αριθμός, πτώση, πρόσωπο, διάλεκτος, γένος)
		elif αντωνυμία=="αλληλοπαθητική":
			αποτελέσματα = self.αλληλοπαθητικές(αριθμός, πτώση, διάλεκτος, γένος)
		elif αντωνυμία=="ερωτηματική":
			αποτελέσματα = self.ερωτηματικές(αριθμός, πτώση, διάλεκτος, γένος, λέξη)
		elif αντωνυμία=="αόριστη":
			αποτελέσματα = self.αόριστες(αριθμός, πτώση, διάλεκτος, γένος, λέξη)
		elif αντωνυμία=="επιμεριστική":
			αποτελέσματα = self.επιμεριστικές(αριθμός, πτώση, διάλεκτος, γένος, λέξη)
		elif αντωνυμία=="αναφορική":
			αποτελέσματα = self.αναφορικές(αριθμός, πτώση, διάλεκτος, γένος, λέξη)
		
		return αποτελέσματα
		
	def προσωπικές(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', τύπος='δυνατός'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				πρόσωπο in self.πρόσωπα and γένος in self.γένος_σε_αριθμό and\
			τύπος in ['δυνατός', "αδύνατος"] and\
			διάλεκτος in list(self._δεδομένα.δ["διάλεκτοι"])+[None]):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['προσωπική'][τύπος]
		αποτελέσματα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
		if γένος==None:
			γένος="αρσενικό"
		if πρόσωπο not in αποτελέσματα["καταλήξεις"]:
			return []
		
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"][θέση]
		
		return αποτελέσματα
	
	def _προσωπικές(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', τύπος='δυνατός'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				πρόσωπο in self.πρόσωπα and γένος in self.γένος_σε_αριθμό and\
			τύπος in ['δυνατός', "αδύνατος"] and\
			διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['προσωπική'][τύπος]
		if γένος==None:
			γένος="αρσενικό"
		αποτελέσματα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][πρόσωπο][γένος]["κΚαταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def δεικτικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', λέξη=None):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and λέξη and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		αποτελέσματα = []
		
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["διάλεκτος"]!=διάλεκτος or\
				αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='δεικτική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]["καταλήξεις"][γένος]["καταλήξεις"]
												
			θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
			αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα
	
	def _δεικτικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', κΛέξη=None):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		αποτελέσματα = []
		
		αναγνωρίσεις = self._αναγνώριση._αναγνώριση(κΛέξη, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='δεικτική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			αποτέλεσμα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
			θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
			αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα
	
	def οριστικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		αποτελέσματα = []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['οριστική']
		αποτελέσματα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα["καταλήξεις"][γένος]["καταλήξεις"][θέση]
		
		return αποτελέσματα
	
	def _οριστικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		αποτελέσματα = []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['οριστική']
		αποτελέσματα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def κτητικές(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', κτήτορες=None):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"] and\
				κτήτορες in ["ένας", "πολλοί", None] and\
				πρόσωπο in self.πρόσωπα):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['κτητική']
		if κτήτορες and διάλεκτος=="κοινή":
			κατηγορία = κατηγορία[κτήτορες]
		if γένος==None:
			γένος="αρσενικό"
		
		αποτελέσματα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def _κτητικές(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό', κτήτορες=None):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"] and\
				κτήτορες in ["ένας", "πολλοί", None] and\
				πρόσωπο in self.πρόσωπα):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['κτητική']
		if κτήτορες and διάλεκτος=="κοινή":
			κατηγορία = κατηγορία[κτήτορες]
		if γένος==None:
			γένος="αρσενικό"
		
		αποτελέσματα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][πρόσωπο][γένος]["κΚαταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def αυτοπαθής(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['αυτοπαθής']
		αποτελέσματα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα["καταλήξεις"][πρόσωπο][γένος]["καταλήξεις"][θέση]
		
		return αποτελέσματα
	
	def _αυτοπαθής(self, αριθμός='ενικός', πτώση='ονομαστική', πρόσωπο='α', 
					διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['αυτοπαθής']
		αποτελέσματα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][πρόσωπο][γένος]["κΚαταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def αλληλοπαθητικές(self, αριθμός='ενικός', πτώση='ονομαστική', διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος=="κοινή"):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['αλληλοπαθητική']
		αποτελέσματα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]["καταλήξεις"][γένος]["καταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def _αλληλοπαθητικές(self, αριθμός='ενικός', πτώση='ονομαστική', διάλεκτος="κοινή", γένος='αρσενικό'):
		if not (αριθμός in self.αριθμοί and πτώση in self.πτώση_σε_αριθμό and\
				γένος in self.γένος_σε_αριθμό and\
				διάλεκτος=="κοινή"):
			return []
		
		κατηγορία = self._δεδομένα.κατηγορίες_αντωνυμιών[διάλεκτος]['αλληλοπαθητική']
		αποτελέσματα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
		θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
		αποτελέσματα = αποτελέσματα[θέση]
		
		return αποτελέσματα
	
	def ερωτηματικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', λέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		αποτελέσματα = []
		
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["διάλεκτος"]!=διάλεκτος:
				continue
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='ερωτηματική':
				continue
			
			ΑΑ = αναγνώριση["ΑΑ"]
			αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][ΑΑ]
			if "γένος" not in αναγνώριση or "κατάληξη" in αποτέλεσμα:
				αποτελέσματα.append(αποτέλεσμα["κατάληξη"])
			else:
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα["καταλήξεις"][γένος]["καταλήξεις"][θέση]
			
		return αποτελέσματα
	
	def _ερωτηματικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', κΛέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		αποτελέσματα = []
		
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='ερωτηματική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			if "γένος" not in αναγνώριση:
				αποτελέσματα.append(self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]["κΚατάληξη"])
			else:
				αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα
	
	def αόριστες(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', λέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		αποτελέσματα = []
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["διάλεκτος"]!=διάλεκτος:
				continue
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='αόριστη':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
			if "γένος" not in αναγνώριση:
				αποτελέσματα.append(αποτέλεσμα["κατάληξη"])
			else:
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα["καταλήξεις"][γένος]["καταλήξεις"][θέση]
			
		return αποτελέσματα
	
	def _αόριστες(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', κΛέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		αποτελέσματα = []
		αναγνωρίσεις = self.αναγνώριση(λέξη, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='αόριστη':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			if "γένος" not in αναγνώριση:
				αποτελέσματα.append(self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία]["κΚατάληξη"])
			else:
				αποτέλεσμα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα
	
	def _επιμεριστικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', κΛέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		if not γένος:
			γένος = "αρσενικό"
		if not αριθμός:
			αριθμός = "ενικός"
		if not πτώση:
			πτώση = "ονομαστική"
		
		αποτελέσματα = []
		αναγνωρίσεις = self.αναγνώριση(λέξη, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='επιμεριστική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			if "γένος" not in αναγνώριση:
				αποτελέσματα.append(self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία]["κΚατάληξη"])
			else:
				αποτέλεσμα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα
	
	def επιμεριστικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', λέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		if not γένος:
			γένος = "αρσενικό"
		if not αριθμός:
			αριθμός = "ενικός"
		if not πτώση:
			πτώση = "ονομαστική"
		
		αποτελέσματα = []
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='επιμεριστική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
			if 'κατάληξη' in αποτέλεσμα:
				αποτελέσματα.append(αποτέλεσμα["κατάληξη"])
			elif "γένος" not in αναγνώριση:
				αποτελέσματα.append(αποτέλεσμα["κατάληξη"])
			else:
				θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα["καταλήξεις"][γένος]["καταλήξεις"][θέση]
			
		return αποτελέσματα
	
	def αναφορικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', λέξη=None):
		if not (λέξη and διάλεκτος in list(self._δεδομένα.δ["διάλεκτοι"])+[None]):
			return []
		
		αποτελέσματα = []
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self._δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["διάλεκτος"]!=διάλεκτος or\
				αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if 'αναφορική' not in αναγνώριση["Μεταδεδομένα"]["τύπος αντωνυμίας"]:
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			αποτέλεσμα = self._δεδομένα.δ["ανώμαλα"]["αντωνυμία"][διάλεκτος][κατηγορία]
			
			if "κατάληξη" in αποτέλεσμα:
				αποτελέσματα.append(αποτέλεσμα["κατάληξη"])
			else:
				if not γένος and "γένος" in αναγνώριση:
					γένος2 = αναγνώριση["γένος"]
				else:
					γένος2 = γένος
				if not αριθμός and "αριθμός" in αναγνώριση:
					αριθμός2 = αναγνώριση["αριθμός"]
				else:
					αριθμός2 = αριθμός
				if not πτώση:
					πτώση = αναγνώριση["πτώση"]
				
				θέση = self.αριθμοί[αριθμός2]+self.πτώση_σε_αριθμό[πτώση]
				αποτελέσματα += αποτέλεσμα["καταλήξεις"][γένος2]["καταλήξεις"][θέση]
			
		return list(set(αποτελέσματα))
	
	def _αναφορικές(self, αριθμός='ενικός', πτώση='ονομαστική', 
					διάλεκτος="κοινή", γένος='αρσενικό', κΛέξη=None):
		if not (λέξη and διάλεκτος in [None, "κοινή", "δημοτική"]):
			return []
		
		αποτελέσματα = []
		αναγνωρίσεις = self._αναγνώριση.αναγνώριση(λέξη, self.δεδομένα, διάλεκτος)
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="αντωνυμία":
				continue
			if αναγνώριση["μεταδεδομένα"]["τύπος αντωνυμίας"][0]!='αναφορική':
				continue
			
			κατηγορία = αναγνώριση["κατηγορία"]
			if "γένος" not in αναγνώριση:
				αποτελέσματα.append(self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία]["κΚατάληξη"])
			else:
				if not γένος:
					γένος = αναγνώριση["γένος"]
				if not αριθμός:
					αριθμός = αναγνώριση["αριθμός"]
				if not πτώση:
					πτώση = αναγνώριση["πτώση"]
			αποτέλεσμα = self._δεδομένα.ανώμαλα["αντωνυμία"][διάλεκτος][κατηγορία][γένος]["κΚαταλήξεις"]
			θέση = self.αριθμοί[αριθμός]+self.πτώση_σε_αριθμό[πτώση]
			αποτελέσματα += αποτέλεσμα[θέση]
			
		return αποτελέσματα

	def _stepsearch(self, κΛέξη, bΛέξη, κμέγεθος, bμέγεθος, άθροισμα, φράση=1, διάλεκτος=None):
		αποτελέσματα = {}
		
		if διάλεκτος:
			τΔιάλεκτος = διάλεκτος
		else:
			τΔιάλεκτος = self.διάλεκτος
			
		for ευρετήριο, κλέξη, μέγεθος in [[self.ευρετήριο, κΛέξη, κμέγεθος], 
												[self.bευρετήριο, bΛέξη, bμέγεθος]]:
			if αποτελέσματα:
				break
			
			ακ = {}
			λεξικά = self.τ.stepfinder(ευρετήριο[τΔιάλεκτος][φράση], κλέξη, μέγεθος, ακ)
			
			acc2 = []
			self.τ.rv(λεξικά, acc2, 0)
			
			for a in acc2:
				αντ = int((a['κΛέξη'][:κμέγεθος] & 255).sum())
				αντ = abs(αντ-άθροισμα)+abs(a['κΛέξη'].size-κμέγεθος)
				
				if αντ not in αποτελέσματα:
					αποτελέσματα[αντ] = {}
				if a['αντωνυμία'] in αποτελέσματα[αντ]:
					αποτελέσματα[αντ][a['αντωνυμία']] += a
				else:
					αποτελέσματα[αντ][a['αντωνυμία']] = [a]
		
		return αποτελέσματα
	