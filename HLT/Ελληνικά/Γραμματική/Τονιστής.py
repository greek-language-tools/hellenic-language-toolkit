#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the dimitriadis dimitris nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from numpy import zeros, array, int32, empty, ndarray
import numpy.ma as ma
from multiprocessing import Pool

τύπωσε = print
κείμενο = str
λίστα = list
μήκος = len
εύρος = range
ακέραιος = int

class Τονιστής():
	def __init__(self):
		self.περισπωμένη_bit = 1
		self.βαρεία_bit = 2
		self.απο = self.απόκωδικοποιητής
		self.tmp = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], int32)
		self.αντιστοιχίες = {
			'ς':'σ', 'ϐ':'β', 'ϑ':'θ', 'ϒ':'Υ', 'ϓ':'Ύ', 'ϔ':'Ϋ', 'ϕ':'Φ', 'Ϛ':'σ', 'ϛ':'σ',
			'ϰ':'κ', 'ϱ':'ρ', 'ϲ':'σ', 'ϴ':'θ', 'ϵ':'ε', 'Ϲ':'Σ', 'Ϻ':'Μ', 'ϻ':'Μ', 'ϼ':'ρ',
			'ᾰ':'α', 'ᾱ':'α', 'Ᾰ':'Α', 'Ᾱ':'Α', 'Ῐ':'Ι', 'Ῑ':'Ι', 'Ῠ':'Υ', 'Ῡ':'Υ', 'ῠ':'υ',
			'ῡ':'υ', 'ῐ':'ι', 'ῑ':'ι',
			# περίεργα
			'ΐ':'ΐ', 'Ί':'Ί', 'ΰ':'ΰ', 'Ύ':'Ύ', 'έ':'έ',
			'ί':'ί', 'ύ':'ύ', 'Ώ':'Ώ', 'ά':'ά', 'ή':'ή', "ή":"ή",
			'ό':'ό', 'ώ':'ώ', 'Ό':'Ό', 'Ά':'Ά', 'Έ':'Έ',
			'Ή':'Ή',
			# αγγλικά
			'E':'Ε', 'T':'Τ', 'Y':'Υ', "H":"Η", 'I':'Ι', 'O':'Ο', 'A':'Α',
			'H':'Η', 'K':'Κ',
			'Z':'Ζ', 'X':'Χ', 'B':'Β', 'N':'Ν', 'M':'Μ', 'o':'ο', 'v':'ν',
			'i':'ι', 'h':'η', 'a':'α', 'x':'χ',
			# greeklish
			't':'τ', 'k':'κ', 'z':'ζ', 's':'σ', 'd':'δ', 'r':'ρ', 'b':'β',
			"e":"ε", "r":"ρ", "t":"τ", "y":"υ", "u":"θ", "p":"π",
			"s":"σ", "d":"δ", "f":"φ", "g":"γ", "j":"ξ", "k":"κ", "l":"λ",
			"z":"ζ", "c":"ψ", "v":"ω", "b":"β", "n":"ν", "m":"μ", 
			
			"R":"Ρ", "U":"Θ", "P":"Π",
			"S":"Σ", "D":"Δ", "F":"Φ", "G":"Γ", "J":"Ξ", "L":"Λ",
			"C":"Ψ", "V":"Ω",
			
			# ιαπωνικά
			'ア':'Α', 'あ':'α',
			}
		νέοι_κωδικοί = dict((ord(k), ord(v)) for k, v in self.αντιστοιχίες.items())
		self.αντιστοιχίες = νέοι_κωδικοί
		
		φωνήεν =       int('00' + '000' + '00' + '0' + '0' + '1' + '00000', 2)
		υπογεγραμένη = int('00' + '000' + '00' + '0' + '1' + '0' + '00000', 2)
		δασύα =        int('00' + '000' + '01' + '0' + '0' + '0' + '00000', 2)
		ψιλή =         int('00' + '000' + '10' + '0' + '0' + '0' + '00000', 2)
		οξεία        = int('00' + '100' + '00' + '0' + '0' + '0' + '00000', 2)
		περισπωμένη =  int('00' + '010' + '00' + '0' + '0' + '0' + '00000', 2)
		βαρεία      =  int('00' + '001' + '00' + '0' + '0' + '0' + '00000', 2)
		δίψηφο1 =      int('10' + '000' + '00' + '0' + '0' + '0' + '00000', 2)
		δίψηφο2 =      int('01' + '000' + '00' + '0' + '0' + '0' + '00000', 2)
		διαλυτικά =    int('00' + '000' + '00' + '0' + '1' + '0' + '00000', 2)
		κεφαλαίο =     int('00' + '000' + '00' + '1' + '0' + '0' + '00000', 2)
		τονισμένο =    int('00' + '111' + '00' + '0' + '0' + '0' + '00000', 2)
		πνεύματα =     int('00' + '000' + '11' + '0' + '0' + '0' + '00000', 2)
		δίψηφο =       int('11' + '000' + '00' + '0' + '0' + '0' + '00000', 2)
		self.γράμμα =  int('00' + '000' + '00' + '0' + '0' + '0' + '11111', 2)
		self.γράμμα_δίψηφο =  self.γράμμα+δίψηφο
		self.χωρίς_τόνους =  int('11' + '000' + '11' + '1' + '1' + '1' + '11111', 2)
		self.χωρίς_τόνους_πνεύματα =  int('11' + '000' + '00' + '1' + '1' + '1' + '11111', 2)
		self.χωρίς_κεφαλαίο =     int('11' + '111' + '11' + '0' + '1' + '1' + '11111', 2)
		self.φωνήεν = φωνήεν
		self.δίψηφο = δίψηφο
		self.κεφαλαίο = κεφαλαίο
		self.τονισμένο = τονισμένο
		self.πνεύματα = πνεύματα
		self.διαλυτικά = διαλυτικά
		self.δίψηφο1, self.δίψηφο2 = δίψηφο1, δίψηφο2
		self.δασύα, self.ψιλή = δασύα, ψιλή
		self.οξεία, self.περισπωμένη, self.βαρεία = οξεία, περισπωμένη, βαρεία
		
		self.κωδικοί = {# 16 bit
			#   2:φωνήεν,
			# 3-4:δίψυφο: 00-όχι, 10-ναί1, 01-ναί2
			# 5-6: 00-τπτ, 01-βαρία, 10-οξεία, 11-περισπομένη
			# 7-8: 00-01-τπτ, 10-δασύα, 11-ψιλή
			#   9:διαλυτικά
			#  10:υπογεγραμένη,
			#  11:κεφαλαίο,
			#  12-16:24γραμ
			'α': 1 + φωνήεν,
			'ᾳ': 1 + φωνήεν + υπογεγραμένη,
			'ά': 1 + φωνήεν + οξεία,
			'ᾴ': 1 + φωνήεν + οξεία + υπογεγραμένη,
			'ὰ': 1 + φωνήεν + βαρεία,
			'ᾲ': 1 + φωνήεν + βαρεία + υπογεγραμένη,
			'ᾶ': 1 + φωνήεν + περισπωμένη,
			'ᾷ': 1 + φωνήεν + περισπωμένη + υπογεγραμένη,
			'ἁ': 1 + φωνήεν + δασύα,
			'ᾁ': 1 + φωνήεν + δασύα + υπογεγραμένη,
			'ἅ': 1 + φωνήεν + δασύα + οξεία,
			'ᾅ': 1 + φωνήεν + δασύα + οξεία + υπογεγραμένη,
			'ἃ': 1 + φωνήεν + δασύα + βαρεία,
			'ᾃ': 1 + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'ἇ': 1 + φωνήεν + δασύα + περισπωμένη,
			'ᾇ': 1 + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'ἀ': 1 + φωνήεν + ψιλή,
			'ᾀ': 1 + φωνήεν + ψιλή + υπογεγραμένη,
			'ἄ': 1 + φωνήεν + ψιλή + οξεία,
			'ᾄ': 1 + φωνήεν + ψιλή + οξεία + υπογεγραμένη,
			'ἂ': 1 + φωνήεν + ψιλή + βαρεία,
			'ᾂ': 1 + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'ἆ': 1 + φωνήεν + ψιλή + περισπωμένη,
			'ᾆ': 1 + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,
			'β': 2, 'γ': 3, 'δ': 4,
			'ε': 5 + φωνήεν,
			'έ': 5 + φωνήεν + οξεία,
			'ὲ': 5 + φωνήεν + βαρεία,
			'ἑ': 5 + φωνήεν + δασύα,
			'ἕ': 5 + φωνήεν + δασύα + οξεία,
			'ἓ': 5 + φωνήεν + δασύα + βαρεία,
			'ἐ': 5 + φωνήεν + ψιλή,
			'ἔ': 5 + φωνήεν + ψιλή + οξεία,
			'ἒ': 5 + φωνήεν + ψιλή + βαρεία,
			'ζ': 6,
			'η': 7 + φωνήεν,
			'ῃ': 7 + φωνήεν + υπογεγραμένη,
			'ή': 7 + φωνήεν + οξεία,
			'ῄ': 7 + φωνήεν + οξεία + υπογεγραμένη,
			'ὴ': 7 + φωνήεν + βαρεία,
			'ῂ': 7 + φωνήεν + βαρεία + υπογεγραμένη,
			'ῆ': 7 + φωνήεν + περισπωμένη,
			'ῇ': 7 + φωνήεν + περισπωμένη + υπογεγραμένη,
			'ἡ': 7 + φωνήεν + δασύα,
			'ᾑ': 7 + φωνήεν + δασύα + υπογεγραμένη,
			'ἥ': 7 + φωνήεν + δασύα + οξεία,
			'ᾕ': 7 + φωνήεν + δασύα + οξεία + υπογεγραμένη,
			'ἣ': 7 + φωνήεν + δασύα + βαρεία,
			'ᾓ': 7 + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'ἧ': 7 + φωνήεν + δασύα + περισπωμένη,
			'ᾗ': 7 + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'ἠ': 7 + φωνήεν + ψιλή,
			'ᾐ': 7 + φωνήεν + ψιλή + υπογεγραμένη,
			'ἤ': 7 + φωνήεν + ψιλή + οξεία,
			'ᾔ': 7 + φωνήεν + ψιλή + οξεία + υπογεγραμένη,
			'ἢ': 7 + φωνήεν + ψιλή + βαρεία,
			'ᾒ': 7 + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'ἦ': 7 + φωνήεν + ψιλή + περισπωμένη,
			'ᾖ': 7 + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,
			'θ': 8,
			'ι': 9 + φωνήεν,
			'ί': 9 + φωνήεν + οξεία,
			'ὶ': 9 + φωνήεν + βαρεία,
			'ῖ': 9 + φωνήεν + περισπωμένη,
			'ϊ': 9 + φωνήεν + διαλυτικά,
			'ΐ': 9 + φωνήεν + διαλυτικά + οξεία,
			'ῒ': 9 + φωνήεν + διαλυτικά + βαρεία,
			'ῗ': 9 + φωνήεν + διαλυτικά + περισπωμένη,
			'ἱ': 9 + φωνήεν + δασύα,
			'ἵ': 9 + φωνήεν + δασύα + οξεία,
			'ἳ': 9 + φωνήεν + δασύα + βαρεία,
			'ἷ': 9 + φωνήεν + δασύα + περισπωμένη,
			'ἰ': 9 + φωνήεν + ψιλή,
			'ἴ': 9 + φωνήεν + ψιλή + οξεία,
			'ἲ': 9 + φωνήεν + ψιλή + βαρεία,
			'ἶ': 9 + φωνήεν + ψιλή + περισπωμένη,
			'κ':10, 'λ':11, 'μ':12, 'ν':13, 'ξ':14,
			'ο':15 + φωνήεν,
			'ό':15 + φωνήεν + οξεία,
			'ὸ':15 + φωνήεν + βαρεία,
			'ὁ':15 + φωνήεν + δασύα,
			'ὅ':15 + φωνήεν + δασύα + οξεία,
			'ὃ':15 + φωνήεν + δασύα + βαρεία,
			'ὀ':15 + φωνήεν + ψιλή,
			'ὄ':15 + φωνήεν + ψιλή + οξεία,
			'ὂ':15 + φωνήεν + ψιλή + βαρεία,
			'π':16,
			'ρ':17,
			'ῥ':17 + δασύα,
			'ῤ':17 + ψιλή,
			'σ':18, 'τ':19,
			'υ':20 + φωνήεν,
			'ύ':20 + φωνήεν + οξεία,
			'ὺ':20 + φωνήεν + βαρεία,
			'ῦ':20 + φωνήεν + περισπωμένη,
			'ϋ':20 + φωνήεν + διαλυτικά,
			'ΰ':20 + φωνήεν + διαλυτικά + οξεία,
			'ῢ':20 + φωνήεν + διαλυτικά + βαρεία,
			'ῧ':20 + φωνήεν + διαλυτικά + περισπωμένη,
			'ὑ':20 + φωνήεν + δασύα,
			'ὕ':20 + φωνήεν + δασύα + οξεία,
			'ὓ':20 + φωνήεν + δασύα + βαρεία,
			'ὗ':20 + φωνήεν + δασύα + περισπωμένη,
			'ὐ':20 + φωνήεν + ψιλή,
			'ὔ':20 + φωνήεν + ψιλή + οξεία,
			'ὒ':20 + φωνήεν + ψιλή + βαρεία,
			'ὖ':20 + φωνήεν + ψιλή + περισπωμένη,
			'φ':21, 'χ':22, 'ψ':23,
			'ω':24 + φωνήεν,
			'ῳ':24 + φωνήεν + υπογεγραμένη,
			'ώ':24 + φωνήεν + οξεία,
			'ῴ':24 + φωνήεν + οξεία + υπογεγραμένη,
			'ὼ':24 + φωνήεν + βαρεία,
			'ῲ':24 + φωνήεν + βαρεία + υπογεγραμένη,
			'ῶ':24 + φωνήεν + περισπωμένη,
			'ῷ':24 + φωνήεν + περισπωμένη + υπογεγραμένη,
			'ὡ':24 + φωνήεν + δασύα,
			'ᾡ':24 + φωνήεν + δασύα + υπογεγραμένη,
			'ὥ':24 + φωνήεν + δασύα + οξεία,
			'ᾥ':24 + φωνήεν + δασύα + οξεία + υπογεγραμένη,
			'ὣ':24 + φωνήεν + δασύα + βαρεία,
			'ᾣ':24 + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'ὧ':24 + φωνήεν + δασύα + περισπωμένη,
			'ᾧ':24 + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'ὠ':24 + φωνήεν + ψιλή,
			'ᾠ':24 + φωνήεν + ψιλή + υπογεγραμένη,
			'ὤ':24 + φωνήεν + ψιλή + οξεία,
			'ᾤ':24 + φωνήεν + ψιλή + οξεία + υπογεγραμένη,
			'ὢ':24 + φωνήεν + ψιλή + βαρεία,
			'ᾢ':24 + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'ὦ':24 + φωνήεν + ψιλή + περισπωμένη,
			'ᾦ':24 + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,

			'Α': 1 + κεφαλαίο + φωνήεν,
			'ᾼ': 1 + κεφαλαίο + φωνήεν + υπογεγραμένη,
			'Ά': 1 + κεφαλαίο + φωνήεν + οξεία,
			'Ὰ': 1 + κεφαλαίο + φωνήεν + βαρεία,
			'Ἁ': 1 + κεφαλαίο + φωνήεν + δασύα,
			'ᾉ': 1 + κεφαλαίο + φωνήεν + δασύα + υπογεγραμένη,
			'Ἅ': 1 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'ᾍ': 1 + κεφαλαίο + φωνήεν + δασύα + υπογεγραμένη + οξεία,
			'Ἃ': 1 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'ᾋ': 1 + κεφαλαίο + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'Ἇ': 1 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη,
			'ᾏ': 1 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'Ἀ': 1 + κεφαλαίο + φωνήεν + ψιλή,
			'ᾈ': 1 + κεφαλαίο + φωνήεν + ψιλή + υπογεγραμένη,
			'Ἄ': 1 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'ᾌ': 1 + κεφαλαίο + φωνήεν + ψιλή + υπογεγραμένη + οξεία,
			'Ἂ': 1 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'ᾊ': 1 + κεφαλαίο + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'Ἆ': 1 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη,
			'ᾎ': 1 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,
			'Β': 2 + κεφαλαίο, 'Γ': 3 + κεφαλαίο,
			'Δ': 4 + κεφαλαίο,
			'Ε': 5 + κεφαλαίο + φωνήεν,
			'Έ': 5 + κεφαλαίο + φωνήεν + οξεία,
			'Ὲ': 5 + κεφαλαίο + φωνήεν + βαρεία,
			'Ἑ': 5 + κεφαλαίο + φωνήεν + δασύα,
			'Ἕ': 5 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'Ἓ': 5 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'Ἐ': 5 + κεφαλαίο + φωνήεν + ψιλή,
			'Ἔ': 5 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'Ἒ': 5 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'Ζ': 6 + κεφαλαίο,
			'Η': 7 + κεφαλαίο + φωνήεν,
			'ῌ': 7 + κεφαλαίο + φωνήεν + υπογεγραμένη,
			'Ή': 7 + κεφαλαίο + φωνήεν + οξεία,
			'Ὴ': 7 + κεφαλαίο + φωνήεν + βαρεία,
			'Ἡ': 7 + κεφαλαίο + φωνήεν + δασύα,
			'ᾙ': 7 + κεφαλαίο + φωνήεν + δασύα + υπογεγραμένη,
			'Ἥ': 7 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'ᾝ': 7 + κεφαλαίο + φωνήεν + δασύα + οξεία + υπογεγραμένη,
			'Ἣ': 7 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'ᾛ': 7 + κεφαλαίο + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'Ἧ': 7 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη,
			'ᾟ': 7 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'Ἠ': 7 + κεφαλαίο + φωνήεν + ψιλή,
			'ᾘ': 7 + κεφαλαίο + φωνήεν + ψιλή + υπογεγραμένη,
			'Ἤ': 7 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'ᾜ': 7 + κεφαλαίο + φωνήεν + ψιλή + οξεία + υπογεγραμένη,
			'Ἢ': 7 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'ᾚ': 7 + κεφαλαίο + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'Ἦ': 7 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη,
			'ᾞ': 7 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,
			'Θ': 8 + κεφαλαίο,
			'Ι': 9 + κεφαλαίο + φωνήεν,
			'Ί': 9 + κεφαλαίο + φωνήεν + οξεία,
			'Ὶ': 9 + κεφαλαίο + φωνήεν + βαρεία,
			'Ϊ': 9 + κεφαλαίο + φωνήεν + διαλυτικά,
			'Ἱ': 9 + κεφαλαίο + φωνήεν + δασύα,
			'Ἵ': 9 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'Ἳ': 9 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'Ἷ': 9 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη,
			'Ἰ': 9 + κεφαλαίο + φωνήεν + ψιλή,
			'Ἴ': 9 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'Ἲ': 9 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'Ἶ': 9 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη,
			'Κ':10 + κεφαλαίο, 	'Λ':11 + κεφαλαίο,
			'Μ':12 + κεφαλαίο, 	'Ν':13 + κεφαλαίο,
			'Ξ':14 + κεφαλαίο,
			'Ο':15 + κεφαλαίο + φωνήεν,
			'Ό':15 + κεφαλαίο + φωνήεν + οξεία,
			'Ὸ':15 + κεφαλαίο + φωνήεν + βαρεία,
			'Ὁ':15 + κεφαλαίο + φωνήεν + δασύα,
			'Ὅ':15 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'Ὃ':15 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'Ὀ':15 + κεφαλαίο + φωνήεν + ψιλή,
			'Ὄ':15 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'Ὂ':15 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'Π':16 + κεφαλαίο,
			'Ρ':17 + κεφαλαίο,
			'Ῥ':17 + κεφαλαίο + δασύα,
			'Σ':18 + κεφαλαίο, 	'Τ':19 + κεφαλαίο,
			'Υ':20 + κεφαλαίο + φωνήεν,
			'Ύ':20 + κεφαλαίο + φωνήεν + οξεία,
			'Ὺ':20 + κεφαλαίο + φωνήεν + βαρεία,
			'Ϋ':20 + κεφαλαίο + φωνήεν + διαλυτικά,
			'Ὑ':20 + κεφαλαίο + φωνήεν + δασύα,
			'Ὕ':20 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'Ὓ':20 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'Ὗ':20 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη,
			'Φ':21 + κεφαλαίο, 'Χ':22 + κεφαλαίο,
			'Ψ':23 + κεφαλαίο,
			'Ω':24 + κεφαλαίο + φωνήεν,
			'ῼ':24 + κεφαλαίο + φωνήεν + υπογεγραμένη,
			'Ώ':24 + κεφαλαίο + φωνήεν + οξεία,
			'Ὼ':24 + κεφαλαίο + φωνήεν + βαρεία,
			'Ὡ':24 + κεφαλαίο + φωνήεν + δασύα,
			'ᾩ':24 + κεφαλαίο + φωνήεν + δασύα + υπογεγραμένη,
			'Ὥ':24 + κεφαλαίο + φωνήεν + δασύα + οξεία,
			'ᾭ':24 + κεφαλαίο + φωνήεν + δασύα + οξεία + υπογεγραμένη,
			'Ὣ':24 + κεφαλαίο + φωνήεν + δασύα + βαρεία,
			'ᾫ':24 + κεφαλαίο + φωνήεν + δασύα + βαρεία + υπογεγραμένη,
			'Ὧ':24 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη,
			'ᾯ':24 + κεφαλαίο + φωνήεν + δασύα + περισπωμένη + υπογεγραμένη,
			'Ὠ':24 + κεφαλαίο + φωνήεν + ψιλή,
			'ᾨ':24 + κεφαλαίο + φωνήεν + ψιλή + υπογεγραμένη,
			'Ὤ':24 + κεφαλαίο + φωνήεν + ψιλή + οξεία,
			'ᾬ':24 + κεφαλαίο + φωνήεν + ψιλή + οξεία + υπογεγραμένη,
			'Ὢ':24 + κεφαλαίο + φωνήεν + ψιλή + βαρεία,
			'ᾪ':24 + κεφαλαίο + φωνήεν + ψιλή + βαρεία + υπογεγραμένη,
			'Ὦ':24 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη,
			'ᾮ':24 + κεφαλαίο + φωνήεν + ψιλή + περισπωμένη + υπογεγραμένη,
			}
		νέοι_κωδικοί = dict((ord(k), v) for k, v in self.κωδικοί.items())
		self.κωδικοί = νέοι_κωδικοί
		self.rκωδικοί = dict((v, k) for k, v in self.κωδικοί.items())
		self.rκωδικοί[5 + φωνήεν + περισπωμένη] = ord('έ')
		self.rκωδικοί[15 + φωνήεν + περισπωμένη] = ord('ό')
		self.rκωδικοί[1] = ord('α')
		self.rκωδικοί[5] = ord('ε')
		self.rκωδικοί[7] = ord('η')
		self.rκωδικοί[9] = ord('ι')
		self.rκωδικοί[15] = ord('ο')
		self.rκωδικοί[20] = ord('υ')
		self.rκωδικοί[24] = ord('ω')
		
		self.κστίξη = {
			' ': int('00' + '00000001' + '00000', 2),
			',': int('00' + '00000010' + '00000', 2),
			"'": int('00' + '00000011' + '00000', 2),
			'.': int('00' + '00000100' + '00000', 2),
			'·': int('00' + '00000110' + '00000', 2),
			'(': int('00' + '00000111' + '00000', 2),
			')': int('10' + '00001000' + '00000', 2),
			'«': int('00' + '00001001' + '00000', 2),
			'»': int('10' + '00001010' + '00000', 2),
			'[': int('00' + '00001011' + '00000', 2),
			']': int('10' + '00001100' + '00000', 2),
			'{': int('00' + '00001101' + '00000', 2),
			'}': int('10' + '00001110' + '00000', 2),
			'!': int('00' + '00001111' + '00000', 2),
			':': int('00' + '00010000' + '00000', 2),
			';': int('00' + '00010001' + '00000', 2),
			'-': int('00' + '00010010' + '00000', 2),
			"'": int('00' + '00010011' + '00000', 2),
			"+": int('00' + '00010100' + '00000', 2),
			"/": int('00' + '00010101' + '00000', 2),
			"\\": int('00' +'00010110' + '00000', 2),
			"*": int('00' + '00010111' + '00000', 2),
			"=": int('00' + '00011000' + '00000', 2),
			"·": int('00' + '00011001' + '00000', 2),
			"῾": int('00' + '00011010' + '00000', 2),
			"᾽": int('00' + '00011011' + '00000', 2),
			"᾿": int('00' + '00011100' + '00000', 2),
			"῀": int('00' + '00011101' + '00000', 2),
			"´": int('00' + '00011110' + '00000', 2),
			"ι": int('00' + '00011111' + '00000', 2),
			"῁": int('00' + '00100000' + '00000', 2),
			"῍": int('00' + '00100001' + '00000', 2),
			"῎": int('00' + '00100010' + '00000', 2),
			"῏": int('00' + '00100011' + '00000', 2),
			"῝": int('00' + '00100100' + '00000', 2),
			"῞": int('00' + '00100101' + '00000', 2),
			"῟": int('00' + '00100110' + '00000', 2),
			"῭": int('00' + '00100111' + '00000', 2),
			"΅": int('00' + '00101000' + '00000', 2),
			"`": int('00' + '00101001' + '00000', 2),
			"<": int('00' + '00101010' + '00000', 2),
			">": int('10' + '00101011' + '00000', 2),
			'"': int('10' + '00101100' + '00000', 2),
			"@": int('10' + '00101101' + '00000', 2),
			"#": int('10' + '00101110' + '00000', 2),
			"%": int('10' + '00101111' + '00000', 2),
			"^": int('10' + '00110000' + '00000', 2),
			"|": int('10' + '00110001' + '00000', 2),
			"$": int('10' + '00110010' + '00000', 2),
			"&": int('10' + '00110011' + '00000', 2),
			"_": int('10' + '00110100' + '00000', 2),
			"'": int('10' + '00110101' + '00000', 2),
			"?": int('10' + '00110110' + '00000', 2),
			"`": int('10' + '00110111' + '00000', 2),
			"~": int('10' + '00111000' + '00000', 2),
			"0": int('01' + '01000000' + '00000', 2),
			"1": int('01' + '01000001' + '00000', 2),
			"2": int('01' + '01000010' + '00000', 2),
			"3": int('01' + '01000011' + '00000', 2),
			"4": int('01' + '01000100' + '00000', 2),
			"5": int('01' + '01000101' + '00000', 2),
			"6": int('01' + '01000110' + '00000', 2),
			"7": int('01' + '01000111' + '00000', 2),
			"8": int('01' + '01001000' + '00000', 2),
			"9": int('01' + '01001001' + '00000', 2),
			}
		νέοι_κωδικοί = dict((ord(k), v) for k, v in self.κστίξη.items())
		self.κστίξη = νέοι_κωδικοί
		self.rστίξη = dict((v, k) for k, v in self.κστίξη.items())
		self.απλοποιήσεις = {}
		self.απλοποιήσεις = {#αειοβγδζκλνπρστχ
			3:{1:{20:[1, 2], #"αυ":"αβ",
					 9:[5], }, #"αι":"ε",
				5:{20:[5, 2], #"ευ":"εβ",
					 9:[9]}, #"ει":"ι", 
			  15:{20:[15], #"ου":"ο", 
				    9:[9]}, #"οι":"ι",
				7:{20:[9]}, #"ηυ":"ι", 
			  20:{ 9:[9]}, 	#"υι":"ι",
			   6:{12:[18, 12]}}, #"ζμ":"σμ",
			2:{20:[9], 7:[9], 24:[15], #"υ":"ι", "η":"ι", "ω":"ο",
			   14:[10, 18], 23:[16, 18], }, #"ξ":"κσ", "ψ":"πσ",
								}
	
	def keyfinder(self, λεξικό, κλειδί, μέγεθος, νέο_λεξικό):
		tmpdict = λεξικό
		ν=0
		for ν in range(μέγεθος):
			if κλειδί[ν] in tmpdict:
				if -1 in tmpdict[κλειδί[ν]]:
					νέο_λεξικό[ν] = tmpdict[κλειδί[ν]][-1]
				tmpdict = tmpdict[κλειδί[ν]]
			else:
				break
			
		if -1 in tmpdict:
			νέο_λεξικό[ν] = tmpdict[-1]
			
	def stepfinder(self, λεξικό, bκλειδί, μέγεθος, neo_lejiko, ν=0):
		if μέγεθος > ν:
			if bκλειδί[ν] in λεξικό:
				return self.stepfinder(λεξικό[bκλειδί[ν]], bκλειδί, μέγεθος, neo_lejiko, ν + 1)
		else:
			return λεξικό
			
	def keyfinder_straight(self, λεξικό, κλειδί, μέγεθος, νέο_λεξικό, ν=0):
		tmpdict = λεξικό
		ν=0
		for ν in range(μέγεθος):
			if κλειδί[ν] in tmpdict:
				tmpdict = tmpdict[κλειδί[ν]]
			else:
				break
			
		if -1 in tmpdict:
			νέο_λεξικό[ν] = tmpdict[-1]
	
	def rv(self, λεξικά, acc, αα):
		if len(acc)>10:
			pass
		elif λεξικά:
			for κλειδί, λεξικό in λεξικά.items():
				if κλειδί==-1:
					acc += λεξικό
				else:
					if λεξικό.keys():
						self.rv(λεξικό, acc, αα+1)
	
	def lexfinder(self, λεξικόΛημμάτων, λεξικόΚαταλήξεων, 
				κΆτονηΛέξη, κΑΑΛέξη, μέγεθος, τονισμός, neo_lejiko, ν=0): 
		
		if μέγεθος > ν:
			if ν and 'ομάδες' in λεξικόΛημμάτων:
				κΑΑΛέξη2 = κΑΑΛέξη[ν:]
				κΑΑΛέξη2.insert(0,τονισμός)
				κΑΑΛέξη2.insert(0,0)
				for σύνολο in λεξικόΛημμάτων['ομάδες']:
					κΑΑΛέξη2[0] = σύνολο["κατηγορία"]
					neo_lejiko2 = []
					self.keyfinder_straight(λεξικόΚαταλήξεων, κΑΑΛέξη2, μέγεθος+2-ν, neo_lejiko2)
					
					if neo_lejiko2:
						katal = κΑΑΛέξη2[2:]
						for neo in neo_lejiko2:
							neo_lejiko.append(σύνολο.copy())
							neo_lejiko[-1].update(neo)
			if κΆτονηΛέξη[ν] in λεξικόΛημμάτων:
				self.lexfinder(λεξικόΛημμάτων[κΆτονηΛέξη[ν]], λεξικόΚαταλήξεων, κΆτονηΛέξη, κΑΑΛέξη, μέγεθος, τονισμός, neo_lejiko, ν + 1)
	
	def lexfinder2(self, λεξικόΛημμάτων, λεξικόΚαταλήξεων, λεξικόΣπάνιωνΚαταλήξεων, 
				κΆτονηΛέξη, μέγεθος, τονισμός, neo_lejiko, σπάνια, ν=0): 
		if μέγεθος > ν:
			if 'ομάδες' in λεξικόΛημμάτων:
				for σύνολο in λεξικόΛημμάτων['ομάδες']:
					neo_lejiko2 = []
					τονισμός[0] = σύνολο["κατηγορία"]
					τονισμός[2] = κΆτονηΛέξη[ν]
					
					if σπάνια[σύνολο["κατηγορία"]]>2:
						self.keyfinder_straight(λεξικόΚαταλήξεων, τονισμός, 3, neo_lejiko2)
					else:
						self.keyfinder_straight(λεξικόΣπάνιωνΚαταλήξεων, τονισμός, 3, neo_lejiko2)
					for neo in neo_lejiko2:
						neo_lejiko.append(σύνολο.copy())
						neo_lejiko[-1].update(neo)
					
			if κΆτονηΛέξη[ν] in λεξικόΛημμάτων:
				self.lexfinder2(λεξικόΛημμάτων[κΆτονηΛέξη[ν]], λεξικόΚαταλήξεων, λεξικόΣπάνιωνΚαταλήξεων, κΆτονηΛέξη, μέγεθος, τονισμός, neo_lejiko, σπάνια, ν + 1)
	
	def keymaker(self, λεξικό, κλειδί, κατηγορίες, μέγεθος, ν=0):
		if μέγεθος > ν:
			στ = int(κλειδί[ν])
			
			if not στ in λεξικό:
				λεξικό[στ] = {}
			λεξικό[στ] = self.keymaker(λεξικό[στ], κλειδί, κατηγορίες, μέγεθος, ν + 1)
		else:
			if not -1 in λεξικό:
				λεξικό[-1] = []
			
			λεξικό[-1].append(κατηγορίες)
		return λεξικό
	
	def removekey(self, λεξικό, κλειδί, κατηγορίες, μέγεθος, ν=0):
		if μέγεθος > ν:
			στ = int(κλειδί[ν])
			
			if στ in λεξικό:
				λεξικό[στ] = self.keymaker(λεξικό[στ], κλειδί, κατηγορίες, μέγεθος, ν + 1)
		else:
			if -1 in λεξικό:
				if κατηγορίες in λεξικό[-1]:
					λεξικό[-1].remove(κατηγορίες)
					if not λεξικό[-1]:
						del λεξικό[-1]
		return λεξικό
		
	def πρόσθεσε_δασύα(self, λέξη):
		"""Προσθέτη δασύα στο πρώτο
		φωνήεν ή δίψηφο φωνήεν.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		if λέξη[0] & self.δίψηφο1 and\
			λέξη[0] & self.φωνήεν:
			self.αφαίρεσε_πνεύματα(λέξη)
			λέξη[1] += self.δασύα
		elif λέξη[0] & self.φωνήεν or\
			λέξη[0] & self.γράμμα == 17:
			self.αφαίρεσε_πνεύματα(λέξη)
			λέξη[0] += self.δασύα

	def πρόσθεσε_ψιλή(self, λέξη):
		"""Προσθέτη την ψιλή στο πρώτο
		φωνήεν ή δίψηφο φωνήεν.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		if λέξη[0] & self.δίψηφο1 and λέξη.size>1:
			self.αφαίρεσε_πνεύματα(λέξη)
			λέξη[1] += self.ψιλή
		elif λέξη[0] & self.φωνήεν or\
			λέξη[0] & self.γράμμα == 17:
			self.αφαίρεσε_πνεύματα(λέξη)
			λέξη[0] += self.ψιλή
	
	def είναι_φωνήεν(self, γράμμα):
		"""Επιστρέφει αν τα πρώτα 
		1-2 γράμματα της λέξης 
		είναι κεφαλαία.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Τrue(κεφαλαίο) ή False.
		"""
		αποτέλεσμα = False
		μέγεθος = μήκος(γράμμα)
		if μέγεθος:
			if μέγεθος > 1 and\
				γράμμα[0] & self.δίψηφο1 and\
				γράμμα[1] & self.δίψηφο2:
				αποτέλεσμα = True
			elif μέγεθος > 0 and\
				γράμμα[0] & self.φωνήεν:
				αποτέλεσμα = True
		return αποτέλεσμα
	
	def είναι_κεφαλαίο(self, λέξη):
		"""Επιστρέφει αν το πρώτο γράμμα
		της λέξης είναι κεφαλαίο.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Τrue(κεφαλαίο) ή False.
		"""
		αποτέλεσμα = False
		μέγεθος = μήκος(λέξη)
		if μέγεθος > 0 and\
			λέξη[0] & self.κεφαλαίο:
			αποτέλεσμα = True
		return αποτέλεσμα
	
	def είναι_στίξη(self, λέξη):
		"""Επιστρέφει αν το πρώτο γράμμα
		της λέξης είναι στίξη.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Τrue(στίξη) ή False.
		"""
		αποτέλεσμα = False
		μέγεθος = μήκος(λέξη)
		if μέγεθος > 0 and\
			not λέξη[0] & self.γράμμα:
			αποτέλεσμα = True
		return αποτέλεσμα

	def αφαίρεσε_τόνους(self, λέξη):
		"""Αφαιρεί τους τόνους, όχι τα πνεύματα και διαλυτικά.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		μέγεθος = λέξη.size
		for ν in range(μέγεθος):
			if not λέξη[ν]&self.γράμμα or\
				not λέξη[ν] & self.φωνήεν:
				continue
			λέξη[ν] &= self.χωρίς_τόνους
			
	def κεφαλαία_σε_μικρά(self, λέξη):
		"""Μετατρέπη τα κεφαλαία γράμματα σε μικρά.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		μέγεθος = λέξη.size
		for ν in range(μέγεθος):
			if not λέξη[ν]&self.γράμμα:
				continue
			λέξη[ν] &= self.χωρίς_κεφαλαίο
	
	def αποτονιστής(self, λέξη):
		"""Αφαιρεί τους τόνους και
		 τα πνεύματα.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		λέξη &= self.χωρίς_τόνους_πνεύματα
	
	def αφαίρεσε_πνεύματα(self, λέξη):
		"""Αφαιρή τα πνεύματα.
		
		λέξη: κωδικοποιημένη λέξη array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		μέγεθος = λέξη.size
		for ν in range(μέγεθος):
			if not λέξη[ν]&self.γράμμα or\
				not λέξη[ν] & self.φωνήεν:
				continue
			if λέξη[ν] & self.δασύα:
				λέξη[ν] -= self.δασύα
			if λέξη[ν] & self.ψιλή:
				λέξη[ν] -= self.ψιλή 

	def είναι_τονισμένο(self, λέξη):
		for γράμμα in λέξη:
			if γράμμα&self.τονισμένο:
				return True
		return False
	
	def έχει_πνεύματα(self, λέξη):
		if λέξη[0] & self.πνεύματα:
			return True
		elif λέξη[0] & self.δίψηφο1:
			if λέξη.size>1 and λέξη[1] & self.πνεύματα:
				return True
		return False
	
	def αναγνώρηση_τόνων(self, λέξη):
		"""Αναγνωρίση πνευμάτων και τόνων
		στην λέξη.
		
		λέξη: κωδικοποιημένη λέξη 
			σε μορφή array 2 byte
		
		επιστρέφη: ένα λεξικό στην μορφή
				"πνεύμα": 'ψιλή', 'δασύα' ή None
				"τόνοι": λίστα με 'οξεία','βαρεία',
										'περισπωμένη', None
		"""
		αποτέλεσμα = {"πνεύμα":None, "τόνοι":[]}
		if λέξη[0] & self.δίψηφο1:
			if λέξη[1] & self.δίψηφο2:
				if λέξη[1] & self.ψιλή:
					αποτέλεσμα["πνεύμα"] = "ψιλή"
				elif λέξη[1] & self.δασύα:
					αποτέλεσμα["πνεύμα"] = "δασύα"
		elif λέξη[0] & self.φωνήεν:
			if λέξη[0] & self.ψιλή:
				αποτέλεσμα["πνεύμα"] = "ψιλή"
			elif λέξη[0] & self.δασύα:
				αποτέλεσμα["πνεύμα"] = "δασύα"
		else:
			αποτέλεσμα["πνεύμα"] = None

		μετρητής = μήκος(λέξη) - 1
		
		while μετρητής > -1:
			τύπος = None
			if λέξη[μετρητής] & self.φωνήεν:
				if λέξη[μετρητής] & self.οξεία:
					τύπος = "οξεία"
				elif λέξη[μετρητής] & self.βαρεία:
					τύπος = "βαρεία"
				elif λέξη[μετρητής] & self.περισπωμένη:
					τύπος = "περισπωμένη"
				if τύπος != None:
					αποτέλεσμα["τόνοι"].insert(0, τύπος)
									
				if λέξη[μετρητής] & self.δίψηφο2:
					μετρητής -= 2
				else:
					μετρητής -= 1
			else:
				μετρητής -= 1
		return αποτέλεσμα

	def κωδικοποιητής(self, λέξη, επαλήθευση=False):
		"""Κωδικοποιεί την λέξη για να επεξεργαστή
		γρηγορότερα και με απλούστερο κώδικα.
		
		λέξη: η λέξη προς κωδικοποίηση
		
		επιστρέφει: ένα πίνακα τύπου array 
			με θετικούς ακέραιους των 2 byte.
		"""
		
		μέγεθος = len(λέξη)
		κωδικοποιημένη_λέξη = ndarray((μέγεθος),dtype=int32)
		
		ν = 0
		αριθμός = 0
		προτονισμός = None
		while ν<μέγεθος:
			αριθμός = ord(λέξη[ν])
			
			if αριθμός in self.αντιστοιχίες:
				κωδικοποιημένη_λέξη[ν] = self.κωδικοί[self.αντιστοιχίες[αριθμός]]
			elif αριθμός in [8127]:
				προτονισμός = αριθμός
			elif αριθμός in self.κστίξη:
				κωδικοποιημένη_λέξη[ν] = self.κστίξη[αριθμός]
			elif (901 < αριθμός and αριθμός < 1021) or\
				(7935 < αριθμός and αριθμός < 8189) or\
				αριθμός in [32,39,44]:
				if προτονισμός:
					κωδικοποιημένη_λέξη[ν] = self.κωδικοί[αριθμός]
					if προτονισμός==8127:
						κωδικοποιημένη_λέξη[ν] += self.ψιλή
					προτονισμός = None
					if επαλήθευση:
						if λέξη[ν]!=self.απο(array(κωδικοποιημένη_λέξη[ν])):
							print(λέξη, λέξη[ν])
				else:
					κωδικοποιημένη_λέξη[ν] = self.κωδικοί[αριθμός]
			ν += 1
		
		self._έλεγχος_δίψηφων(κωδικοποιημένη_λέξη)
		return κωδικοποιημένη_λέξη
	
	def _έλεγχος_δίψηφων(self, λέξη):
		λέξη &= 8191
		μέγεθος = λέξη.size
		ν = 1
		κμ0, κμ1 = 0, 0
		λέξη2 = λέξη.copy()
		λέξη2 &= self.γράμμα
		while ν < μέγεθος:			
			if ((λέξη2[ν] == 20 and λέξη2[ν - 1] in [1, 5, 15, 7]) or\
				(λέξη2[ν] == 9 and λέξη2[ν - 1] in [1, 5, 15, 20])) and\
				not (λέξη[ν - 1] & self.πνεύματα or\
					λέξη[ν - 1] & self.τονισμένο or\
					λέξη[ν] & self.διαλυτικά):
					λέξη[ν - 1] += self.δίψηφο1
					λέξη[ν] += self.δίψηφο2
					ν += 1
			ν += 1
			
	def απόκωδικοποιητής(self, κωδικοποιημένη_λέξη, με_ς=False):
		"""Αποκωδικοποιεί την κωδικοποιημένη λέξη
		 ή λέξεις.
		
		κωδικοποιημένη_λέξη: ένας πίνακας τύπου array 
			με θετικούς ακέραιους των 1 ή 2 byte ή
			μια λίστα με πίνακες τύπου array.
		
		επιστρέφει: μια λίστα με λέξεις
						σε μορφή unicode.
		"""
		if not κωδικοποιημένη_λέξη.any():
			return ''
		
		λέξη = []
		k = κωδικοποιημένη_λέξη&8191
		for κωδικό in k:
			if κωδικό in self.rκωδικοί:
				λέξη.append(chr(self.rκωδικοί[κωδικό]))
			elif κωδικό in self.rστίξη:
				λέξη.append(chr(self.rστίξη[κωδικό]))
			else:
				print('Σφάλμα αποκωδικοποιητή: ο κωδικός %d δεν υπάρχει.' % κωδικό)
				print("Ανάλυση:")
				print("Γράμμα", κωδικό&self.γράμμα)
				print("Φωνήεν", κωδικό&self.φωνήεν)
				print("Δίψηφο", κωδικό&self.δίψηφο)
				print("Κεφαλαίο", κωδικό&self.κεφαλαίο)
				print("Τονισμένο", κωδικό&self.τονισμένο)
				print("Φωνήεν", κωδικό&self.φωνήεν)
				print("Διαλυτικά", κωδικό&self.διαλυτικά)
		
		if με_ς and λέξη and λέξη[-1] == 'σ':
			λέξη[-1] = 'ς'
		return "".join(λέξη)

	def απλοποιητής(self, λέξη):
		"""O απλοποιητής απλοποιεί κωδικοποιημένες
		λέξεις array 2 byte σε πίνακες array 1 byte.
		Ταυτόχρονα αφαιρεί τους τόνους, τα διπλά σύμφωνα,
		τα δίψιφα φωνήεντα.
		 Το αποτέλεσμα χρησιμοποιείται στα ευρετήρια για
		σύγκριση παρόμιων ή ανορθόγραφων λέξεων. 
		 Μπορεί να αποκοδικοποιηθεί.
		
		λέξη: η κωδικοποιημένη λέξη σε πίνακα array.
		
		επιστρέφει: ένα πίνακα τύπου array 
			με θετικούς ακέραιους του 1 byte.
		"""
		απλοποιημένη_λέξη = []#array([],int32)#.array('B')
		μέγεθος = λέξη.size
		if μέγεθος ==0:
			return απλοποιημένη_λέξη
		ν = 0
		λέξη2 = λέξη & self.γράμμα
		γράμμα = None
		γράμμα2 = λέξη2[0]
		while ν < μέγεθος:
			γράμμα = γράμμα2
			
			if ν + 1 < μέγεθος:
				γράμμα2 = λέξη2[ν+1]
			else:
				γράμμα2 = None
			
			if γράμμα == γράμμα2:
				pass
			elif ν + 1 < μέγεθος and\
				γράμμα in self.απλοποιήσεις[3] and\
				γράμμα2 in self.απλοποιήσεις[3][γράμμα]:
				
				if len(self.απλοποιήσεις[3][γράμμα][γράμμα2])==2:
					γράμμα, γράμμα2 = self.απλοποιήσεις[3][γράμμα][γράμμα2]
				else:
					γράμμα, γράμμα2 = None, self.απλοποιήσεις[3][γράμμα][γράμμα2][0]
					if γράμμα:
						απλοποιημένη_λέξη.append(γράμμα)
			elif γράμμα in self.απλοποιήσεις[2]:
				απλοποιημένη_λέξη.append(self.απλοποιήσεις[2][γράμμα][0])
				if len(self.απλοποιήσεις[2][γράμμα])==2:
					απλοποιημένη_λέξη.append(self.απλοποιήσεις[2][γράμμα][1])
			else:
				απλοποιημένη_λέξη.append(γράμμα)
			ν += 1
		
		return array(απλοποιημένη_λέξη, int32)

	def _χωρισμός_τονιζόμενου(self, λέξη, τόνος):
		θέση = 0
		if τόνος in ["οξύτονο", -1]:
			θέση = 1
		elif τόνος in ["παροξύτονο", -2]:
			θέση = 2
		elif τόνος in ["προπαροξύτονο", -3]:
			θέση = 3
		
		μέγεθος = μήκος(λέξη)
		μέρη = None
		tθέση = 0
		μετρητής = μέγεθος - 1
		while μετρητής > -1:
			if λέξη[μετρητής] & self.φωνήεν:
				tθέση += 1
				
				if λέξη[μετρητής] & self.δίψηφο2:
					μετρητής -= 2
				else:
					μετρητής -= 1
				αρχή = μετρητής + 1
				
				if tθέση > 3:
					break
				
				if tθέση == θέση:
					μέρη = αρχή
					break
			else:
				μετρητής -= 1
		return μέρη

	def τόνισε_προπαροξύτονο(self, λέξη):
		"""Προσθέτη τόνο στην προπαραλήγουσα
		ή την παραλήγουσα, αν είναι δισύλλαβη
		η λέξη.
		
		λέξη: η κωδικοποιημένη λέξη τύπου array 2 byte
		
		επιστρέφει: Δεν επιστρέφει τίποτα. Μεταβάλει
			το pointer-δείκτη της λέξης.
		"""
		τονιζόμενο = self._χωρισμός_τονιζόμενου(λέξη, "προπαροξύτονο")
		
		if τονιζόμενο==None:
			τονιζόμενο = self._χωρισμός_τονιζόμενου(λέξη, "παροξύτονο")
		
		if τονιζόμενο!=None and not λέξη[τονιζόμενο]&self.οξεία:
			if λέξη[τονιζόμενο] & self.δίψηφο1:
				λέξη[τονιζόμενο + 1] += self.οξεία
			else:
				λέξη[τονιζόμενο] += self.οξεία

	def τόνισε_οξύτονο(self, λέξη):
		"""Προσθέτη τόνο στην λήγουσα.
		
		λέξη: η κωδικοποιημένη λέξη τύπου array 2 byte
		
		επιστρέφη: Δεν επιστρέφη τίποτα. Μεταβάλη
			το pointer-δείκτη της λέξης.
		"""
		τονιζόμενο = self._χωρισμός_τονιζόμενου(λέξη, "οξύτονο")
		
		if τονιζόμενο!=None:
			if λέξη[τονιζόμενο] & self.δίψηφο1:
				λέξη[τονιζόμενο + 1] += self.οξεία
			else:
				λέξη[τονιζόμενο] += self.οξεία
	
	def τόνισε(self, λέξη, τόνοι):
		ν = λέξη.size-1
		συλλαβή = 4
		while ν>-1:
			if self.είναι_φωνήεν([λέξη[ν]]):
				if τόνοι & συλλαβή:
					if τόνοι & self.βαρεία_bit:
						λέξη[ν] += self.βαρεία
					elif τόνοι & self.περισπωμένη_bit:
						λέξη[ν] += self.περισπωμένη
					else:
						λέξη[ν] += self.οξεία
					ν = -1000
				else:
					συλλαβή *= 2
					if λέξη[ν] & self.δίψηφο2:
						ν -= 1
			ν -= 1
	
	def πάρε_τονισμό(self, λέξη):
		ν = λέξη.size-1
		συλλαβή = 4
		while ν>-1:
			if self.είναι_φωνήεν([λέξη[ν]]):
				if λέξη[ν] & self.οξεία:
					return συλλαβή
				elif λέξη[ν] & self.περισπωμένη:
					return συλλαβή+self.περισπωμένη_bit
				elif λέξη[ν] & self.βαρεία:
					return συλλαβή+self.βαρεία_bit
				συλλαβή *= 2
				if λέξη[ν] & self.δίψηφο2:
					ν -= 1
			ν -= 1
		return 0
	
	def μέτρα_συλλαβές(self, λέξη):
		ν = len(λέξη)-1
		συλλαβή = 0
		while ν>-1:
			if self.είναι_φωνήεν([λέξη[ν]]):
				συλλαβή += 1
				if λέξη[ν] & self.δίψηφο2:
					ν -= 1
			ν -= 1
		return συλλαβή
	
	def χωρισμός_συλλαβών(self, λέξη):
		ν = len(λέξη)-1
		συλλαβή = 0
		μέρη = []
		acc= []
		while ν>-1:
			if self.είναι_φωνήεν([λέξη[ν]]):
				if λέξη[ν] & self.δίψηφο2:
					acc.insert(0, λέξη[ν])
					ν -= 1
				acc.insert(0, λέξη[ν])
				συλλαβή += 1
				μέρη.insert(0, sum(acc))
				acc = []
			else:
				acc.insert(0, λέξη[ν])
			ν -= 1
		if acc:
			μέρη.insert(0, sum(acc))
		
		return [μέρη, συλλαβή]
	
if __name__ == "__main__":
	τονιστής = Τονιστής()
	α=[["ἁρπασεσθαι"]]
	x= []
	for αα in α:
		y = []
		for oo in αα:
			αρχικό = τονιστής.κωδικοποιητής(oo)
			y.append(τονιστής.πάρε_τονισμό(αρχικό))
		x.append(y)
	print(x)
	for λ in ["ὼ","ώ","ῶ","ὼω","ώω","ῶω","ὼωω","ώωω","ῶωω","ὼωωω","ώωωω","ῶωωω",]:
		αρχικό = τονιστής.κωδικοποιητής(λ)
		τονισμός = τονιστής.πάρε_τονισμό(αρχικό)
		άτονο = αρχικό.__deepcopy__(αρχικό)
		τονιστής.αφαίρεσε_τόνους(άτονο)
		τονιστής.τόνισε(άτονο, τονισμός)
		#if αρχικό==άτονο:
		print(λ,"οκ",τονισμός,τονισμός//4)
		#else:
		#	print(λ,τονιστής.απο(άτονο))
