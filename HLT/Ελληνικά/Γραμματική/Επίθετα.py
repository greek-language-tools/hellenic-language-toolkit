#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011", " dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms", " with or without
# modification", " are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice", " this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice", " this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the dimitriadis dimitris nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES", " INCLUDING", " BUT NOT LIMITED TO", " THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT", " INDIRECT", " INCIDENTAL", " SPECIAL", " EXEMPLARY", " OR CONSEQUENTIAL DAMAGES
# (INCLUDING", " BUT NOT LIMITED TO", " PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE", " DATA", " OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY", " WHETHER IN CONTRACT", " STRICT LIABILITY", " OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE", " EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os, sys
from copy import deepcopy
import numpy as np

class Επίθετα():
	def __init__(self, τονιστής, δεδομένα, αναγνώριση):
		self._αναγνώριση = αναγνώριση
		self.αναγνώριση = self._αναγνώριση.αναγνώριση
		self.δ = δεδομένα
		self.τ = τονιστής
		self.τονιστής = τονιστής
		self._μεταβλητές()
	
	def _μεταβλητές(self):
		self.dump_επίθετα = {}
		
		self.πτώση_σε_αριθμό  = {   "ονομαστική":0,   "γενική":1,   "δοτική":2,   "αιτιατική":3,   "κλητική":4 }
		self.αριθμό_σε_πτώση  = { 0:"ονομαστική",   1:"γενική",   2:"δοτική",   3:"αιτιατική",   4:"κλητική"   }
		self.αριθμοί          = {   "ενικός":0,   "δυϊκός":5,    "πληθυντικός":10 }
		self.αριθμό_σε_αριθμό = { 0:"ενικός",   1:"δυϊκός",   2:"πληθυντικός"    }
		self.γένος_σε_αριθμό  = {   "αρσενικό":0,   "θηλυκό":1,   "ουδέτερο":2 }
		self.αριθμό_σε_γένος  = { 0:"αρσενικό",   1:"θηλυκό",   2:"ουδέτερο"   }
		self.αρ_πτ = {"δημοτική":[0, 1, 3, 4, 10, 11, 13, 14], "κοινή":range(15)}
		
		self.α = self.τ.κωδικοποιητής("α")&self.τ.γράμμα
		self.ως = self.τ.κωδικοποιητής("ως")&self.τ.γράμμα
		self.εως = self.τ.κωδικοποιητής("εως")&self.τ.γράμμα
	
	def dump(self, διάλεκτος=None, λέξη=None, develop=None):
		αποτέλεσμα = []
		if λέξη:
			if not διάλεκτος in self.dump_επίθετα and len(self.dump_επίθετα)==0:
				self.dump()
			νέο_αποτέλεσμα = {}
			if λέξη in self.dump_επίθετα[διάλεκτος]:
				offset = self.dump_επίθετα[διάλεκτος][λέξη]
				if offset>=0:
					γκΛέξη = self.δ.δ["θέματα"][offset]["κΛέξη"]
					κΣυνθετικό = self.δ.δ["θέματα"][offset].get("κΣυνθετικό")
					
					νέο_αποτέλεσμα["λήμμα"] = self.δ.δ["θέματα"][offset]["λήμμα"]
					νέο_αποτέλεσμα["διάλεκτος"] = διάλεκτος
					for στοιχείο in ["συνθετικό", "Μεταδεδομένα", "Κλίμακες"]:
						if στοιχείο in self.δ.δ["θέματα"][offset]:
							νέο_αποτέλεσμα[στοιχείο] = self.δ.δ["θέματα"][offset][στοιχείο]
					
					νέο_αποτέλεσμα["κλίσεις"] = []
					for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
						νέο_αποτέλεσμα["κλίσεις"].append([])
						κατηγορία = self.δ.δ["θέματα"][offset]["κατηγορίες"][self.γένος_σε_αριθμό[γένος]]
						τονισμός = self.δ.δ["θέματα"][offset]["τονισμοί"][self.γένος_σε_αριθμό[γένος]]
						νέο_αποτέλεσμα["κατηγορίες"] = str(self.δ.δ["θέματα"][offset]["κατηγορίες"])
						νέο_αποτέλεσμα["τονισμοί"] = str(self.δ.δ["θέματα"][offset]["τονισμοί"])
						for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
							for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
								κΛέξεις = self.__κλίνε(γκΛέξη, κατηγορία, τονισμός, διάλεκτος, γένος, αριθμός, πτώση, κΣυνθετικό)
								λέξεις = []
								for κΛέξη in κΛέξεις:
									λέξεις.append(self.τ.απο(κΛέξη, True))
								νέο_αποτέλεσμα["κλίσεις"][-1].append(λέξεις)
					if develop:
						αποτέλεσμα = νέο_αποτέλεσμα
					else:
						αποτέλεσμα = νέο_αποτέλεσμα["κλίσεις"]
				else:
					κατηγορία = abs(offset+1)
					νέο_αποτέλεσμα["κλίσεις"] = []
					for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
						νέο_αποτέλεσμα["κλίσεις"].append(self.δ.δ["ανώμαλα"]["επίθετο"][διάλεκτος][κατηγορία]["καταλήξεις"][γένος]["καταλήξεις"])
					νέο_αποτέλεσμα["κατηγορία"] = 0
					νέο_αποτέλεσμα["ανώμαλο"] = 1
					νέο_αποτέλεσμα["διάλεκτος"] = διάλεκτος
					for στοιχείο in ["Μεταδεδομένα", "Κλίμακες"]:
						if στοιχείο in self.δ.δ["ανώμαλα"]["επίθετο"][διάλεκτος][κατηγορία]:
							νέο_αποτέλεσμα[στοιχείο] =self.δ.δ["ανώμαλα"]["επίθετο"][διάλεκτος][κατηγορία][στοιχείο]
					if develop:
						αποτέλεσμα = νέο_αποτέλεσμα
					else:
						αποτέλεσμα = νέο_αποτέλεσμα["κλίσεις"]
		else:
			self.dump_επίθετα.clear()
			# προσθήκη ανώμαλων
			for διάλεκτος, σύνολα in self.δ.δ["ανώμαλα"]["επίθετο"].items():
				ακατηγορία = -1
				self.dump_επίθετα[διάλεκτος] = {}
				for σύνολο in σύνολα:
					ακατηγορία += 1
					if σύνολο:
						σλέξεις = σύνολο["καταλήξεις"]["αρσενικό"]["καταλήξεις"][0]
						for σλέξη in σλέξεις:
							if not σλέξη in self.dump_επίθετα[διάλεκτος]:
								σλέξη = σλέξη+str(ακατηγορία)
							self.dump_επίθετα[διάλεκτος][σλέξη] = -1-ακατηγορία
				
			γκατηγορία = 0
			for σύνολο in self.δ.δ["θέματα"]:
				if σύνολο and σύνολο["μέρος του λόγου"]=="επίθετο":
					διάλεκτος = σύνολο["διάλεκτος"]
					if διάλεκτος not in self.dump_επίθετα:
						self.dump_επίθετα[διάλεκτος] = {}
					κΛέξη = σύνολο["κΛέξη"]
					κατηγορία = σύνολο["κατηγορίες"][0]
					τονισμός = σύνολο["τονισμοί"][0]
					κΣυνθετικό = σύνολο.get("κΣυνθετικό")
					κΛέξεις = self.__κλίνε(κΛέξη, κατηγορία, τονισμός, διάλεκτος, "αρσενικό", "ενικός", "ονομαστική", κΣυνθετικό)
					for κΛέξη in κΛέξεις:
						σλέξη = self.τ.απο(κΛέξη, True)
						if σλέξη in self.dump_επίθετα[διάλεκτος]:
							σλέξη = σλέξη+str(γκατηγορία)
						self.dump_επίθετα[διάλεκτος][σλέξη] = γκατηγορία
				γκατηγορία += 1
			αποτέλεσμα = {}
			for διάλεκτος, λέξεις in self.dump_επίθετα.items():
				αποτέλεσμα[διάλεκτος] = list(λέξεις.keys())
				αποτέλεσμα[διάλεκτος].sort()
		
		return αποτέλεσμα
	
	def _αναγνώριση(self, κΛέξη, μέγεθος, διάλεκτος, με_καταλήξεις=False):
		αποτελέσματα = []
		if μέγεθος>2:
		
			if κΛέξη[-1]&self.τ.γράμμα==self.α[0]:
				επιρρήματα = []
				for αποτέλεσμα in αποτελέσματα:
					if αποτέλεσμα["αριθμός"]=="πληθυντικός":
						επιρρήματα_α = αποτέλεσμα.copy()
						επιρρήματα_α['μέρος του λόγου'] = "επίρρημα"
						επιρρήματα_α["κΛέξη"] = κΛέξη
						επιρρήματα_α["λήμμα"] = self.τ.απο(κΛέξη)
						del επιρρήματα_α['πτώση']
						del επιρρήματα_α['αριθμός']
						if 'κατηγορίες' in επιρρήματα_α:
							del επιρρήματα_α['κατηγορίες']
						del επιρρήματα_α['κατηγορία']
						if 'τονισμοί' in επιρρήματα_α:
							del επιρρήματα_α['τονισμοί']
						del επιρρήματα_α['γένος']
						del επιρρήματα_α['κΚατάληξη']
						del επιρρήματα_α['κατάληξη']
						επιρρήματα.append(επιρρήματα_α)
				αποτελέσματα += επιρρήματα
		
		return αποτελέσματα
	
	def __αναγνώριση_λημμάτων(self, κΛέξη, μέγεθος, διάλεκτος):
		ακατάληξη = κΛέξη.__deepcopy__(κΛέξη)
		self.τ.αφαίρεσε_τόνους(ακατάληξη)
		
		αποτελέσματα = []
		ακ = {}
		self.τ.keyfinder(self.ευρετήριο_λημμάτων[διάλεκτος], ακατάληξη[::-1], μέγεθος, ακ)
		for λγράμματα, λκατηγορίες in ακ.items():
			for λκατηγορία in λκατηγορίες:
				for αθοκατηγορία, λσύνολα in self.λήμματα[διάλεκτος][λκατηγορία].items():
					for λσύνολο in λσύνολα:
						if λγράμματα==μέγεθος and "συνθετικό" not in λσύνολο:
							νέο_σύνολο = {
								"διάλεκτος":διάλεκτος, 'κΛέξη':λσύνολο['κΛέξη'],
								'λήμμα':λσύνολο['λήμμα'], 'συχνότητα':λσύνολο['συχνότητα'],
								'μέρος του λόγου':"επίρρημα"}
							αποτελέσματα.append(νέο_σύνολο)
						elif λγράμματα<μέγεθος and "συνθετικό" in λσύνολο:
							νέο_σύνολο = {
								"διάλεκτος":διάλεκτος, 'κΛέξη':λσύνολο['κΛέξη'],
								'λήμμα':λσύνολο['λήμμα'], 'συχνότητα':λσύνολο['συχνότητα'],
								'συνθετικό':λσύνολο['συνθετικό'], "μέρος του λόγου":"επίρρημα"}
							αποτελέσματα.append(νέο_σύνολο)
		return αποτελέσματα
	
	def _πλήρη_κλίση(self, αναγνώριση):
		αποτέλεσμα = {}
		κΛέξη = αναγνώριση.get('κΛέξη')
		κατηγορίες = αναγνώριση.get('κατηγορίες')
		τονισμοί = αναγνώριση.get("τονισμοί")
		διάλεκτος = αναγνώριση['διάλεκτος']
		ανώμαλο = αναγνώριση.get("ανώμαλο")
		κΣυνθετικό = αναγνώριση.get("κΣυνθετικό")
		for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
			αποτέλεσμα[γένος] = []
			if not κατηγορίες:
				continue
			κατηγορία = κατηγορίες[self.γένος_σε_αριθμό[γένος]]
			τονισμός = τονισμοί[self.γένος_σε_αριθμό[γένος]]
			for αριθμός in ["ενικός", "δυϊκός", "πληθυντικός"]:
				for πτώση in ["ονομαστική", "γενική", "δοτική", "αιτιατική", "κλητική"]:
					αποτέλεσμα[γένος].append(self.__κλίνε(κΛέξη, κατηγορία, τονισμός, διάλεκτος, γένος, αριθμός, πτώση, κΣυνθετικό, ανώμαλο))
		return αποτέλεσμα
	
	def __κλίνε(self, κΛέξη, κατηγορία, τονισμός, διάλεκτος, γένος, αριθμός, πτώση, κΣυνθετικό=None, ανώμαλο=False):
		κΛέξεις = []
		
		if κατηγορία==-1:
			κΛέξεις = []
			return κΛέξεις

		θέση_στη_λίστα = self.πτώση_σε_αριθμό[πτώση]+self.αριθμοί[αριθμός] # αριθμός πτώσης και αριθμος «αριθμού»
		
		if ανώμαλο:
			if κατηγορία>len(self.δ.δ["ανώμαλα"]["επίθετο"][διάλεκτος]):
				return κΛέξεις
			κΛέξεις = self.δ.δ["ανώμαλα"]["επίθετο"][διάλεκτος][κατηγορία]["καταλήξεις"][γένος]["κΚαταλήξεις"][θέση_στη_λίστα]
			return κΛέξεις
		if κΣυνθετικό!=None:
			κΛήμμα = np.append(κΣυνθετικό, κΛέξη)
		else:
			κΛήμμα = κΛέξη
		
		if κατηγορία>len(self.δ.δ["καταλήξεις"]["επίθετο"][διάλεκτος]) or\
			not "κΚαταλήξεις" in self.δ.δ["καταλήξεις"]["επίθετο"][διάλεκτος][κατηγορία]:
			return [κΛήμμα.__deepcopy__(κΛήμμα)]
		καταλήξεις = self.δ.δ["καταλήξεις"]["επίθετο"][διάλεκτος][κατηγορία]["κΚαταλήξεις"][θέση_στη_λίστα]
		τόνοι = self.δ.δ["τονισμοί"]["επίθετο"][διάλεκτος][τονισμός]["τονισμοί"][θέση_στη_λίστα]*4
		
		υ=0
		for κατάληξη in καταλήξεις:
			if κατάληξη.any():
				if κΛήμμα.any():
					νέα_λέξη = np.append(κΛήμμα, κατάληξη, 0)
					self.τ.τόνισε(νέα_λέξη, τόνοι[υ])
				elif not κΛήμμα.any():
					νέα_λέξη = κατάληξη.__deepcopy__(κατάληξη)
					self.τ.τόνισε(νέα_λέξη, τόνοι[υ])

				κΛέξεις.append(νέα_λέξη)
			υ+=1
		return κΛέξεις

	def _κλίνε(self, κΛέξη, αριθμός=None, πτώση=None, γένος=None, διάλεκτος=None):
		αναγνωρίσεις = self._αναγνώριση._αναγνώριση(κΛέξη, self.δ, διάλεκτος)
		
		κΑποτελέσματα = []
		for αναγνώριση in αναγνωρίσεις:
			if αναγνώριση["μέρος του λόγου"]!="επίθετο" and\
				διάλεκτος and διάλεκτος != αναγνώριση['διάλεκτος']:
				continue
			
			if γένος==None:
				γένος = αναγνώριση["γένος"]
			if αριθμός==None:
				αριθμός = αναγνώριση["αριθμός"]
			if πτώση==None:
				πτώση = αναγνώριση["πτώση"][0]
			
			if 'κατηγορίες' in αναγνώριση:
				κατηγορία = αναγνώριση['κατηγορίες'][self.γένος_σε_αριθμό[γένος]]
				τονισμός = αναγνώριση['τονισμοί'][self.γένος_σε_αριθμό[γένος]]
			else:
				κατηγορία = αναγνώριση['ΑΑ']
				τονισμός = 0
			
			if "κΛέξη" in αναγνώριση:
				κΛέξη2 = αναγνώριση["κΛέξη"]
			else:
				κΛέξη2 = αναγνώριση['κΚατάληξη']
			
			if "ανώμαλο" in αναγνώριση and αναγνώριση["ανώμαλο"]:
				ανώμαλο = True
			else:
				ανώμαλο = False
				
			if "συνθετικό" in αναγνώριση and αναγνώριση["συνθετικό"]:
				κΣυνθετικό = αναγνώριση["κΣυνθετικό"]
			else:
				κΣυνθετικό = None
			
			κΑποτελέσματα += self.__κλίνε(κΛέξη2, κατηγορία, τονισμός, διάλεκτος, γένος, αριθμός, πτώση, κΣυνθετικό, ανώμαλο)
		return κΑποτελέσματα

	def κλίνε(self, λέξη, αριθμός=None, πτώση=None, γένος=None, διάλεκτος=None):
		if not λέξη:
			return []
		
		κΛέξη = self.τ.κωδικοποιητής(λέξη)
		κΑποτελέσματα = self._κλίνε(κΛέξη, αριθμός, πτώση, γένος, διάλεκτος)
		
		αποτελέσματα = []
		for κΑποτέλεσμα in κΑποτελέσματα:
			αποτέλεσμα = self.τ.απόκωδικοποιητής(κΑποτέλεσμα, με_ς=True)

			if αποτέλεσμα:
				αποτελέσματα.append(αποτέλεσμα)
		
		return list(set(αποτελέσματα))
	
	def κλίμακες(self, κατηγορία=None, τιμή=None, διάλεκτος=None):
		if not διάλεκτος:
			διάλεκτος = self.διάλεκτος
			
		if not κατηγορία:
			return list(self.δ.κλίμακες[διάλεκτος].keys())
		if not τιμή and κατηγορία in self.δ.κλίμακες[διάλεκτος]:
			return list(self.δ.κλίμακες[διάλεκτος][κατηγορία].keys())
		if τιμή in self.δ.κλίμακες[διάλεκτος][κατηγορία]:
			return list(self.δ.κλίμακες[διάλεκτος][κατηγορία][τιμή])
		
		return None
	
	def _stepsearch_κατάληξη(self, κΛήμμα, κατηγορία, τονισμός, διάλεκτος=None):
		"""Κλίνη λήμματα.

		Κλίνει το κΛήμμα σε όλους τους αριθμούς και πτώσεις.

		Μεταβλητές:
			κΛήμμα: κωδικοποιημένο λήμμα, πίνακας numpy
			κατηγορία: αριθμός κατηγορίας για την τρέχον διάλεκτο
			τονισμός: αριθμός τονισμού για την τρέχον διάλεκτο
			διάλεκτος: προαιρετικά

		Επιστρέφει:
		  Λεξικό στην μορφή: {0:κατάληξη:[[κλιμένη λέξη, αριθμός, πτώση],]}}
		  	0: χρησιμοποιείτε για ομοιομορφία στα stepsearch, απλοποίηση προγραμματισμού
		"""
		αποτέλεσμα = {0:{}} # κατάληξη, λέξη
		if διάλεκτος:
			τΔιάλεκτος = διάλεκτος
		else:
			τΔιάλεκτος = self.διάλεκτος
			
		for ν in self.αρ_πτ[τΔιάλεκτος]:
			υ = 0
			for υποκατάληξη in self.κατηγορίες[τΔιάλεκτος][κατηγορία]["καταλήξεις"][ν]:
				if not υποκατάληξη in αποτέλεσμα[0]:
					αποτέλεσμα[0][υποκατάληξη] = []
				κΚατάληξη = self.κατηγορίες[τΔιάλεκτος][κατηγορία]["κΚαταλήξεις"][ν][υ]
				αριθμός = self.αριθμό_σε_αριθμό[ν//5]
				πτώση = self.αριθμό_σε_πτώση[ν%5]
				for τόνο in τονισμός:
					τόνος = self.τονισμοί[τΔιάλεκτος][τόνο][ν][υ]
					
					κΛέξη = np.append(κΛήμμα, κΚατάληξη, 0)
					self.τ.τόνισε(κΛέξη, τόνος)
					λέξη = self.τ.απο(κΛέξη, με_ς=True)
					
					if λέξη not in αποτέλεσμα[0][υποκατάληξη]:
						αποτέλεσμα[0][υποκατάληξη].append([λέξη, "επίθετο", "γένος", αριθμός, πτώση])
				υ += 1
		
		for τόνο in τονισμός:
			τόνος = self.τονισμοί[τΔιάλεκτος][τόνο][10][0]
			for επ in [["ως", self.ως], ["α", self.α]]:
				κΛέξη = np.append(κΛήμμα, επ[1], 0)
				self.τ.τόνισε(κΛέξη, τόνος)
				λέξη = self.τ.απο(κΛέξη, με_ς=True)
				if επ[0] not in αποτέλεσμα[0]:
					αποτέλεσμα[0][επ[0]] = []
				αποτέλεσμα[0][επ[0]].append([λέξη, "επίρρημα"])
		
		return αποτέλεσμα
	
	def _ημικλίση(self, κΛέξη, bΛέξη, κμέγεθος, bμέγεθος, αριθμός, πτώση, γένος, άθροισμα, διάλεκτος=None):
		"""Κλίνει λήμματα.

		Κλίνει μαζικά όλα τα λήμματα που αρχίζουν από κΛέξη
		και γένος, στο συγκεκριμένο αριθμό και πτώση.

		Μεταβλητές:
			κΛέξη: κωδικοποιημένα αρχικά γράμματα του λήμματος, πίνακας numpy
			bΛέξη: απλοποιημένη έκδοση της κΛέξη, πίνακας numpy
			κμέγεθος: μέγεθος της κΛέξη
			bμέγεθος: μέγεθος της bΛέξη
			αριθμός:   Αποδεκτές τιμές "ενικός", "δυϊκός", "πληθυντικός".
			πτώση: 	  Αποδεκτές τιμές "ονομαστική", "γενική",
												"δοτική", "αιτιατική", "κλητική".
			γένος:	  Αποδεκτές τιμές "αρσενικό", "θηλυκό", "ουδέτερο"
			άθροισμα: του πίνακα numpy της κΛέξη
			διάλεκτος: προαιρετικά

		Επιστρέφει:
		  Λεξικό στην μορφή: {ΔΑ:κλιμένη λέξη:[[κλιμένη λέξη, αριθμός, πτώση],]}}
		  	ΔΑ:η διαφορά του αθροίσματος των αρχικών γραμμάτων από το άθροισμα της κΛέξη,
		  		0=καμία διαφορά, ΔΑ>0: διαφορά κατά ΔΑ
		"""
		# init
		αποτελέσματα = {}
		if διάλεκτος:
			τΔιάλεκτος = διάλεκτος
		else:
			τΔιάλεκτος = self.διάλεκτος
		
		# main
		τλήμματα = {}
		λεξικά = self.τ.stepfinder(self.bευρετήριο_λημμάτων[τΔιάλεκτος], bΛέξη, bμέγεθος, τλήμματα)
		
		λήμματα = []
		self.τ.rv(λεξικά, λήμματα, 0)
		α_γένος = self.γένος_σε_αριθμό[γένος]
		for aa in λήμματα:
			for κατηγορία, σύνολα in self.λήμματα[διάλεκτος][aa].items():
				for λήμμα in σύνολα:
					αθρ = (λήμμα['κΛέξη'][:κμέγεθος]&255).sum().item()
					αθρ = abs(αθρ-άθροισμα)+abs(λήμμα['κΛέξη'].size-κμέγεθος)
					
					if αθρ not in αποτελέσματα:
						αποτελέσματα[αθρ] = {}
						
					ονομασία = 'μέρος του λόγου'
					λέξη = λήμμα["λήμμα"]
						
					κατηγορία = λήμμα['κατηγορίες'][α_γένος]
					if κατηγορία==-1:
						νλέξη = self.τ.απόκωδικοποιητής(λέξη, με_ς=True)
						αποτελέσματα[αθρ][νλέξη] = [νλέξη, "επίθετο", γένος, αριθμός, [πτώση]]
					else:
						θέση = self.αριθμοί[αριθμός] + self.πτώση_σε_αριθμό[πτώση]
						κατάληξη = self.κατηγορίες[τΔιάλεκτος][κατηγορία]['κΚαταλήξεις'][θέση]
						
						τονισμός = λήμμα['τονισμοί'][α_γένος]
						τόνοι = self.τονισμοί[τΔιάλεκτος][τονισμός][θέση]
						if κατάληξη and τόνοι:
							υ = 0
							for ypo in κατάληξη:
								νέα_λέξη = np.append(λήμμα['κΛέξη'], ypo, 0) 
								self.τ.τόνισε(νέα_λέξη, τόνοι[υ])
								νλέξη = self.τ.απόκωδικοποιητής(νέα_λέξη, με_ς=True)
								αποτελέσματα[αθρ][νλέξη] = [νλέξη, "επίθετο", γένος, αριθμός, [πτώση]]
						υ += 1
		return αποτελέσματα
	
	def αριθμητικά(self, αριθμητικό, τύπος, πτώση, γένος, διάλεκτος, συνδιασμός="καὶ αντίστροφα", α=10):
		# τύπος:["καὶ","καὶ αντίστροφα",None]
		αποτελέσματα = []
		if α==0 or αριθμητικό<1:
			return []
		if διάλεκτος=="δημοτική":
			συνδιασμός = None
		α-=1
		if αριθμητικό == 1 or\
		 ((αριθμητικό//1000==1 or\
		 αριθμητικό//1000000==1 or\
		 αριθμητικό//1000000000==1 or\
		 αριθμητικό//1000000000000==1) and\
		 διάλεκτος=="δημοτική"):
			αριθμός = "ενικός"
		elif αριθμητικό % 10  == 2 and\
			διάλεκτος=="κοινή":
			αριθμός = "δυϊκός"
		else:
			αριθμός = "πληθυντικός"
		
		χιλιάδες = "χίλιοι"
		διαιρέτης = 10
		if αριθμητικό<100:
			διαιρέτης = 10
		elif αριθμητικό<1100:
			διαιρέτης = 100
		elif αριθμητικό<1000000:
			διαιρέτης = 1000
			κοινή = {
				100000:"δεκακισμύριοι",90000:"μύριοι",80000:"μύριοι",70000:"μύριοι",60000:"μύριοι",
				50000:"μύριοι",40000:"μύριοι",30000:"τρισμύριοι",20000:"δισμύριοι",10000:"μύριοι",
				9000:"ἐνακισχίλιοι",8000:"ὀκτακισχίλιοι",7000:"ἑπτακισχίλιοι",6000:"ἑξακισχίλιοι",
				5000:"πεντακισχίλιοι",4000:"τετρακισχίλιοι",3000:"τρισχίλιοι",2000:"δισχίλιοι",1000:"χίλιοι"}
			κλειδιά = list(κοινή.keys())
			κλειδιά.sort(reverse=True)
			if διάλεκτος=="κοινή":
				for κλειδί in κλειδιά:
					if αριθμητικό // κλειδί==1:
						χιλιάδες = κοινή[κλειδί]
						if αριθμητικό>30000:
							διαιρέτης = 10000
						else:
							διαιρέτης = κλειδί
						break
				if αριθμητικό>=200000:
					χιλιάδες = "μύριοι"
					διαιρέτης = 10000
			
			tmp = self.κλίνε(χιλιάδες, αριθμός, πτώση, γένος, διάλεκτος)
			if tmp:
				χιλιάδες = tmp[0]	
		elif διάλεκτος=="κοινή":
			χιλιάδες = "μύριοι"
			διαιρέτης = 10000
			χιλιάδες = self.κλίνε(χιλιάδες, αριθμός, πτώση, γένος, διάλεκτος)[0]
		elif αριθμητικό<1000000000:
			διαιρέτης = 1000000
			χιλιάδες = self.κλίνε("ἑκατομμύριο", αριθμός, πτώση, γένος, διάλεκτος)[0]
		elif αριθμητικό<1000000000000:
			διαιρέτης = 1000000000
			χιλιάδες = self.κλίνε("δισεκατομμύριο", αριθμός, πτώση, γένος, διάλεκτος)[0]
		else:
			διαιρέτης = 1000000000000
			χιλιάδες = self.κλίνε("τρισεκατομμύριο", αριθμός, πτώση, γένος, διάλεκτος)[0]
		
		if τύπος=="απόλυτα αριθμητικά":
			if τύπος in self.κλίμακα[διάλεκτος] and\
				αριθμητικό in self.κλίμακα[διάλεκτος][τύπος]:
				for ν in self.κλίμακα[διάλεκτος][τύπος][αριθμητικό]:
					if ν[-1]==-1:
						αποτελέσματα.append(self.τ.απόκωδικοποιητής(ν[0], με_ς=True))
					else:
						for α in self._κλίνε(ν[0], ν[-1], αριθμός, πτώση, γένος, διάλεκτος):
							αποτελέσματα.append(self.τ.απόκωδικοποιητής(α, με_ς=True))
			elif αριθμητικό<2000:
				α1 = αριθμητικό % διαιρέτης
				αποτέλεσμα1 = self.αριθμητικά(α1, τύπος, πτώση, γένος, διάλεκτος, συνδιασμός, α)
				α2 = (αριθμητικό//διαιρέτης)*διαιρέτης
				αποτέλεσμα2 = self.αριθμητικά(α2, τύπος, πτώση, γένος, διάλεκτος, συνδιασμός, α)
				for απ2 in αποτέλεσμα2:
					for απ1 in αποτέλεσμα1:
						if συνδιασμός=="καὶ αντίστροφα":
							αποτελέσματα.append(απ1+' καὶ '+απ2)
						elif συνδιασμός=="καὶ":
							αποτελέσματα.append(απ2+' καὶ '+απ1)
						else:
							αποτελέσματα.append(απ2+' '+απ1)
			else:
				α1 = (αριθμητικό//διαιρέτης)
				if διαιρέτης>100000:
					γένος2 = "ουδέτερο"
				elif διαιρέτης == 1000 and διάλεκτος=="δημοτική":
					γένος2 = "θηλυκό"
				else:
					γένος2 = γένος
				αποτέλεσμα1 = self.αριθμητικά(α1, τύπος, πτώση, γένος2, διάλεκτος, συνδιασμός, α)
				
				if διάλεκτος=="δημοτική" or αριθμητικό>39999:
					νn=0
					for νν in αποτέλεσμα1:
						αποτέλεσμα1[νn] = αποτέλεσμα1[νn]+" "+χιλιάδες
						νn+=1
				else:
					αποτέλεσμα1 = [χιλιάδες]
				α2 = αριθμητικό % διαιρέτης
				αποτέλεσμα2 = self.αριθμητικά(α2, τύπος, πτώση, γένος, διάλεκτος, συνδιασμός, α)
				if α2==0:
					αποτελέσματα = αποτέλεσμα1
				for απ2 in αποτέλεσμα2:
					for απ1 in αποτέλεσμα1:
						if συνδιασμός=="καὶ αντίστροφα":
							αποτελέσματα.append(απ2+' καὶ '+απ1)
						elif συνδιασμός=="καὶ":
							αποτελέσματα.append(απ1+' καὶ '+απ2)
						else:
							αποτελέσματα.append(απ1+' '+απ2)
		return αποτελέσματα

# TODO: κλίμακες, αριθμητικά
	