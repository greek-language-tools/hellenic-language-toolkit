#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from multiprocessing import Process, Pipe
τύπωσε = print
κείμενο = str
μήκος = len
εύρος = range

class Ευρετήρια():
	def __init__(self, τονιστής, διάλεκτοι):
		self.τ = τονιστής
		self.δ = διάλεκτοι
		self.αριθμός_πρόσωπα = {0:"α",	1:"β",	2:"γ"}
		self.αριθμό_σε_αριθμό = { 0:"ενικός", 1:"δυϊκός", 2:"πληθυντικός"}
		self.αριθμό_σε_πτώση = {0:"ονομαστική", 1:"γενική", 2:"δοτική", 3:"αιτιατική", 4:"κλητική"}
	
	def ευρετήριο(self, αναλύσεις, αναλύσεις_καταλήξεων, θέματα, αντίστροφο=True, απλοποιητής=None):
		ευρετήριο_ανώμαλων = {}
		ευρετήριο_καταλήξεων = {}
		ευρετήριο_θεμάτων = {}
		θέση = -1
		for σύνολο in αναλύσεις:
			θέση += 1
			if 'κΚατάληξη' in σύνολο:
				if σύνολο['κΚατάληξη'].__class__==list:
					print(σύνολο)
				κΑντίγραφο = σύνολο['κΚατάληξη'].__deepcopy__(σύνολο['κΚατάληξη'])
			elif 'κΛέξη' in σύνολο:
				κΑντίγραφο = σύνολο['κΛέξη'].__deepcopy__(σύνολο['κΛέξη'])
			else:
				print("Eυρετήρια, προβληματικό ανώμαλο", σύνολο)
				continue
			self.__προσθήκη(κΑντίγραφο, ευρετήριο_ανώμαλων, θέση)
			
		θέση = 0
		for σύνολο in αναλύσεις_καταλήξεων:
			if σύνολο["μέρος του λόγου"]=="αντωνυμία":
				print("αντωνυμία",σύνολο)
			if 'κΚατάληξη' in σύνολο:
				κΑντίγραφο = σύνολο['κΚατάληξη'].__deepcopy__(σύνολο['κΚατάληξη'])
			elif 'κΛέξη' in σύνολο:
				κΑντίγραφο = σύνολο['κΛέξη'].__deepcopy__(σύνολο['κΛέξη'])
			else:
				print("Eυρετήρια, προβληματική κατάληξη", σύνολο)
				continue
			self.__προσθήκη(κΑντίγραφο, ευρετήριο_καταλήξεων, θέση)
			θέση += 1
		θέση = -1
		for σύνολο in θέματα:
			θέση += 1
			if σύνολο["μέρος του λόγου"]=="ρήμα":
				for συνθ in ["συνθετικό", "αύξηση", "ενεστωτική αύξηση", "αύξηση παρακείμενου"]:
					if συνθ in σύνολο and σύνολο[συνθ]:
						κΑντίγραφο = self.τ.κωδικοποιητής(σύνολο[συνθ]+σύνολο["λήμμα"])
						self.__προσθήκη(κΑντίγραφο, ευρετήριο_θεμάτων, θέση)
						if self.τ.φωνήεν&κΑντίγραφο[0]:
							self.τ.αποτονιστής(κΑντίγραφο)
							κΑντίγραφο &= self.τ.γράμμα
							self.__προσθήκη(κΑντίγραφο, ευρετήριο_θεμάτων, θέση)
			if σύνολο["μέρος του λόγου"]!="ρήμα" and\
				"συνθετικό" in σύνολο and σύνολο["συνθετικό"]:
				κΑντίγραφο = self.τ.κωδικοποιητής(σύνολο["συνθετικό"]+σύνολο["λήμμα"])
			elif 'κΛέξη' in σύνολο:
				κΑντίγραφο = σύνολο['κΛέξη'].__deepcopy__(σύνολο['κΛέξη'])
			else:
				print("Eυρετήρια, προβληματικό θέμα", σύνολο)
				continue
			
			self.__προσθήκη(κΑντίγραφο, ευρετήριο_θεμάτων, θέση)
			
		return [ευρετήριο_ανώμαλων, ευρετήριο_καταλήξεων, ευρετήριο_θεμάτων]
	
	def __σύνολο_ονόματος(self, σύνολο):
		διάλεκτος = σύνολο["διάλεκτος"]
		νέα_σύνολα = []
		for αριθμός_αριθμού in [0, 5, 10]:
			νέες_καταλήξεις = {}
			for αριθμός_πτώσης in range(5):
				θέση = αριθμός_αριθμού+αριθμός_πτώσης
				if θέση not in self.δ[διάλεκτος]["πτώσεις"]:
					continue
				
				κατάληξη = σύνολο["καταλήξεις"][θέση]
				αριθμός = self.αριθμό_σε_αριθμό[αριθμός_αριθμού // 5]
				πτώση = self.αριθμό_σε_πτώση[αριθμός_πτώσης % 5]

				υ = 0
				for υποΚατάληξη in κατάληξη:
					κΚατάληξη = σύνολο["κΚαταλήξεις"][θέση][υ]
					
					if υποΚατάληξη in νέες_καταλήξεις and\
						πτώση not in νέες_καταλήξεις[υποΚατάληξη]['πτώση']:
						νέες_καταλήξεις[υποΚατάληξη]['πτώση'].append(πτώση)
						νέες_καταλήξεις[υποΚατάληξη]['πτώση'].sort()
					else:
						νέο_σύνολο = {'αριθμός':αριθμός, 'πτώση':[πτώση],
							"κΚατάληξη":κΚατάληξη, "μέρος του λόγου":σύνολο['μέρος του λόγου'],
							'κατάληξη':υποΚατάληξη, 'κατηγορία':σύνολο['ΑΑ'],
							"διάλεκτος":σύνολο["διάλεκτος"]}
						χρόνος = σύνολο.get("χρόνος")
						if χρόνος:
							νέο_σύνολο["χρόνος"] = χρόνος
						νέες_καταλήξεις[υποΚατάληξη] = νέο_σύνολο
					υ+=1
			νέα_σύνολα += νέες_καταλήξεις.values()	
		return νέα_σύνολα
	
	def __σύνολο_ρήματος(self, σύνολο):
		διάλεκτος = σύνολο["διάλεκτος"]
		χρόνος = σύνολο["χρόνος"]
		νέα_σύνολα = []
		
		for θέση in range(len(σύνολο["καταλήξεις"])):
			κατάληξη = σύνολο["καταλήξεις"][θέση]
			αριθμός = self.αριθμό_σε_αριθμό[θέση//3]
			πρόσωπο = self.αριθμός_πρόσωπα[θέση%3]
			υ=0
			for υποκατάληξη in κατάληξη:
				if υποκατάληξη:
					νέο_σύνολο = {'διάλεκτος':διάλεκτος, 'χρόνος':χρόνος, 
						'κατηγορία':σύνολο["ΑΑ"], "μέρος του λόγου":σύνολο["μέρος του λόγου"],
						'κατάληξη':υποκατάληξη,	'κΚατάληξη':σύνολο["κΚαταλήξεις"][θέση][υ],
						"διάλεκτος":σύνολο["διάλεκτος"]}
					if len(σύνολο["καταλήξεις"])==1:
						σύνολο['έγκλιση'] = 'απαρέμφατο'
					else:
						νέο_σύνολο['αριθμός'] = αριθμός
						νέο_σύνολο['πρόσωπο'] = πρόσωπο
					νέα_σύνολα.append(νέο_σύνολο)
				υ += 1
		
		return νέα_σύνολα
	
	def __σύνολο_μετοχής(self, σύνολο):
		διάλεκτος = σύνολο["διάλεκτος"]
		διάλεκτος = διάλεκτος.capitalize()
		
		νέα_σύνολα = []
		υ = 0
		for υποΚατάληξη in σύνολο["καταλήξεις"][0]:
			κΚατάληξη = σύνολο["κΚαταλήξεις"][0][υ]
			νέο_σύνολο = {"χρόνος":σύνολο["χρόνος"],
				"κΚατάληξη":κΚατάληξη, "μέρος του λόγου":σύνολο['μέρος του λόγου'],
				'κατάληξη':υποΚατάληξη, 'κατηγορία':σύνολο['ΑΑ'],
				"διάλεκτος":σύνολο["διάλεκτος"]}
			νέα_σύνολα.append(νέο_σύνολο)	
			υ+=1
		
		return νέα_σύνολα
	
	def _διαγραφή_θέματος(self, ακΛέξη, θέση, διάλεκτος):
		κΛέξη = ακΛέξη.__deepcopy__(ακΛέξη)
		self.τ.removekey(self.θεμάτων[διάλεκτος], κΛέξη[::-1], θέση, κΛέξη.size)
		if self.τ.φωνήεν&κΛέξη[0]:
			self.τ.αποτονιστής(κΛέξη)
			κΛέξη &= self.τ.γράμμα
			self.τ.keymaker(self.θεμάτων[διάλεκτος], κΛέξη[::-1], θέση, κΛέξη.size)
		
		bΛήμμα = self.τ.απλοποιητής(κΛέξη)
		self.τ.keymaker(self.bθεμάτων[διάλεκτος], bΛήμμα, θέση, bΛήμμα.size)
	
	def _προσθήκη_θέματος(self, ακΛέξη, θέση, διάλεκτος):
		κΛέξη = ακΛέξη.__deepcopy__(ακΛέξη)
		self.τ.keymaker(self.θεμάτων[διάλεκτος], κΛέξη[::-1], θέση, κΛέξη.size)
		if self.τ.φωνήεν&κΛέξη[0]:
			self.τ.αποτονιστής(κΛέξη)
			κΛέξη &= self.τ.γράμμα
			self.τ.keymaker(self.θεμάτων[διάλεκτος], κΛέξη[::-1], θέση, κΛέξη.size)
	
	def __θεμάτων(self, θέματα, child_conn):
		θεμάτων = {}
		for διάλεκτος, σύνολα in θέματα.items():#self.δ.θέματα.items():
			θεμάτων[διάλεκτος] = {}
			bθεμάτων[διάλεκτος] = {}
			αα = 0
			for σύνολο in σύνολα:
				συνθετικό = None
				if σύνολο["μέρος του λόγου"]=="ρήμα":
					for συνθ in ["συνθετικό", "αύξηση", "ενεστωτική αύξηση", "αύξηση παρακείμενου"]:
						if συνθ in σύνολο:
							συνθετικό = self.τ.κωδικοποιητής(σύνολο[συνθ]+σύνολο["θέμα"])
							self.τ.keymaker(θεμάτων[διάλεκτος], συνθετικό[::-1], αα, συνθετικό.size)
							if self.τ.φωνήεν&συνθετικό[0]:
								self.τ.αποτονιστής(συνθετικό)
								συνθετικό &= self.τ.γράμμα
								self.τ.keymaker(θεμάτων[διάλεκτος], συνθετικό[::-1], αα, συνθετικό.size)
				else:
					if "συνθετικό" in σύνολο:
						συνθετικό = self.τ.κωδικοποιητής(σύνολο["συνθετικό"]+σύνολο["λήμμα"])
						self.τ.keymaker(θεμάτων[διάλεκτος], συνθετικό[::-1], αα, συνθετικό.size)
						if self.τ.φωνήεν&συνθετικό[0]:
							self.τ.αποτονιστής(συνθετικό)
							συνθετικό &= self.τ.γράμμα
							self.τ.keymaker(θεμάτων[διάλεκτος], συνθετικό[::-1], αα, συνθετικό.size)
							
						bΛήμμα = self.τ.απλοποιητής(συνθετικό)
						self.τ.keymaker(bθεμάτων[διάλεκτος], bΛήμμα, αα, bΛήμμα.size)
				if "συνθετικό" not in σύνολο:
					self.τ.keymaker(θεμάτων[διάλεκτος], σύνολο["κΛέξη"][::-1], αα, σύνολο["κΛέξη"].size)
					if σύνολο["κΛέξη"].size and self.τ.φωνήεν&σύνολο["κΛέξη"][0]:
						cλέξη = σύνολο["κΛέξη"].__deepcopy__(σύνολο["κΛέξη"])
						self.τ.αποτονιστής(cλέξη)
						cλέξη &= self.τ.γράμμα
						self.τ.keymaker(θεμάτων[διάλεκτος], cλέξη[::-1], αα, cλέξη.size)
					
				αα += 1
	
	def __προσθήκη(self, κΑντίγραφο, ευρετήριο, θέση):
		self.τ.keymaker(ευρετήριο, κΑντίγραφο[::-1], θέση, κΑντίγραφο.size)
		self.τ.αποτονιστής(κΑντίγραφο)
		κΑντίγραφο &= self.τ.γράμμα
		self.τ.keymaker(ευρετήριο, κΑντίγραφο[::-1], θέση, κΑντίγραφο.size)
#		if "," in κατάληξη:
#			νέα_κάταληξη = κατάληξη.replace(",", "")
#			kk = self.τ.κωδικοποιητής(νέα_κάταληξη)
#			self.τ.keymaker(ανώμαλα, kk[::-1], μμ, kk.size)
#			self.τ.αποτονιστής(kk)
#			kk &= self.τ.γράμμα
#			self.τ.keymaker(ανώμαλα, kk[::-1], μμ, kk.size)
	
	def αναλύσεις(self, ανώμαλα, καταλήξεις):
		rανώμαλα, rκαταλήξεις, κατηγορίες_αντωνυμιών = [], [], {}
		for μέρος_του_λόγου, διάλεκτοι in ανώμαλα.items():
			if μέρος_του_λόγου in ["επιφώνημα", "μόριο", "σύνδεσμος", "πρόθεση", "επίρρημα"]:
				for διάλεκτος, σύνολα in διάλεκτοι.items():
					rανώμαλα += σύνολα
			elif μέρος_του_λόγου in ["άρθρο", "επίθετο"]:
				for διάλεκτος, σύνολα in διάλεκτοι.items():
					for σύνολο in σύνολα:
						if σύνολο:
							rανώμαλα += self.__ανώμαλο_επίθετο(σύνολο)
			elif μέρος_του_λόγου=="ουσιαστικό":
				for διάλεκτος, σύνολα in διάλεκτοι.items():
					for σύνολο in σύνολα:
						if σύνολο:
							if "λήμμα" in σύνολο:
								rανώμαλα.append(σύνολο)
							elif "καταλήξεις" in σύνολο:
								rανώμαλα += self.__ανώμαλο_ουσιαστικό(σύνολο)
							else:
								print("ΣΦΑΛΜΑ στο Ανώμαλο ουσιαστικό",σύνολο)
			elif μέρος_του_λόγου=="αντωνυμία":
				for διάλεκτος, σύνολα in διάλεκτοι.items():
					κατηγορίες_αντωνυμιών[διάλεκτος] = {}
					αα = -1
					for σύνολο in σύνολα:
						αα += 1
						if σύνολο:
							rανώμαλα += self.__ανώμαλη_αντωνυμία(σύνολο, κατηγορίες_αντωνυμιών[διάλεκτος], αα)				
			elif μέρος_του_λόγου=="ρήμα":
				for διάλεκτος, σύνολα in διάλεκτοι.items():
					for σύνολο in σύνολα:
						if σύνολο:
							rανώμαλα += self.__ανώμαλο_ρήμα(σύνολο)
		
		for μέρος_του_λόγου, διάλεκτοι in καταλήξεις.items():
			for διάλεκτος, άλλο in διάλεκτοι.items():
				if μέρος_του_λόγου in ["ρήμα", "μετοχή"]:
					for χρόνος, σύνολα in άλλο.items():
						for σύνολο in σύνολα:
							νέα_σύνολα = []
							if σύνολο["καταλήξεις"]:
								if μέρος_του_λόγου=="μετοχή":
									if len(σύνολο["καταλήξεις"])==15:
										νέα_σύνολα = self.__σύνολο_ονόματος(σύνολο)
									elif len(σύνολο["καταλήξεις"])==1:
										νέα_σύνολα = self.__σύνολο_μετοχής(σύνολο)
								elif μέρος_του_λόγου=="ρήμα":
									νέα_σύνολα = self.__σύνολο_ρήματος(σύνολο)
							if νέα_σύνολα:
								rκαταλήξεις += νέα_σύνολα
				else:
					for σύνολο in άλλο:
						νέα_σύνολα = []
						if σύνολο["καταλήξεις"]:
							νέα_σύνολα = self.__σύνολο_ονόματος(σύνολο)
						if νέα_σύνολα:
							rκαταλήξεις += νέα_σύνολα
				
		return [rανώμαλα, rκαταλήξεις, κατηγορίες_αντωνυμιών]
		
	def __ανώμαλο_επίθετο(self, σύνολο):
		map = []
		for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
			for ααριθμός in [0, 5, 10]:
				tΚαταλήξεις = {}
				for ν in range(5):
					κατάληξη = σύνολο["καταλήξεις"][γένος]["καταλήξεις"][ααριθμός+ν]
					κΚατάληξη = σύνολο["καταλήξεις"][γένος]["κΚαταλήξεις"][ααριθμός+ν]
					υπο = []
					αριθμός = self.αριθμό_σε_αριθμό[ααριθμός//5]
					πτώση = self.αριθμό_σε_πτώση[ν]
					υ = 0
					for υποκατάληξη in κατάληξη:
						if not υποκατάληξη:
							continue
						
						if υποκατάληξη in tΚαταλήξεις:
							tΚαταλήξεις[υποκατάληξη]['πτώση'].append(πτώση)
							tΚαταλήξεις[υποκατάληξη]['πτώση'].sort()
						else:
							tΚαταλήξεις[υποκατάληξη] = {
								'διάλεκτος':σύνολο["διάλεκτος"], 
								'ΑΑ':σύνολο["ΑΑ"], "μέρος του λόγου":"άρθρο", 
								'αριθμός': αριθμός, 'πτώση': [πτώση], "γένος":γένος,
								'κατάληξη':υποκατάληξη,	'κΚατάληξη':κΚατάληξη[υ], "ανώμαλο":True
								}
							tΚαταλήξεις[υποκατάληξη]['Μεταδεδομένα'] = σύνολο['Μεταδεδομένα']
							tΚαταλήξεις[υποκατάληξη]['Κλίμακες'] = σύνολο['Κλίμακες']
						υ += 1
				
				for υποκατάληξη, νσύνολο in tΚαταλήξεις.items():
					map.append(νσύνολο)
		return map
		
	def __ανώμαλο_ουσιαστικό(self, σύνολο):
		map = []
		for ααριθμός in [0, 5, 10]:
			tΚαταλήξεις = {}
			for ν in range(5):
				κατάληξη = σύνολο["καταλήξεις"]["καταλήξεις"][ααριθμός+ν]
				κΚατάληξη = σύνολο["καταλήξεις"]["κΚαταλήξεις"][ααριθμός+ν]
				υπο = []
				αριθμός = self.αριθμό_σε_αριθμό[ααριθμός//5]
				πτώση = self.αριθμό_σε_πτώση[ν]
				υ = 0
				for υποκατάληξη in κατάληξη:
					if not υποκατάληξη:
						continue
					
					if υποκατάληξη in tΚαταλήξεις:
						tΚαταλήξεις[υποκατάληξη]['πτώση'].append(πτώση)
						tΚαταλήξεις[υποκατάληξη]['πτώση'].sort()
					else:
						tΚαταλήξεις[υποκατάληξη] = {'διάλεκτος':σύνολο["διάλεκτος"], 
							'ΑΑ':σύνολο["ΑΑ"], "μέρος του λόγου":"ουσιαστικό", 
							'αριθμός': αριθμός, 'πτώση': [πτώση], 
							'κατάληξη':υποκατάληξη,	'κΚατάληξη':κΚατάληξη[υ], "ανώμαλο":True
							}
						if "ανώμαλο γένος" in σύνολο:
							tΚαταλήξεις[υποκατάληξη]["γένος"] = σύνολο["ανώμαλο γένος"][ααριθμός+ν][υ]
						elif "γένος" in σύνολο:
							tΚαταλήξεις[υποκατάληξη]["γένος"] = σύνολο["γένος"]
						tΚαταλήξεις[υποκατάληξη]['Μεταδεδομένα'] = σύνολο['Μεταδεδομένα']
						tΚαταλήξεις[υποκατάληξη]['Κλίμακες'] = σύνολο['Κλίμακες']
						
					υ += 1
				
			for υποκατάληξη, νσύνολο in tΚαταλήξεις.items():
				map.append(νσύνολο)
		return map
		
	def __ανώμαλο_ρήμα(self, σύνολο):
		map = []
		if "ρήμα" in σύνολο["καταλήξεις"]:
			for χρόνο, φωνές in σύνολο["καταλήξεις"]["ρήμα"].items():
				for φωνή, εγκλίσεις in φωνές.items():
					for έγκλιση, τιμές in εγκλίσεις.items():
						νέο_σύνολο = {'διάλεκτος':σύνολο["διάλεκτος"], 'χρόνος':χρόνο, 
									 'φωνή':φωνή, "έγκλιση":έγκλιση,
									 'κατηγορία':σύνολο["ΑΑ"], "ανώμαλο":True,
									 "μέρος του λόγου":"ρήμα"
									 }
						ββ = 0
						for κατάληξη in τιμές["καταλήξεις"]:
							αριθμός = self.αριθμό_σε_αριθμό[ββ//3]
							πρόσωπο = self.αριθμός_πρόσωπα[ββ%3]
							υα = 0
							for κΥπο in κατάληξη:
								if len(κΥπο)==0:
									continue
								σύνολο2 = {}
								σύνολο2.update(νέο_σύνολο) 
								σύνολο2['κατάληξη'] = τιμές["καταλήξεις"][ββ][υα]
								σύνολο2['κΚατάληξη'] = τιμές["κΚαταλήξεις"][ββ][υα]
								if len(τιμές["καταλήξεις"])>1:
									σύνολο2['αριθμός'] = αριθμός
									σύνολο2['πρόσωπο'] = πρόσωπο
								
								map.append(σύνολο2)
								υα += 1
							ββ += 1
			
		if "μετοχή" in σύνολο["καταλήξεις"]:
			for χρόνος, φωνές in σύνολο["καταλήξεις"]["μετοχή"].items():
				for φωνή, γένη in φωνές.items():
					for γένος, τιμές in γένη.items():
						for ααριθμός in [0, 5, 10]:
							tΚαταλήξεις = {}
							for ν in range(5):
								κατάληξη = γένη[γένος]["καταλήξεις"][ααριθμός+ν]
								κΚατάληξη = γένη[γένος]["κΚαταλήξεις"][ααριθμός+ν]
								
								αριθμός = self.αριθμό_σε_αριθμό[ααριθμός//5]
								πτώση = self.αριθμό_σε_πτώση[ν]
								υ = 0
								for υποκατάληξη in κατάληξη:
									if not υποκατάληξη:
										continue
									
									if υποκατάληξη in tΚαταλήξεις:
										tΚαταλήξεις[υποκατάληξη]['πτώση'].append(πτώση)
										tΚαταλήξεις[υποκατάληξη]['πτώση'].sort()
									else:
										tΚαταλήξεις[υποκατάληξη] = {'διάλεκτος':σύνολο["διάλεκτος"], 'χρόνος':χρόνος, 
											'κατηγορία':σύνολο["ΑΑ"], 'φωνή':φωνή,"μέρος του λόγου":"μετοχή", 
											'αριθμός': αριθμός, 'πτώση': [πτώση], "γένος":γένος,									
											'κατάληξη':υποκατάληξη,	'κΚατάληξη':κΚατάληξη[υ], "ανώμαλο":True}
									υ += 0
							for υποκατάληξη, νσύνολο in tΚαταλήξεις.items():
								map.append(νσύνολο)
						
		return map
		
	def __ανώμαλη_αντωνυμία(self, σύνολο, κατηγορίες_αντωνυμιών, αα):
		map = []
		if σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0] not in κατηγορίες_αντωνυμιών:
			κατηγορίες_αντωνυμιών[σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]] = {}
		if σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]=="προσωπική":
			if σύνολο["Μεταδεδομένα"]["τύπος"][0] not in κατηγορίες_αντωνυμιών["προσωπική"]:
				κατηγορίες_αντωνυμιών["προσωπική"][σύνολο["Μεταδεδομένα"]["τύπος"][0]] = αα
		elif σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]=="οριστική":
			κατηγορίες_αντωνυμιών["οριστική"] = αα
		elif σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]=="κτητική":
			if "κτήτορες" in σύνολο["Μεταδεδομένα"]:
				κατηγορίες_αντωνυμιών["κτητική"][σύνολο["Μεταδεδομένα"]["κτήτορες"][0]] = αα
			else:
				κατηγορίες_αντωνυμιών["κτητική"] = αα
		elif σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]=="αυτοπαθής":
			κατηγορίες_αντωνυμιών["αυτοπαθής"] = αα
		elif σύνολο["Μεταδεδομένα"]["τύπος αντωνυμίας"][0]=="αλληλοπαθητική":
			κατηγορίες_αντωνυμιών["αλληλοπαθητική"] = αα
				
		if "κατάληξη" in σύνολο:
			νέο = {
				'διάλεκτος':σύνολο['διάλεκτος'], "μέρος του λόγου":"αντωνυμία", 
				"ΑΑ":σύνολο['ΑΑ'],
				'κατηγορία':αα, 'Μεταδεδομένα':σύνολο['Μεταδεδομένα'],	
				'κατάληξη':σύνολο["κατάληξη"], 'κΚατάληξη':σύνολο["κΚατάληξη"], "ανώμαλο":True }
			map.append(νέο)
			return map
		for γένος, τιμές in σύνολο["καταλήξεις"].items():
			if γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
				for ααριθμός in [0, 5, 10]:
					tΚαταλήξεις = {}
					for ν in range(5):
						κατάληξη = τιμές["καταλήξεις"][ααριθμός+ν]
						κΚατάληξη = τιμές["κΚαταλήξεις"][ααριθμός+ν]
						
						αριθμός = self.αριθμό_σε_αριθμό[ααριθμός//5]
						πτώση = self.αριθμό_σε_πτώση[ν]
						υ = 0
						for υποκατάληξη in κατάληξη:
							if not υποκατάληξη:
								continue
							
							if υποκατάληξη in tΚαταλήξεις:
								tΚαταλήξεις[υποκατάληξη]['πτώση'].append(πτώση)
								tΚαταλήξεις[υποκατάληξη]['πτώση'].sort()
							else:
								tΚαταλήξεις[υποκατάληξη] = {'διάλεκτος':σύνολο['διάλεκτος'], 
									'κατηγορία':αα, "μέρος του λόγου":"αντωνυμία", "ΑΑ":σύνολο['ΑΑ'],
									'αριθμός': αριθμός, 'πτώση': [πτώση], "γένος":γένος,
									'Μεταδεδομένα':σύνολο['Μεταδεδομένα'],	"ανώμαλο":True,	
									'κατάληξη':υποκατάληξη,	'κΚατάληξη':κΚατάληξη[υ], 
									}
							υ += 1
					
					for υποκατάληξη, σύνολο in tΚαταλήξεις.items():
						map.append(σύνολο)
					
			elif γένος in ["α", "β", "γ"]:
				for γένος2, τιμές2 in τιμές.items():
					for ααριθμός in [0, 5, 10]:
						tΚαταλήξεις = {}
						for ν in range(5):
							κατάληξη = τιμές2["καταλήξεις"][ααριθμός+ν]
							κΚατάληξη = τιμές2["κΚαταλήξεις"][ααριθμός+ν]
							αριθμός = self.αριθμό_σε_αριθμό[ααριθμός//5]
							πτώση = self.αριθμό_σε_πτώση[ν]
							υ = 0
							for υποκατάληξη in κατάληξη:
								if not υποκατάληξη:
									continue
								
								if υποκατάληξη in tΚαταλήξεις:
									tΚαταλήξεις[υποκατάληξη]['πτώση'].append(πτώση)
									tΚαταλήξεις[υποκατάληξη]['πτώση'].sort()
									υ += 1
								else:
									tΚαταλήξεις[υποκατάληξη] = {'διάλεκτος':σύνολο['διάλεκτος'], 
										'κατηγορία':αα, "μέρος του λόγου":"αντωνυμία", "ΑΑ":σύνολο['ΑΑ'],
										'αριθμός': αριθμός, 'πτώση': [πτώση], "γένος":γένος2,
										'Μεταδεδομένα':σύνολο['Μεταδεδομένα'],	"πρόσωπο":γένος,							
										'κατάληξη':υποκατάληξη,	'κΚατάληξη':κΚατάληξη[υ], "ανώμαλο":True
										}
									υ += 1
									if "αρσενικό" in τιμές and\
										τιμές["αρσενικό"]["καταλήξεις"][ααριθμός+ν]==τιμές["θηλυκό"]["καταλήξεις"][ααριθμός+ν] and\
										τιμές["αρσενικό"]["καταλήξεις"][ααριθμός+ν]==τιμές["ουδέτερο"]["καταλήξεις"][ααριθμός+ν]:
										if γένος2=="αρσενικό":
											del tΚαταλήξεις[υποκατάληξη]["γένος"]
										else:
											tΚαταλήξεις[υποκατάληξη].clear()
											del tΚαταλήξεις[υποκατάληξη]
											continue
						
						for υποκατάληξη, σύνολο in tΚαταλήξεις.items():
							map.append(σύνολο)
			
		return map
