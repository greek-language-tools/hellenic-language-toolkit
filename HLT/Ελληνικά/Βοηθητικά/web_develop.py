#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012, dimitriadis dimitris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#		notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#		notice, this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#	 * Neither the name of the dimitriadis dimitris nor the
#		names of its contributors may be used to endorse or promote products
#		derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL dimitriadis dimitris BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import json, os
import cherrypy
import threading
import numpy as np
from copy import deepcopy
users = {"admin":"admin"}
def clear_text(mypass):
	return mypass

class web_develop():
	def __init__(self, ελληνικά, json_out=False):
		self.json_out = json_out
		self.στίξη = {
			",":"κόμμα", " ":"κενό", ".":"τελεία", 
			"·":"άνω τελεία", "-":"ενωτικό"}
		self.map_κατηγορίες = {"ουσιαστικό":{}, "επίθετο":{}, "ρήμα":{}}
		self.map_τονισμοί = {"ουσιαστικό":{}, "επίθετο":{}}
		self.ελληνικά = ελληνικά
		self.θέματα = {}
	
	@cherrypy.expose
	def log_out(self):
		cherrypy.lib.sessions.expire()
		raise cherrypy.HTTPRedirect("http://localhost:7000/HLT/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CE%AC/index.html")
        
	@cherrypy.expose
	@cherrypy.tools.encode(encoding='UTF-8')
	def HLT(self, *kwd):
		n=len(kwd)
		dkwd = []
		for k in kwd:
			dkwd.append(k.encode('latin').decode('utf-8'))
		
		#print("ΕΙΣΟΔΟΣ",dkwd)
		dump = []
		ρμ="ρήμα"
		ομάδα = self.ελληνικά.γ._δεδομένα.δ["ομάδες"][ρμ]["δημοτική"][13]
		ομάδα2 = self.ελληνικά.γ._δεδομένα.δ["ομάδες"][ρμ]["δημοτική"][137]
		if n>3 and dkwd[1]=="develop":
			dkwd[3] = dkwd[3].replace("'undefined'","None")
			dkwd[3] = eval(dkwd[3].replace("null", "None").replace("true", "True"))
			σύνολο = dkwd[3]
			if dkwd[2]=="ορθογραφία_διαγραφή":
				πακέτο = dkwd[3]
				self.ελληνικά.γ._δεδομένα.ορθογραφία_διαγραφή(πακέτο)
				return "OK"
			elif dkwd[2]=="ορθογραφία_αποθήκευση":
				πακέτο = dkwd[3]
				for τύπο in ["αρχή", "μέση", "τέλος"]:
					νέο = {}
					for k, v in πακέτο[τύπο].items():
						k2 = k.strip()
						νέο[k2] = []
						for vv in v:
							v2 = vv.split(" ")
							for v3 in v2:
								if v3:
									νέο[k2].append(v3.strip())
					πακέτο[τύπο] = νέο
				πακέτο["όνομα"] = πακέτο["όνομα"].strip()
				self.ελληνικά.γ._δεδομένα.ορθογραφία_νέα(πακέτο)
				return "OK"
			elif dkwd[2]=="ορθογραφία_δοκιμή":
				πακέτο = dkwd[3]
				for τύπο in ["αρχή", "μέση", "τέλος"]:
					νέο = {}
					for k, v in πακέτο[τύπο].items():
						k2 = k.strip()
						νέο[k2] = []
						for vv in v:
							v2 = vv.split(" ")
							for v3 in v2:
								if v3:
									νέο[k2].append(v3.strip())
					πακέτο[τύπο] = νέο
				dump.append(self.ελληνικά.γ._εκτίμηση._bΛέξεις(πακέτο["λέξη"], πακέτο))
				return str(dump)
				# ορθογραφία = {"όνομα":{"πνεύματα":False, "τόνοι":False,
				#		"αρχή":{"ε":["ε","αι"]},"μέση":{}, "τέλος":{}}}
			elif dkwd[2]=="αποθήκευση_κατηγοροτονισμῶν":
				μ=len(σύνολο["καταλήξεις"])
				for ν in range(μ):
					if σύνολο["καταλήξεις"][ν]==None:
						σύνολο["καταλήξεις"][ν] = 0
				μ=len(σύνολο["τονισμοί"])
				for ν in range(μ):
					if σύνολο["τονισμοί"][ν]==None:
						σύνολο["τονισμοί"][ν] = 0
				self.ελληνικά.γ._δεδομένα.κατηγοροτονισμοί_νέο(σύνολο)
				dump = "OK"
			elif dkwd[2]=="διαγραφή_κατηγοροτονισμῶν":
				self.ελληνικά.γ._δεδομένα.κατηγοροτονισμοί_διαγραφή(σύνολο)
				dump = "OK"
			elif dkwd[2]=="τρέχον_κατηγοροτονισμῶν":
				self.ελληνικά.γ._δεδομένα.κατηγοροτονισμοί_τρέχον(σύνολο)
				dump = "OK"
			elif dkwd[2]=="δοκιμή_κατηγοριοτονισμού":
				έξοδος = {}
				φωνές = ["ενεργητική","μέση","παθητική"]
				φ = -1
				κΛέξη = self.ελληνικά.γ.τ.κωδικοποιητής(σύνολο["λήμμα"])
				διάλεκτος = σύνολο["διάλεκτος"]
				χρόνος = σύνολο["χρόνος"]
				καταλήξεις = self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"][σύνολο["μέρος του λόγου"]][διάλεκτος][χρόνος]
				for φωνή in φωνές:
					φ += 1
					if σύνολο["μέρος του λόγου"] == "μετοχή":
						if sum(σύνολο["καταλήξεις"][φ*3:φ*3+3])==0:
							continue
						τονισμοί = self.ελληνικά.γ._δεδομένα.δ["τονισμοί"]["επίθετο"][διάλεκτος]
						έξοδος[φωνή] = {}
						γένη = ["αρσενικό", "θηλυκό", "ουδέτερο"]
						γ=0
						for γένος in γένη:
							έξοδος[φωνή][γένος] = []
							κατηγορία = σύνολο["καταλήξεις"][φ*3+γ]
							τόνοι = σύνολο["τονισμοί"][φ*3+γ]
							if κατηγορία!=0 and καταλήξεις[κατηγορία] and\
								'κΚαταλήξεις' in καταλήξεις[κατηγορία]:
								κτόνοι = τονισμοί[τόνοι]['τονισμοί']
								κΚαταλήξεις = []
								ν=0
								for κκ in καταλήξεις[κατηγορία]['κΚαταλήξεις']:
									υπο = []
									υ=0
									κτ = κτόνοι[ν]*8
									if len(κτ)==0:
										κτ = [0]*8
									for υκ in κκ:
										νέο = np.append(κΛέξη, υκ, 0)
										if υ>len(κτ):
											υ=0
										self.ελληνικά.γ.τ.τόνισε(νέο, κτ[υ])
										υπο.append(νέο)
										υ += 1
									κΚαταλήξεις.append(υπο)
									ν += 1
								έξοδος[φωνή][γένος] = self._κΚαταλήξεις(κΚαταλήξεις)
								
							γ += 1
					elif σύνολο["μέρος του λόγου"] == "ρήμα":
						for i in range(len(σύνολο["καταλήξεις"])):
							if σύνολο["καταλήξεις"][i]==None:
								σύνολο["καταλήξεις"][i] = 0
						if sum(σύνολο["καταλήξεις"][φ*5:φ*5+5])==0:
							print(σύνολο["καταλήξεις"][φ*5:φ*5+5])
							print("Χωρίς", φωνή, sum(σύνολο["καταλήξεις"][φ*5:φ*5+5]))
							continue
						τονισμοί = self.ελληνικά.γ._δεδομένα.δ["τονισμοί"]["ρήμα"][διάλεκτος]
						έξοδος[φωνή] = {}
						εγκλίσεις = ["οριστική", "υποτακτική", "ευκτική",
									"προστακτική", "απαρέμφατο"]
						ε=0
						for έγκλιση in εγκλίσεις:
							έξοδος[φωνή][έγκλιση] = []
							κατηγορία = σύνολο["καταλήξεις"][φ*5+ε]
							τόνοι = σύνολο["τονισμοί"][φ*5+ε]
							if κατηγορία!=0 and καταλήξεις[κατηγορία] and\
								'κΚαταλήξεις' in καταλήξεις[κατηγορία]:
								κτόνοι = τονισμοί[τόνοι]['τονισμοί']
								κΚαταλήξεις = []
								ν=0
								for κκ in καταλήξεις[κατηγορία]['κΚαταλήξεις']:
									υπο = []
									υ0=0
									
									if ν>=len(κτόνοι):
										break
									κτ = κτόνοι[ν]*8
									if len(κτ)==0:
										κτ = [0]*8
									for υκ in κκ:
										if υκ!=None or len(υκ)>0:
											νέο = np.append(κΛέξη, υκ, 0)
											self.ελληνικά.γ.τ.τόνισε(νέο, κτ[υ0])
											υπο.append(νέο)
											υ0 += 1
									κΚαταλήξεις.append(υπο)
									ν += 1
								έξοδος[φωνή][έγκλιση] = self._κΚαταλήξεις(κΚαταλήξεις)
							ε += 1
				dump.append(έξοδος)
			elif dkwd[2]=="ιστορικό_κατηγοροτονισμῶν":
				dump = self.ελληνικά.γ._δεδομένα.κατηγοροτονισμοί_ιστορικό(σύνολο)
			elif dkwd[2]=="διαγραφή_λημμάτων":
				if σύνολο["μέρος του λόγου"] == "ουσιαστικό":
					self.ελληνικά.γ._δεδομένα.ουσιαστικά_διαγραφή(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"] == "επίθετο":
					self.ελληνικά.γ._δεδομένα.επίθετα_διαγραφή(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"] == "ρήμα":
					self.ελληνικά.γ._δεδομένα.ρήματα_διαγραφή(σύνολο)
					dump = "OK"
			elif dkwd[2]=="τρέχον_λημμάτων":
				if σύνολο["μέρος του λόγου"] == "ουσιαστικό":
					self.ελληνικά.γ._δεδομένα.ουσιαστικά_τρέχον(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"] == "επίθετο":
					self.ελληνικά.γ._δεδομένα.επίθετα_τρέχον(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"] == "ρήμα":
					self.ελληνικά.γ._δεδομένα.ρήματα_τρέχον(σύνολο)
					dump = "OK"
			elif dkwd[2]=="αποθήκευση_λημμάτων":
				νέα_μέτα = {}
				for k,v in σύνολο["Μεταδεδομένα"].items():
					k = k.strip()
					v = v.split(",")
					nv = []
					for vv in v:
						nv.append(vv.strip())
					νέα_μέτα[k] = nv
				σύνολο["Μεταδεδομένα"] = νέα_μέτα
				
				νέα_κλίμακα = {}
				for k,v in σύνολο["Κλίμακες"].items():
					k = k.strip()
					try:
						v = float(v.strip())
						νέα_κλίμακα[k] = v
					except:
						pass
				σύνολο["Κλίμακες"] = νέα_κλίμακα
					
				if σύνολο["μέρος του λόγου"] == "ρήμα":
					νέα_ομάδα = {"ρήμα":0, "μετοχή":0}
					Διάλεκτος = σύνολο["διάλεκτος"]
					
					for ρμ in ["ρήμα", "μετοχή"]:
						if Διάλεκτος in self.ελληνικά.γ._δεδομένα.δ["ομάδες"][ρμ]:
							for ομάδα in self.ελληνικά.γ._δεδομένα.δ["ομάδες"][ρμ][Διάλεκτος]:
								if not ομάδα:
									continue
								if ομάδα["ενεστώτας"]==σύνολο[ρμ]["ενεστώτας"] and ομάδα["παρατατικός"]==σύνολο[ρμ]["παρατατικός"] and\
									ομάδα["αόριστος"]==σύνολο[ρμ]["αόριστος"] and ομάδα["παρακείμενος"]==σύνολο[ρμ]["παρακείμενος"] and\
									ομάδα["υπερσυντέλικος"]==σύνολο[ρμ]["υπερσυντέλικος"] and ομάδα["μέλλοντας"]==σύνολο[ρμ]["μέλλοντας"] and\
									ομάδα["συντελεσμένος μέλλοντας"]==σύνολο[ρμ]["συντελεσμένος μέλλοντας"]:
									νέα_ομάδα[ρμ] = ομάδα["ΑΑ"]
									break
						if νέα_ομάδα[ρμ]==0 and\
							not (σύνολο[ρμ]["ενεστώτας"]==0 and σύνολο[ρμ]["παρατατικός"]==0 and\
							σύνολο[ρμ]["αόριστος"]==0 and σύνολο[ρμ]["παρακείμενος"]==0 and\
							σύνολο[ρμ]["υπερσυντέλικος"]==0 and σύνολο[ρμ]["μέλλοντας"]==0 and\
							σύνολο[ρμ]["συντελεσμένος μέλλοντας"]==0):
							ομάδα = {}
							ομάδα["ενεστώτας"] = σύνολο[ρμ]["ενεστώτας"]
							ομάδα["παρατατικός"] = σύνολο[ρμ]["παρατατικός"]
							ομάδα["αόριστος"] = σύνολο[ρμ]["αόριστος"]
							ομάδα["παρακείμενος"] = σύνολο[ρμ]["παρακείμενος"]
							ομάδα["υπερσυντέλικος"] = σύνολο[ρμ]["υπερσυντέλικος"]
							ομάδα["μέλλοντας"] = σύνολο[ρμ]["μέλλοντας"]
							ομάδα["συντελεσμένος μέλλοντας"] = σύνολο[ρμ]["συντελεσμένος μέλλοντας"]
							ομάδα["μέρος του λόγου"] = ρμ
							ομάδα["διάλεκτος"] = σύνολο["διάλεκτος"]
							νέα_ομάδα[ρμ] = self.ελληνικά.γ._δεδομένα.ομάδες_νέα(ομάδα)
						σύνολο[ρμ] = νέα_ομάδα[ρμ]
					
					σύνολο["συχνότητα"] = 0
					self.ελληνικά.γ._δεδομένα.ρήματα_νέο(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"] == "ουσιαστικό":
					σύνολο["γένος"] = σύνολο["γένος"].strip()
					σύνολο["συνθετικό"] = σύνολο["συνθετικό"].strip()
					σύνολο["λήμμα"] = σύνολο["λήμμα"].strip()
					σύνολο["συχνότητα"] = 0
					self.ελληνικά.γ._δεδομένα.ουσιαστικό_νέο(σύνολο)
					dump = "OK"
				elif σύνολο["μέρος του λόγου"]=="επίθετο":
					σύνολο["συνθετικό"] = σύνολο["συνθετικό"].strip()
					σύνολο["λήμμα"] = σύνολο["λήμμα"].strip()
					σύνολο["συχνότητα"] = 0
					self.ελληνικά.γ._δεδομένα.επίθετο_νέο(σύνολο)
					dump = "OK"
			elif dkwd[2]=="ιστορικό_λημμάτων":
				if σύνολο["μέρος του λόγου"]=="ουσιαστικό":
					if int(σύνολο["θέση"])<len(self.θέματα["ουσιαστικό"]):
						πακέτο = self.θέματα["ουσιαστικό"][int(σύνολο["θέση"])]
						dump = self.ελληνικά.γ._δεδομένα.ουσιαστικά_ιστορικό(πακέτο)
				elif σύνολο["μέρος του λόγου"]=="επίθετο":
					πακέτο = self.θέματα["επίθετο"][int(σύνολο["θέση"])]
					dump = self.ελληνικά.γ._δεδομένα.επίθετα_ιστορικό(πακέτο)
				elif σύνολο["μέρος του λόγου"]=="ρήμα":
					πακέτο = self.θέματα["ρήμα"][int(σύνολο["θέση"])]
					dump = self.ελληνικά.γ._δεδομένα.ρήματα_ιστορικό(πακέτο)
			elif dkwd[2]=="αποθήκευση_ανώμαλων":
				νέα_μέτα = {}
				for k,v in σύνολο["Μεταδεδομένα"].items():
					k = k.strip()
					v = v.split(",")
					nv = []
					for vv in v:
						nv.append(vv.strip())
					νέα_μέτα[k] = nv
				σύνολο["Μεταδεδομένα"] = νέα_μέτα
				
				νέα_κλίμακα = {}
				for k,v in σύνολο["Κλίμακες"].items():
					k = k.strip()
					try:
						v = float(v.strip())
						νέα_κλίμακα[k] = v
					except:
						pass
				σύνολο["Κλίμακες"] = νέα_κλίμακα
					
				if σύνολο["μέρος του λόγου"] == "ρήμα":
					νέες_καταλήξεις = {}
					for μέρος in σύνολο["καταλήξεις"]:
						χρόνοι = list(σύνολο["καταλήξεις"][μέρος].keys())
						νέες_καταλήξεις[μέρος] = {}
						for χρόνος in χρόνοι:
							φωνές = list(σύνολο["καταλήξεις"][μέρος][χρόνος].keys())
							νέες_καταλήξεις[μέρος][χρόνος] = {}
							for φωνή in φωνές:
								εγκγε = list(σύνολο["καταλήξεις"][μέρος][χρόνος][φωνή].keys())
								νέες_καταλήξεις[μέρος][χρόνος][φωνή] = {}
								for εγ in εγκγε:
									μήκος = len(σύνολο["καταλήξεις"][μέρος][χρόνος][φωνή][εγ])
									νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ] = {}
									νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ]["καταλήξεις"] = []
									νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ]["συχνότητες"] = [0]*μήκος
									μετρ = 0
									for ν in range(μήκος):
										υπομ = len(σύνολο["καταλήξεις"][μέρος][χρόνος][φωνή][εγ][ν])
										νέο_υ = []
										for υ in range(υπομ):
											καθαρό = σύνολο["καταλήξεις"][μέρος][χρόνος][φωνή][εγ][ν][υ].strip()
											if len(καθαρό)>0:
												νέο_υ.append(καθαρό)
										νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ]["καταλήξεις"].append(νέο_υ)
									for ν in range(μήκος):
										if len(νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ]["καταλήξεις"][ν])>0:
											μετρ+=1
									if μετρ==0:
										del νέες_καταλήξεις[μέρος][χρόνος][φωνή][εγ]
								if len(νέες_καταλήξεις[μέρος][χρόνος][φωνή])==0:
									del νέες_καταλήξεις[μέρος][χρόνος][φωνή]
							if len(νέες_καταλήξεις[μέρος][χρόνος])==0:
								del νέες_καταλήξεις[μέρος][χρόνος]
					σύνολο["καταλήξεις"] = νέες_καταλήξεις
				elif σύνολο["μέρος του λόγου"] == "αντωνυμία":
					μετρ = {}
					νέες_καταλήξεις = {}
					for πρόσωπο in ["α", "β", "γ"]:
						μετρ[πρόσωπο] = 0
						νέες_καταλήξεις[πρόσωπο] = {}
						for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
							μήκος = len(σύνολο["καταλήξεις"][πρόσωπο][γένος])
							νέες_καταλήξεις[πρόσωπο][γένος] = {}
							νέες_καταλήξεις[πρόσωπο][γένος]["καταλήξεις"] = []
							νέες_καταλήξεις[πρόσωπο][γένος]["συχνότητες"] = [0]*μήκος
							for ν in range(μήκος):
								υπομ = len(σύνολο["καταλήξεις"][πρόσωπο][γένος][ν])
								νέο_υ = []
								for υ in range(υπομ):
									καθαρό = σύνολο["καταλήξεις"][πρόσωπο][γένος][ν][υ].strip()
									if len(καθαρό)>0:
										νέο_υ.append(καθαρό)
								νέες_καταλήξεις[πρόσωπο][γένος]["καταλήξεις"].append(νέο_υ)
							for ν in range(μήκος):
								if len(νέες_καταλήξεις[πρόσωπο][γένος]["καταλήξεις"][ν])>0:
									μετρ[πρόσωπο]+=1
					σύνολο["καταλήξεις"] = νέες_καταλήξεις
					if μετρ["β"]==0 and μετρ["γ"]==0:
						del σύνολο["καταλήξεις"]["β"]
						del σύνολο["καταλήξεις"]["γ"]
						σύνολο["καταλήξεις"] = σύνολο["καταλήξεις"]["α"]
					if μετρ["α"]==1:
						σύνολο["καταλήξεις"] = {"κατάληξη":σύνολο["καταλήξεις"]["αρσενικό"]["καταλήξεις"][0],
													"συχνότητα":[0]}
				elif σύνολο["μέρος του λόγου"] == "ουσιαστικό":
					σύνολο["γένος"] = σύνολο["γένος"].strip()
					ποσότητα, λήμμα = 0, 0
					μήκος = len(σύνολο["καταλήξεις"])
					νέες_καταλήξεις = {}
					νέες_καταλήξεις["καταλήξεις"] = []
					νέες_καταλήξεις["συχνότητες"] = [0]*μήκος
					for ν in range(μήκος):
						υπομ = len(σύνολο["καταλήξεις"][ν])
						νέο_υ = []
						for υ in range(υπομ):
							καθαρό = σύνολο["καταλήξεις"][ν][υ].strip()
							if len(καθαρό)>0:
								νέο_υ.append(καθαρό)
								λήμμα = καθαρό
								ποσότητα += 1
						νέες_καταλήξεις["καταλήξεις"].append(νέο_υ)
					if ποσότητα==0:
						return "Δεν υπάρχουν καταλήξεις"
					elif ποσότητα==1:
						del σύνολο["καταλήξεις"]
						σύνολο["συχνότητα"] = 0
						σύνολο["λήμμα"] = λήμμα
					else:
						σύνολο["καταλήξεις"] = {}
						σύνολο["καταλήξεις"][σύνολο["γένος"]] = νέες_καταλήξεις
				elif σύνολο["μέρος του λόγου"] in ["άρθρο", "επίθετο"]:
					νέες_καταλήξεις = {}
					for γένος in ["αρσενικό", "θηλυκό", "ουδέτερο"]:
						μήκος = len(σύνολο["καταλήξεις"][γένος])
						νέες_καταλήξεις[γένος] = {}
						νέες_καταλήξεις[γένος]["καταλήξεις"] = []
						νέες_καταλήξεις[γένος]["συχνότητες"] = [0]*μήκος
						for ν in range(μήκος):
							υπομ = len(σύνολο["καταλήξεις"][γένος][ν])
							νέο_υ = []
							for υ in range(υπομ):
								καθαρό = σύνολο["καταλήξεις"][γένος][ν][υ].strip()
								if len(καθαρό)>0:
									νέο_υ.append(καθαρό)
							νέες_καταλήξεις[γένος]["καταλήξεις"].append(νέο_υ)
					σύνολο["καταλήξεις"] = νέες_καταλήξεις
									
				elif σύνολο["μέρος του λόγου"] in ["επίρρημα", "πρόθεση", "επιφώνημα", "μόριο", "σύνδεσμος"]:
					μήκος = len(σύνολο["λήμμα"])
					for ν in range(μήκος):
						σύνολο["λήμμα"][ν] = σύνολο["λήμμα"][ν].strip()
					σύνολο["καταλήξεις"] = {"λήμμα":σύνολο["λήμμα"], "συχνότητα":[0]}
				
				self.ελληνικά.γ._δεδομένα.ανώμαλα_νέο(σύνολο)
				dump = "OK"
			elif dkwd[2]=="ιστορικό_ανώμαλων":
				dump = self.ελληνικά.γ._δεδομένα.ανώμαλα_ιστορικό(σύνολο)
			elif dkwd[2]=="διαγραφή_ανώμαλων":
				self.ελληνικά.γ._δεδομένα.ανώμαλα_διαγραφή(σύνολο)
				dump = "OK"
			elif dkwd[2]=="τρέχον_ανώμαλων":
				self.ελληνικά.γ._δεδομένα.ανώμαλα_τρέχον(σύνολο)
				dump = "OK"
			elif dkwd[2]=="διαγραφή_καταλήξεων":
				self.ελληνικά.γ._δεδομένα.καταλήξεις_διαγραφή(σύνολο)
				dump = "OK"
			elif dkwd[2]=="τρέχον_καταλήξεις":
				self.ελληνικά.γ._δεδομένα.καταλήξεις_τρέχον(σύνολο)
				dump = "OK"
			elif dkwd[2]=="αποθήκευση_καταλήξεων":
				μήκος = len(σύνολο["καταλήξεις"])
				μετρ = 0
				for ν in range(μήκος):
					υμήκος = len(σύνολο["καταλήξεις"][ν])
					for υ in range(υμήκος):
						σύνολο["καταλήξεις"][ν][υ] = σύνολο["καταλήξεις"][ν][υ].strip()
					while "" in σύνολο["καταλήξεις"][ν]:
						σύνολο["καταλήξεις"][ν].remove("")
					if len(σύνολο["καταλήξεις"][ν])>0:
						μετρ +=1
				if μετρ==1:
					while [] in σύνολο["καταλήξεις"]:
						σύνολο["καταλήξεις"].remove([])
				self.ελληνικά.γ._δεδομένα.καταλήξεις_νέα(σύνολο)
				dump = "OK"
			elif dkwd[2]=="ιστορικό_καταλήξεων":
				dump = self.ελληνικά.γ._δεδομένα.καταλήξεις_ιστορικό(σύνολο)
			elif dkwd[2]=="τρέχον_διάλεκτος":
				self.ελληνικά.γ._δεδομένα.διάλεκτοι_τρέχον(σύνολο)
				dump = "OK"
			elif dkwd[2]=="ιστορικό_διαλέκτου":
				dump = self.ελληνικά.γ._δεδομένα.διάλεκτοι_ιστορικό(σύνολο)
			elif dkwd[2]=="διαγραφή_διαλέκτου":
				self.ελληνικά.γ._δεδομένα.διάλεκτοι_διαγραφή(σύνολο)
				dump = "OK"
			elif dkwd[2]=="αποθήκευση_διαλέκτου":
				νέες_πτώσεις = []
				αα = 0
				for ν in σύνολο["πτώσεις"]:
					if ν:
						νέες_πτώσεις.append(αα)
					αα +=1
				σύνολο["πτώσεις"] = νέες_πτώσεις
				for ρμ in ["ρήμα", "μετοχή"]:
					for k,v in σύνολο[ρμ].items():
						νέα_φωνή_έγκλιση = []
						αα = 0
						for ν in v:
							if ν:
								νέα_φωνή_έγκλιση.append(αα)
							αα +=1
						σύνολο[ρμ][k] = νέα_φωνή_έγκλιση
				self.ελληνικά.γ._δεδομένα.διάλεκτοι_νέα(σύνολο)
				dump = "OK"
			elif dkwd[2]=="τρέχον_τονισμός":
				self.ελληνικά.γ._δεδομένα.τονισμοί_τρέχον(σύνολο)
				dump = "OK"
			elif dkwd[2]=="ιστορικό_τονισμού":
				έξοδος = self.ελληνικά.γ._δεδομένα.τονισμοί_ιστορικό(σύνολο)
				for ν in range(len(έξοδος)):
					τόνοι = έξοδος[ν]["τονισμοί"]
					if τόνοι:
						έξοδος[ν]["τονισμοί"] = self._τονισμοί(τόνοι)
				dump = έξοδος
			elif dkwd[2]=="διαγραφή_τονισμού":
				self.ελληνικά.γ._δεδομένα.τονισμοί_διαγραφή(σύνολο)
				dump = "OK"
			elif dkwd[2]=="αποθήκευση_τονισμού":
				σύνολο["τονισμοί"] = self._κΤονισμοί(σύνολο["τονισμοί"])
				self.ελληνικά.γ._δεδομένα.τονισμοί_νέος(σύνολο)
				dump = "OK"
			elif dkwd[2]=="διαγραφή_κατηγορίας":
				if σύνολο["μέρος του λόγου"]=="μετοχή":
					del self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος[σύνολο["διάλεκτος"]][σύνολο["ΑΑ"]][σύνολο["χρόνος"]]
					if not self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος[σύνολο["διάλεκτος"]][σύνολο["ΑΑ"]]:
						del self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος[σύνολο["διάλεκτος"]][σύνολο["ΑΑ"]]
					self.ελληνικά.γ._δεδομένα.sql.διαγραφή_κατηγοριοτονισμού(σύνολο)
					dump = "OK"
			elif dkwd[2]=="αποθήκευση_κατηγορίας":
				σύνολο = dkwd[3]
				if σύνολο["μέρος του λόγου"]=="μετοχή":
					# προσθήκη στο ευρετήριο καταλήξεων
					# ανανέωση κατηγοριών web
					# ανανέωση κλίσεων web
					if "κατηγορία" in σύνολο:
						pass
					else:
						νέες_καταλήξεις = []
						for σκαταλήξεις in σύνολο["καταλήξεις"]:
							μ, π = 0, 0
							for καταλήξεις in σκαταλήξεις:
								for υ in καταλήξεις:
									μ += len(υ)
								if καταλήξεις:
									π+=1
							if not σκαταλήξεις or not μ:
								νέες_καταλήξεις.append(0)
								continue
							if π==1:
								σκαταλήξεις = [σκαταλήξεις[0]]
							νέο_σύνολο = {}
							νέο_σύνολο["καταλήξεις"] = σκαταλήξεις
							νέο_σύνολο["χρόνος"] = σύνολο["χρόνος"]
							νέο_σύνολο["διάλεκτος"] = σύνολο["διάλεκτος"]
							νέο_σύνολο["μέρος του λόγου"] = σύνολο["μέρος του λόγου"]
							νέο_σύνολο["συχνότητες"] = [0]*len(νέο_σύνολο["καταλήξεις"])
							νέο_σύνολο["κΚαταλήξεις"] = self._καταλήξεις(σκαταλήξεις)
							νέο_σύνολο["ΑΑ"] = self.ελληνικά.γ._δεδομένα.sql.νέα_κατηγορία(νέο_σύνολο)
							if σύνολο["χρόνος"] not in self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]]:
								self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]][σύνολο["χρόνος"]] = []
							while νέο_σύνολο["ΑΑ"]>=len(self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]][σύνολο["χρόνος"]]):
								self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]][σύνολο["χρόνος"]].append({})
							self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]][σύνολο["χρόνος"]][νέο_σύνολο["ΑΑ"]] = νέο_σύνολο
							νέες_καταλήξεις.append(νέο_σύνολο["ΑΑ"])
						νέος_κτ = {}
						νέος_κτ["μέρος του λόγου"] = σύνολο["μέρος του λόγου"]
						νέος_κτ["διάλεκτος"] = σύνολο["διάλεκτος"]
						νέος_κτ["χρόνος"] = σύνολο["χρόνος"]
						νέος_κτ["τονισμοί"] = σύνολο["τονισμοί"]
						νέος_κτ["καταλήξεις"] = νέες_καταλήξεις
						νέος_κτ["ΑΑ"] = self.ελληνικά.γ._δεδομένα.sql.νέος_κατηγοριοτονισμός(νέος_κτ)
						self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος[σύνολο["διάλεκτος"]][νέος_κτ["ΑΑ"]] = {}
						self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος[σύνολο["διάλεκτος"]][νέος_κτ["ΑΑ"]][σύνολο["χρόνος"]] = νέος_κτ # διάλεκτος:κατηγορία:χρόνος:τιμές
						dump = "OK"
			elif dkwd[2]=="δοκιμή":
				σύνολο = dkwd[3]
				if σύνολο["μέρος του λόγου"]=="μετοχή":
					self.ελληνικά.γ.μετοχές.δοκιμές.clear()
					if σύνολο["διάλεκτος"] not in self.ελληνικά.γ.μετοχές.δοκιμές:
						self.ελληνικά.γ.μετοχές.δοκιμές[σύνολο["διάλεκτος"]] = {σύνολο["χρόνος"]:{}}
					αα = 10100
					μετοχή = {σύνολο["χρόνος"]:{"καταλήξεις":[], "τονισμοί":σύνολο["τονισμοί"]}}
					
					for σκαταλήξεις in σύνολο["καταλήξεις"]:
						μ, π = 0, 0
						for καταλήξεις in σκαταλήξεις:
							for υ in καταλήξεις:
								μ += len(υ)
							if καταλήξεις:
								π+=1
						if not σκαταλήξεις or not μ:
							μετοχή[σύνολο["χρόνος"]]["καταλήξεις"].append(0)
							continue
						if π==1:
							σκαταλήξεις = [σκαταλήξεις[0]]
						κΚαταλήξεις = self._καταλήξεις(σκαταλήξεις)
						self.ελληνικά.γ.μετοχές.δοκιμές[σύνολο["διάλεκτος"]][σύνολο["χρόνος"]][αα] = {
							"κΚαταλήξεις":κΚαταλήξεις}
						μετοχή[σύνολο["χρόνος"]]["καταλήξεις"].append(αα)
						αα += 100
					σύνολο["μετοχή"] = μετοχή
					σύνολο["κΛέξη"] = self.ελληνικά.γ.τ.κωδικοποιητής(σύνολο["θέμα"])
					γκΚαταλήξεις = self.ελληνικά.γ.μετοχές._πλήρη_κλίση(σύνολο)
					έξοδος = {}
					for χρόνο, φωνές in γκΚαταλήξεις.items():
						έξοδος[χρόνο] = {}
						for φωνή, εγκλίσεις in φωνές.items():
							έξοδος[χρόνο][φωνή] = {}
							for γένος, τιμές in εγκλίσεις.items():
								καταλήξεις = self._κΚαταλήξεις(τιμές)
								έξοδος[χρόνο][φωνή][γένος] = καταλήξεις
					dump.append(έξοδος)
			elif dkwd[2]=="κατηγορία":
				σύνολο = dkwd[3]
				if σύνολο["μέρος του λόγου"]=="μετοχή":
					έξοδος = {}
					σύνολο["κατηγορία"] = int(σύνολο["κατηγορία"])
					σκουλίκι = self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος
					if σύνολο["διάλεκτος"] in σκουλίκι:
						if σύνολο["κατηγορία"] in σκουλίκι[σύνολο["διάλεκτος"]]:
							if σύνολο["χρόνος"] in σκουλίκι[σύνολο["διάλεκτος"]][σύνολο["κατηγορία"]]:
								έξοδος = {"διάλεκτος":σύνολο["διάλεκτος"], "χρόνος":σύνολο["χρόνος"], 
									"κατηγορίες":σκουλίκι[σύνολο["διάλεκτος"]][σύνολο["κατηγορία"]][σύνολο["χρόνος"]]["καταλήξεις"],
									"τονισμοί":σκουλίκι[σύνολο["διάλεκτος"]][σύνολο["κατηγορία"]][σύνολο["χρόνος"]]["τονισμοί"],
									"καταλήξεις":[]}
								for κατάληξη in έξοδος["κατηγορίες"]:
									κατ = self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][σύνολο["διάλεκτος"]][σύνολο["χρόνος"]][κατάληξη]
									if "καταλήξεις" in κατ:
										έξοδος["καταλήξεις"].append(κατ["καταλήξεις"])
									else:
										έξοδος["καταλήξεις"].append([[],])
					dump.append(έξοδος)
			elif dkwd[2]=="αναγνώριση":
				if dkwd[3]["μέρος του λόγου"]=="ουσιαστικό":
					dump = self.ελληνικά.γ.ουσιαστικά.dump(dkwd[3]["διάλεκτος"], dkwd[3]["λέξη"], True)
					k = str([dump[0]["γένος"], dump[0]['κατηγορία']])
					d = dump[0]["διάλεκτος"]
				
					if d in self.map_κατηγορίες["ουσιαστικό"]:
						if k in self.map_κατηγορίες["ουσιαστικό"][d]:
							dump[0]['κατηγορία'] = self.map_κατηγορίες["ουσιαστικό"][d][k]
				elif dkwd[3]["μέρος του λόγου"]=="επίθετο":
					dump = self.ελληνικά.γ.επίθετα.dump(dkwd[3]["διάλεκτος"], dkwd[3]["λέξη"], True)
					d = dump[0]["διάλεκτος"]
					k = dump[0]['κατηγορίες']
					if d in self.map_κατηγορίες["επίθετο"]:
						if k in self.map_κατηγορίες["επίθετο"][d]:
							dump[0]['κατηγορίες'] = self.map_κατηγορίες["επίθετο"][d][k]
				elif dkwd[3]["μέρος του λόγου"]=="ρήμα":
					dump = self.ελληνικά.γ.ρήματα.dump(dkwd[3]["διάλεκτος"], dkwd[3]["λέξη"], True)
					dlk = []
					for k,v in dump[0].items():
						if not v:
							dlk.append(k)
					for dk in dlk:
						del dump[0][dk]
					if dump:
						dump[0]["κλίσεις μετοχή"] = self.ελληνικά.γ.μετοχές.dump(
										dkwd[3]["διάλεκτος"], dkwd[3]["λέξη"])
						if dump[0]["κλίσεις μετοχή"]:
							dump[0]["κλίσεις μετοχή"] = dump[0]["κλίσεις μετοχή"][0]
						else:
							dump[0]["κλίσεις μετοχή"] = {}
			elif dkwd[2]=="κλίνε":
				self.καθάρισμα(dkwd[3])
				αναγνώριση = dkwd[3]
				if αναγνώριση["μέρος του λόγου"]=="ουσιαστικό":
					κΚαταλήξεις = list(self.ελληνικά.γ.ουσιαστικά._πλήρη_κλίση(αναγνώριση).values())[0]
					καταλήξεις = self._κΚαταλήξεις(κΚαταλήξεις)
					dump.append(καταλήξεις)
				elif αναγνώριση["μέρος του λόγου"]=="επίθετο":
					γκΚαταλήξεις = self.ελληνικά.γ.επίθετα._πλήρη_κλίση(αναγνώριση)
					γκαταλήξεις = []
					for γένος in [ "αρσενικό", "θηλυκό", "ουδέτερο" ]:
						καταλήξεις = self._κΚαταλήξεις(γκΚαταλήξεις[γένος])
						γκαταλήξεις.append(καταλήξεις)
					dump.append(γκαταλήξεις)
				elif αναγνώριση["μέρος του λόγου"]=="ρήμα":
					γκΚαταλήξεις = self.ελληνικά.γ.ρήματα._πλήρη_κλίση(αναγνώριση)
					γκαταλήξεις = {}
					for χρόνο, φωνές in γκΚαταλήξεις.items():
						γκαταλήξεις[χρόνο] = {}
						for φωνή, εγκλίσεις in φωνές.items():
							γκαταλήξεις[χρόνο][φωνή] = {}
							for έγκλιση, τιμές in εγκλίσεις.items():
								καταλήξεις = self._κΚαταλήξεις(τιμές)
								γκαταλήξεις[χρόνο][φωνή][έγκλιση] = καταλήξεις
					dump.append(γκαταλήξεις)
					γκΚαταλήξεις = self.ελληνικά.γ.μετοχές._πλήρη_κλίση(αναγνώριση)
					γκαταλήξεις = {}
					for χρόνο, φωνές in γκΚαταλήξεις.items():
						γκαταλήξεις[χρόνο] = {}
						for φωνή, εγκλίσεις in φωνές.items():
							γκαταλήξεις[χρόνο][φωνή] = {}
							for γένος, τιμές in εγκλίσεις.items():
								καταλήξεις = self._κΚαταλήξεις(τιμές)
								γκαταλήξεις[χρόνο][φωνή][γένος] = καταλήξεις
					dump.append(γκαταλήξεις)
			elif dkwd[2]=="αποθήκευσε":
				self.καθάρισμα(dkwd[3])
				αναγνώριση = dkwd[3]
				νέα_κΛέξη = None
				διαλ = αναγνώριση["διάλεκτος"]
				if αναγνώριση.get("αρχικό"):
					if αναγνώριση["μέρος του λόγου"]=="ουσιαστικό":
						παλιά_θέση = self.ελληνικά.γ.ουσιαστικά.dump_ουσιαστικά[διαλ][αναγνώριση["αρχικό"]]
					elif αναγνώριση["μέρος του λόγου"]=="επίθετο":
						παλιά_θέση = self.ελληνικά.γ.επίθετα.dump_επίθετα[διαλ][αναγνώριση["αρχικό"]]
					elif αναγνώριση["μέρος του λόγου"]=="ρήμα":
						παλιά_θέση = self.ελληνικά.γ.ρήματα.dump_ρήματα[διαλ][αναγνώριση["αρχικό"]]
					παλιά_αναγνώριση = self.ελληνικά.γ._δεδομένα.θέματα[διαλ][παλιά_θέση]
					αναγνώριση["ΑΑ"] = παλιά_αναγνώριση["ΑΑ"]
					παλιά_κΛέξη = παλιά_αναγνώριση["κΛέξη"]
					
					if "κΣυνθετικό" in παλιά_αναγνώριση:
						παλιά_κΛέξη = np.append(παλιά_αναγνώριση["κΣυνθετικό"], παλιά_αναγνώριση["κΛέξη"], 0)
					νέα_κΛέξη = αναγνώριση["κΛέξη"]
					if "κΣυνθετικό" in αναγνώριση:
						νέα_κΛέξη = np.append(αναγνώριση["κΣυνθετικό"], αναγνώριση["κΛέξη"], 0)
					# TODO: αφαίρεση [αύξηση, ενεστωτική αύξηση, αύξηση παρατατικού]+κΛέξη από τα ευρετήρια
					# TODO: προσθήκη [αύξηση, ενεστωτική αύξηση, αύξηση παρατατικού]+κΛέξη από τα ευρετήρια
					ισο = True
					s1 = len(παλιά_κΛέξη)
					s2 = len(νέα_κΛέξη)
					if s1!=s2:
						ισο = False
					elif παλιά_κΛέξη==None or νέα_κΛέξη==None:
						ισο = False
					else:
						for ν in range(s1):
							if παλιά_κΛέξη[ν]!=νέα_κΛέξη[ν]:
								ισο=False
								break
					if not ισο:
						self.ελληνικά.γ._ευρετήρια._διαγραφή_θέματος(παλιά_κΛέξη, παλιά_θέση, διαλ)
				αναγνώριση["συχνότητα"] = 0
				self.ελληνικά.γ._δεδομένα.sql.νέα_λέξη(αναγνώριση)
				
				# Αποθήκευση ανώμαλα
				if νέα_κΛέξη==None:
					νέα_κΛέξη = αναγνώριση["κΛέξη"]
					if "κΣυνθετικό" in αναγνώριση:
						νέα_κΛέξη = np.append(αναγνώριση["κΣυνθετικό"], αναγνώριση["κΛέξη"], 0)
				θέση = len(self.ελληνικά.γ._δεδομένα.θέματα[διαλ])+1
				self.ελληνικά.γ._δεδομένα.θέματα[διαλ].append(αναγνώριση)
				self.ελληνικά.γ._ευρετήρια._προσθήκη_θέματος(νέα_κΛέξη, θέση, διαλ)
				
				dump = "OK"
			elif dkwd[2]=="διέγραψε":
				self.καθάρισμα(dkwd[3])
				αναγνώριση = dkwd[3]
				νέα_κΛέξη = None
				διαλ = αναγνώριση["διάλεκτος"]
				if αναγνώριση.get("αρχικό"):
					if αναγνώριση["μέρος του λόγου"]=="ουσιαστικό":
						παλιά_θέση = self.ελληνικά.γ.ουσιαστικά.dump_ουσιαστικά[διαλ][αναγνώριση["αρχικό"]]
					elif αναγνώριση["μέρος του λόγου"]=="επίθετο":
						παλιά_θέση = self.ελληνικά.γ.επίθετα.dump_επίθετα[διαλ][αναγνώριση["αρχικό"]]
					παλιά_αναγνώριση = self.ελληνικά.γ._δεδομένα.θέματα[διαλ][παλιά_θέση]
					αναγνώριση["ΑΑ"] = παλιά_αναγνώριση["ΑΑ"]
					παλιά_κΛέξη = παλιά_αναγνώριση["κΛέξη"]
					
					if "κΣυνθετικό" in παλιά_αναγνώριση:
						παλιά_κΛέξη = np.append(παλιά_αναγνώριση["κΣυνθετικό"], παλιά_αναγνώριση["κΛέξη"], 0)
					
					self.ελληνικά.γ._ευρετήρια._διαγραφή_θέματος(παλιά_κΛέξη, παλιά_θέση, διαλ)
					self.ελληνικά.γ._δεδομένα.θέματα[διαλ][παλιά_θέση] = {}
					self.ελληνικά.γ._δεδομένα.sql.διαγραφή_λέξης(αναγνώριση["μέρος του λόγου"], αναγνώριση["ΑΑ"], διαλ)
				
				# Διαγραφή ανώμαλα
				dump = "OK"
		elif n>2 and dkwd[1]=="dump":
			if dkwd[2]=="ορθογραφία":
				dump.append(self.ελληνικά.γ._δεδομένα.ορθογραφία_φόρτωση())
			elif dkwd[2]=="κατηγοροτονισμοί":
				full = self.ελληνικά.γ._δεδομένα.κατηγοροτονισμοί_φόρτωση(True)
				katon = {}
				tonoi = {}
				for μτλ, διάλεκτοι in full.items():
					katon[μτλ] = {}
					tonoi[μτλ] = []
					for διάλεκτο, χρόνοι in διάλεκτοι.items():
						katon[μτλ][διάλεκτο] = {}
						for χρόνος, σύνολα in χρόνοι.items():
							katon[μτλ][διάλεκτο][χρόνος] = {}
							katon[μτλ][διάλεκτο][χρόνος][0] = [0]
							for σύνολο in σύνολα:
								if not σύνολο:
									continue
								μεγ = len(σύνολο["καταλήξεις"])
								for ν in range(μεγ):
									if σύνολο["καταλήξεις"][ν]:
										if σύνολο["καταλήξεις"][ν] not in katon[μτλ][διάλεκτο][χρόνος]:
											katon[μτλ][διάλεκτο][χρόνος][σύνολο["καταλήξεις"][ν]] = []
										if σύνολο["τονισμοί"][ν] not in katon[μτλ][διάλεκτο][χρόνος][σύνολο["καταλήξεις"][ν]]:
											katon[μτλ][διάλεκτο][χρόνος][σύνολο["καταλήξεις"][ν]].append(σύνολο["τονισμοί"][ν])
											katon[μτλ][διάλεκτο][χρόνος][σύνολο["καταλήξεις"][ν]].sort()
										if σύνολο["τονισμοί"][ν] not in tonoi[μτλ]:
											tonoi[μτλ].append(σύνολο["τονισμοί"][ν])
											tonoi[μτλ].sort()
							αα=-1
							for σύνολο in self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"][μτλ][διάλεκτο][χρόνος]:
								αα+=1
								if not σύνολο:
									continue
								if αα not in katon[μτλ][διάλεκτο][χρόνος]:
									katon[μτλ][διάλεκτο][χρόνος][αα] = []
				dump.append(full)
				dump.append(katon)
				dump.append(tonoi)
			elif dkwd[2]=="ανώμαλα":
				dump.append(self.ελληνικά.γ._δεδομένα.ανώμαλα_φόρτωση(True))
			elif dkwd[2]=="καταλήξεις":
				dump.append(self.ελληνικά.γ._δεδομένα.καταλήξεις_φόρτωση(True))
			elif dkwd[2]=="διάλεκτοι":
				dump.append(self.ελληνικά.γ._δεδομένα.διάλεκτοι_φόρτωση(True))
			elif dkwd[2]=="τονισμοί":
				έξοδος = self.ελληνικά.γ._δεδομένα.τονισμοί_φόρτωση(True)
				keys = έξοδος.keys()
				for k in keys:
					dials = έξοδος[k].keys()
					for d in dials:
						for ν in range(len(έξοδος[k][d])):
							τόνοι = έξοδος[k][d][ν]["τονισμοί"]
							if τόνοι:
								έξοδος[k][d][ν]["τονισμοί"] = self._τονισμοί(τόνοι)
				dump.append(έξοδος)
			elif dkwd[2]=="κατηγορίες":
				if dkwd[3]=="μετοχή":
					έξοδος = {}
					τόνοι = {}
					for διάλεκτο, κατηγορίες in self.ελληνικά.γ._δεδομένα.sql.μετοχές_φωνή_γένος.items():
						έξοδος[διάλεκτο] = {}
						for κατηγορία, χρόνοι in κατηγορίες.items():
							έξοδος[διάλεκτο][κατηγορία] = {}
							for χρόνο, τιμές in χρόνοι.items():
								έξοδος[διάλεκτο][κατηγορία][χρόνο] = {"καταλήξεις":[], "τονισμοί":τιμές["τονισμοί"]}
								for κατάληξη in τιμές["καταλήξεις"]:
									κατ = self.ελληνικά.γ._δεδομένα.sql.κατηγορίες["μετοχή"][διάλεκτο][χρόνο][κατάληξη]
									if "καταλήξεις" in κατ:
										έξοδος[διάλεκτο][κατηγορία][χρόνο]["καταλήξεις"].append(" ".join(κατ["καταλήξεις"][0]))
									else:
										έξοδος[διάλεκτο][κατηγορία][χρόνο]["καταλήξεις"].append("")
									
								έξοδος[διάλεκτο][κατηγορία][χρόνο]["καταλήξεις"] = " ".join(έξοδος[διάλεκτο][κατηγορία][χρόνο]["καταλήξεις"])
						τόνοι[διάλεκτο] = len(self.ελληνικά.γ._δεδομένα.sql.τονισμοί["επίθετο"][διάλεκτο])
					dump.append(έξοδος)
					dump.append(τόνοι)
					
			elif dkwd[2]=="μεταδεδομένα_κλίμακες":
				μ, κ = self.ελληνικά.γ._δεδομένα.δ["μεταδεδομένα"], self.ελληνικά.γ._δεδομένα.δ["κλίμακες"]
				keys, values = [], []
				λεξικό = {}
				for διάλεκτος, σύνολα in μ.items():
					for σύνολο in σύνολα:
						if σύνολο:
							if σύνολο["ὄνομα"] not in λεξικό:
								λεξικό[σύνολο["ὄνομα"]] = []
							λεξικό[σύνολο["ὄνομα"]] += σύνολο["τιμές"]
							λεξικό[σύνολο["ὄνομα"]] = list(set(λεξικό[σύνολο["ὄνομα"]]))
							λεξικό[σύνολο["ὄνομα"]].sort()
				for διάλεκτος, σύνολα in κ.items():
					for σύνολο in σύνολα:
						if σύνολο:
							if σύνολο["ὄνομα"] not in λεξικό:
								λεξικό[σύνολο["ὄνομα"]] = []
							λεξικό[σύνολο["ὄνομα"]].append(str(σύνολο["τιμή"]))
							λεξικό[σύνολο["ὄνομα"]] = list(set(λεξικό[σύνολο["ὄνομα"]]))
							λεξικό[σύνολο["ὄνομα"]].sort()
				dump = [λεξικό]
			elif dkwd[2]=="ουσιαστικό":
				self.θέματα["ουσιαστικό"],κατον = self.ελληνικά.γ._δεδομένα.ουσιαστικά_φόρτωση(True)
				ευρετήριο = {}
				μετρητής = 0
				for θέμα in self.θέματα["ουσιαστικό"]:
					if θέμα:
						διάλεκτος = θέμα["διάλεκτος"]
						if διάλεκτος not in ευρετήριο:
							ευρετήριο[διάλεκτος] = {}
						if θέμα["συνθετικό"]:
							λήμμα = θέμα["συνθετικό"]+θέμα["λήμμα"]
						else:
							λήμμα = θέμα["λήμμα"]
						if λήμμα[0] not in ευρετήριο[διάλεκτος]:
							ευρετήριο[διάλεκτος][λήμμα[0]] = {}
						if λήμμα not in ευρετήριο[διάλεκτος][λήμμα[0]]:
							ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα] = μετρητής
						else:
							ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα+str(μετρητής)]=μετρητής
					μετρητής +=1
				dump.append(ευρετήριο)
				καταλήξεις = {}
				for διάλεκτο, σύνολα in self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"]["ουσιαστικό"].items():
					καταλήξεις[διάλεκτο] = []
					for σύνολο in σύνολα:
						if σύνολο.get("ΑΑ") and σύνολο["ΑΑ"] not in καταλήξεις[διάλεκτο]:
							καταλήξεις[διάλεκτο].append(σύνολο["ΑΑ"])
					καταλήξεις[διάλεκτο].sort()
				dump.append(καταλήξεις)
				τονισμοί = {}
				for διάλεκτο, σύνολα in self.ελληνικά.γ._δεδομένα.δ["τονισμοί"]["ουσιαστικό"].items():
					τονισμοί[διάλεκτο] = []
					for σύνολο in σύνολα:
						if σύνολο.get("ΑΑ") and σύνολο["ΑΑ"] not in τονισμοί[διάλεκτο]:
							τονισμοί[διάλεκτο].append(σύνολο["ΑΑ"])
					τονισμοί[διάλεκτο].sort()
				dump.append(τονισμοί)
				dump.append(eval(json.dumps(κατον)))
			elif dkwd[2]=="επίθετο":
				self.θέματα["επίθετο"],κατον = self.ελληνικά.γ._δεδομένα.επίθετα_φόρτωση(True)
				ευρετήριο = {}
				μετρητής = 0
				for θέμα in self.θέματα["επίθετο"]:
					if θέμα:
						διάλεκτος = θέμα["διάλεκτος"]
						if διάλεκτος not in ευρετήριο:
							ευρετήριο[διάλεκτος] = {}
						if θέμα["συνθετικό"]:
							λήμμα = θέμα["συνθετικό"]+θέμα["λήμμα"]
						else:
							λήμμα = θέμα["λήμμα"]
						if λήμμα[0] not in ευρετήριο[διάλεκτος]:
							ευρετήριο[διάλεκτος][λήμμα[0]] = {}
						if λήμμα not in ευρετήριο[διάλεκτος][λήμμα[0]]:
							ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα] = μετρητής
						else:
							ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα+str(μετρητής)]=μετρητής
					μετρητής +=1
				dump.append(ευρετήριο)
				καταλήξεις = {}
				for διάλεκτο, σύνολα in self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"]["επίθετο"].items():
					if διάλεκτο in κατον:
						καταλήξεις[διάλεκτο] = list(κατον[διάλεκτο].keys())
						καταλήξεις[διάλεκτο].sort()
				dump.append(καταλήξεις)
				τονισμοί = {}
				for διάλεκτο, σύνολα in self.ελληνικά.γ._δεδομένα.δ["τονισμοί"]["επίθετο"].items():
					τονισμοί[διάλεκτο] = []
					for k,v in κατον[διάλεκτο].items():
						τονισμοί[διάλεκτο] += v
					τονισμοί[διάλεκτο] = list(set(τονισμοί[διάλεκτο]))
					τονισμοί[διάλεκτο].sort()
				dump.append(τονισμοί)
				dump.append(eval(json.dumps(κατον)))
			elif dkwd[2]=="ρήμα":
				self.θέματα["ρήμα"], ομάδα = self.ελληνικά.γ._δεδομένα.ρήματα_φόρτωση(True)
				ευρετήριο = {}
				κατον = {} # διάλεκτος:πακέτο:ρήμα/μετοχή:{χρόνος:τιμή}
				καταλήξεις = {}
				μετρητής = 0
				for διάλεκτο, χρόνοι in self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"]["ρήμα"].items():
					if διάλεκτο not in καταλήξεις:
						καταλήξεις[διάλεκτο] = {}
						καταλήξεις[διάλεκτο]["ρήμα"] = {}
					for χρόνο, σύνολα in χρόνοι.items():
						καταλήξεις[διάλεκτο]["ρήμα"][χρόνο] = []
						μετρ = 0
						for σύνολο in σύνολα:
							if σύνολο:
								καταλήξεις[διάλεκτο]["ρήμα"][χρόνο].append(μετρ)
							μετρ += 1
						καταλήξεις[διάλεκτο]["ρήμα"][χρόνο].sort()
				for διάλεκτο, χρόνοι in self.ελληνικά.γ._δεδομένα.δ["καταλήξεις"]["μετοχή"].items():
					if διάλεκτο not in καταλήξεις:
						καταλήξεις[διάλεκτο] = {}
					if "μετοχή" not in καταλήξεις[διάλεκτο]:
						καταλήξεις[διάλεκτο]["μετοχή"] = {}
					for χρόνο, σύνολα in χρόνοι.items():
						καταλήξεις[διάλεκτο]["μετοχή"][χρόνο] = []
						μετρ = 0
						for σύνολο in σύνολα:
							if σύνολο:
								καταλήξεις[διάλεκτο]["μετοχή"][χρόνο].append(μετρ)
							μετρ += 1
						καταλήξεις[διάλεκτο]["μετοχή"][χρόνο].sort()
				for θέμα in self.θέματα["ρήμα"]:
					if θέμα:
						διάλεκτος = θέμα["διάλεκτος"]
						if διάλεκτος not in κατον:
							κατον[διάλεκτος] = {}
						πακέτο = str([θέμα["ρήμα"], θέμα["μετοχή"]])
						if πακέτο not in κατον[διάλεκτος]:
							κατον[διάλεκτος][πακέτο] = {
								"ρήμα":ομάδα["ρήμα"][διάλεκτος][θέμα["ρήμα"]],
								"μετοχή":ομάδα["μετοχή"][διάλεκτος][θέμα["μετοχή"]]}
						if διάλεκτος not in ευρετήριο:
							ευρετήριο[διάλεκτος] = {}
						if θέμα["συνθετικό"]:
							λήμμα = θέμα["συνθετικό"]+θέμα["λήμμα"]
						else:
							λήμμα = θέμα["λήμμα"]
						if len(λήμμα)>0:
							if λήμμα[0] not in ευρετήριο[διάλεκτος]:
								ευρετήριο[διάλεκτος][λήμμα[0]] = {}
							if λήμμα not in ευρετήριο[διάλεκτος][λήμμα[0]]:
								ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα] = μετρητής
							else:
								ευρετήριο[διάλεκτος][λήμμα[0]][λήμμα+str(μετρητής)]=μετρητής
						else:
							if "" not in ευρετήριο[διάλεκτος]:
								ευρετήριο[διάλεκτος][""] = {}
							if "" not in ευρετήριο[διάλεκτος][""]:
								ευρετήριο[διάλεκτος][""][""] = μετρητής
							else:
								ευρετήριο[διάλεκτος][""][str(μετρητής)]=μετρητής
					μετρητής +=1
				dump.append(ευρετήριο)
				dump.append(καταλήξεις)
				dump.append(κατον)
		elif n>2:
			if dkwd[1]=="js":
				if dkwd[2]=="prototype.js":
					path = os.path.join("Ελληνικά", "web", "public", "js", dkwd[2])
				else:
					path = os.path.join("Ελληνικά", "web", "js", dkwd[2])
				if os.path.exists(path):
					f=open(path,'r')
					js=f.read()
					f.close()
					return js
		elif n>1:
			order = dkwd[1]
			if order=="index.html":
				f=open(os.path.join("Ελληνικά", "web", "index.html"),'r')
				html=f.read()
				f.close()
				return html
			else:
				path = os.path.join("Ελληνικά", "web", order+".html")
				if os.path.exists(path):
					f=open(path,'r')
					html=f.read()
					f.close()
					return html
		elif n==0:
			raise cherrypy.HTTPRedirect("index.html")
		
		#print("DUMP", dump[:500])
		if dkwd[1] in ["develop", "dump"]:
			if self.json_out:
				return json.dumps(dump, 'utf-8') # json version
			else:
				dump = str(dump).replace("None", "null").replace("True", "true")
				return dump.replace("'",'"') # plain text version
		else:
			raise cherrypy.HTTPRedirect("https://localhost:7001/HLT/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CE%AC/index.html")
			
		raise cherrypy.HTTPRedirect("https://localhost:7001/HLT/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CE%AC/index.html")
		
	HLT._cp_config={'tools.basic_auth.on': True,
         'tools.basic_auth.realm' : 'localhost',
         'tools.basic_auth.users' : users,
         'tools.sessions.on': True,
         'tools.sessions.timeout': 180, 
         'tools.basic_auth.encrypt': clear_text,}
			
	@cherrypy.expose
	@cherrypy.tools.encode(encoding='UTF-8')
	def index(self):
		raise cherrypy.HTTPRedirect("https://localhost:7001/HLT/%CE%95%CE%BB%CE%BB%CE%B7%CE%BD%CE%B9%CE%BA%CE%AC/index.html")
	
	def _κΤονισμοί(self, τονισμοί):
		κΤονισμοί = []
		for τόνο in τονισμοί:
			υπο = []
			for υποτόνο in τόνο:
				κΛέξη = self.ελληνικά.γ.τ.κωδικοποιητής(υποτόνο.strip())
				τ = self.ελληνικά.γ.τ.πάρε_τονισμό(κΛέξη)
				if τ:
					υπο.append(τ)
			κΤονισμοί.append(υπο)
		return κΤονισμοί
	
	def _τονισμοί(self, κΤονισμοί):
		νέοι_τονισμοί = []
		κΛέξη = self.ελληνικά.γ.τ.κωδικοποιητής("αααα")
		for τονισμό in κΤονισμοί:
			νέο = []
			for υποτονισμό in τονισμό:
				if υποτονισμό:
					κλ = κΛέξη.__deepcopy__(κΛέξη)
					self.ελληνικά.γ.τ.τόνισε(κλ, υποτονισμό)
					απ = self.ελληνικά.γ.τ.απο(κλ)
					νέο.append(απ)
			νέοι_τονισμοί.append(νέο)
		return νέοι_τονισμοί
	
	def _καταλήξεις(self, καταλήξεις):
		κΚαταλήξεις = []
		for κατάληξη in καταλήξεις:
			κΚατάληξη = []
			for υπο in κατάληξη:
				κΚατάληξη.append(self.ελληνικά.γ.τ.κωδικοποιητής(υπο))
			κΚαταλήξεις.append(κΚατάληξη)
		return κΚαταλήξεις
	
	def _κΚαταλήξεις(self, κΚαταλήξεις):
		καταλήξεις = []
		for κΚατάληξη in κΚαταλήξεις:
			κατάληξη = []
			for κυπο in κΚατάληξη:
				κατάληξη.append(self.ελληνικά.γ.τ.απο(κυπο, True))
			καταλήξεις.append(κατάληξη)
		return καταλήξεις
	
	def καθάρισμα(self, αναγνώριση):
		if αναγνώριση.get("συνθετικό"):
			αναγνώριση["κΣυνθετικό"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["συνθετικό"])
		if αναγνώριση.get("λήμμα"):
			αναγνώριση["κΛέξη"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["λήμμα"])
		if αναγνώριση.get("θέμα"):
			αναγνώριση["κΛέξη"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["θέμα"])
		if αναγνώριση.get("αύξηση"):
			αναγνώριση["κΑύξηση"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["αύξηση"])
		if αναγνώριση.get("αύξηση παρακείμενου"):
			αναγνώριση["κΑύξηση παρακείμενου"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["αύξηση παρακείμενου"])
		if αναγνώριση.get("ενεστωτική αύξηση"):
			αναγνώριση["κΕνεστωτική αύξηση"] = self.ελληνικά.γ.τ.κωδικοποιητής(αναγνώριση["ενεστωτική αύξηση"])
		if αναγνώριση and αναγνώριση["μέρος του λόγου"]=="ουσιαστικό":
			pass
		elif αναγνώριση and αναγνώριση["μέρος του λόγου"]=="επίθετο":
			pass
		elif αναγνώριση and αναγνώριση["μέρος του λόγου"]=="ρήμα":
			for ρμ in ["ρήμα", "μετοχή"]:
				χρόνοι = list(αναγνώριση[ρμ].keys())
				del_keys = []
				for χρόνος in χρόνοι:
					a=self.ελληνικά.γ._δεδομένα.δ["κατηγοριοτονισμoί"][ρμ][αναγνώριση["διάλεκτος"]]
					if χρόνος in a and len(a[χρόνος])>αναγνώριση[ρμ][χρόνος]:
						αναγνώριση[ρμ][χρόνος] = a[χρόνος][αναγνώριση[ρμ][χρόνος]]
					else:
						del_keys.append(χρόνος)
				for dk in del_keys:
					del αναγνώριση[ρμ][dk]
